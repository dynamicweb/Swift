@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Dynamicweb.Frontend
@using System.Text.RegularExpressions
@MasterPageFile("Swift_MasterNoLayout.cshtml")

@{
	List<string> fontList = new List<string>();

	GoogleFontViewModel headerFont = null;
	string headerFontFamily = "Roboto";
	string headerFontWeight = "300";
	string headerCasing = "inherit";
	string headerLineHeight = "1.2";
	string headerLetterSpacing = "0";
	GoogleFontViewModel displayFont = null;
	string displayFontFamily = "Roboto";
	string displayFontWeight = "bold";
	string displayCasing = "inherit";
	string displayLineHeight = "1.2";
	string displayLetterSpacing = "0";
	GoogleFontViewModel bodyFont = null;
	string bodyFontFamily = "Roboto";
	string bodyFontWeight = "regular";
	string bodyLineHeight = "1.5";
	string bodyLetterSpacing = "0";

	string primaryButtonFontWeight = "normal";
	string primaryButtonCasing = "inherit";
	string primaryButtonShape = "0";
	string primaryButtonXpadding = "0.75rem";

	string secondaryButtonFontWeight = "normal";
	string secondaryButtonCasing = "inherit";
	string secondaryButtonShape = "0";
	string secondaryButtonXpadding = "0.75rem";

	if (Model.Item != null)
	{
		@* HEADER font*@
		headerFont = Model.Item.GetGoogleFont("HeaderFont");
		if (headerFont != null)
		{
			headerFontFamily = headerFont.Family;
			headerFontWeight = headerFont.Weight;
			fontList.Add(System.Net.WebUtility.UrlEncode(headerFontFamily) + ":ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900");
		}
		headerCasing = Model.Item.GetRawValueString("HeaderCasing");
		headerLineHeight = Model.Item.GetDouble("HeaderLineHeight").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
		headerLetterSpacing = Model.Item.GetDouble("HeaderLetterSpacing").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));

		@* DISPLAY font*@
		displayFont = Model.Item.GetGoogleFont("DisplayFont");
		if (displayFont != null)
		{
			displayFontFamily = displayFont.Family;
			displayFontWeight = displayFont.Weight;
			fontList.Add(System.Net.WebUtility.UrlEncode(displayFontFamily) + ":ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900");
		}
		displayCasing = Model.Item.GetRawValueString("DisplayCasing");
		displayLineHeight = Model.Item.GetDouble("DisplayLineHeight").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
		displayLetterSpacing = Model.Item.GetDouble("DisplayLetterSpacing").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));

		@* BODY font*@
		bodyFont = Model.Item.GetGoogleFont("BodyFont");
		if (bodyFont != null)
		{
			bodyFontFamily = bodyFont.Family;
			bodyFontWeight = bodyFont.Weight;
			fontList.Add(System.Net.WebUtility.UrlEncode(bodyFontFamily) + ":ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900");
		}
		bodyLineHeight = Model.Item.GetDouble("BodyLineHeight").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
		bodyLetterSpacing = Model.Item.GetDouble("BodyLetterSpacing").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));

		@* Primary button *@
		primaryButtonFontWeight = Model.Item.GetRawValueString("PrimaryButtonFontWeight", "normal");
		primaryButtonCasing = Model.Item.GetRawValueString("PrimaryButtonCasing", "initial");

		primaryButtonShape = Model.Item.GetRawValueString("PrimaryButtonShape", "0");
		primaryButtonShape = primaryButtonShape == "rounded" ? ".25rem" : primaryButtonShape;
		primaryButtonShape = primaryButtonShape == "pill" ? "12.5rem" : primaryButtonShape;

		primaryButtonXpadding = Model.Item.GetRawValueString("PrimaryButtonShape", "0") == "pill" ? "1.25rem" : primaryButtonXpadding;

		@* Secondary button *@
		secondaryButtonFontWeight = Model.Item.GetRawValueString("SecondaryButtonFontWeight", "normal");
		secondaryButtonCasing = Model.Item.GetRawValueString("SecondaryButtonCasing", "initial");

		secondaryButtonShape = Model.Item.GetRawValueString("SecondaryButtonShape", "0");
		secondaryButtonShape = secondaryButtonShape == "rounded" ? ".25rem" : secondaryButtonShape;
		secondaryButtonShape = secondaryButtonShape == "pill" ? "12.5rem" : secondaryButtonShape;

		secondaryButtonXpadding = Model.Item.GetRawValueString("SecondaryButtonShape", "0") == "pill" ? "1.25rem" : secondaryButtonXpadding;

}

var fontsToLink = string.Join("&", fontList.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("family={0}", x)));

var sb = new System.Text.StringBuilder();


string googleCss = string.Empty;
try
{
	using (var client = new System.Net.WebClient())
	{

		client.Headers.Add("user-agent", Dynamicweb.Context.Current.Request.UserAgent);
		googleCss = client.DownloadString($"https://fonts.googleapis.com/css2?{fontsToLink}&display=swap");
		//googleCss = System.Text.RegularExpressions.Regex.Replace(googleCss, @"\s+", ""); //minify the css.

		Dictionary<string, string> googleFontUrls = new Dictionary<string, string>();
		Regex cssUrlGoogleFontsRegEx = new Regex(@"url\((?<googleFontUrl>.+?)\)", RegexOptions.Compiled | RegexOptions.CultureInvariant);
		string firstPartOfCss = googleCss.Substring(googleCss.LastIndexOf("{"), googleCss.LastIndexOf("}")- googleCss.LastIndexOf("{"));

		MatchCollection matches = cssUrlGoogleFontsRegEx.Matches(firstPartOfCss);//We will only take the first URL as that is what is primarily used. If the remaining woff fonts needs loading, the browser will take care of that.

		for (var i = 0; i < matches.Count; i++)
		{
			Match match = matches[i];
			string url = match.Groups["googleFontUrl"].Value;
			if (!googleFontUrls.ContainsKey(url))
			{
				googleFontUrls.Add(url, url);
			}
			break;//We will only take the first URL as that is what is primarily used. If the remaining woff fonts needs loading, the browser will take care of that.
		}

		if (googleFontUrls.Count > 0)
		{
			var fontSb = new System.Text.StringBuilder();
			foreach (string url in googleFontUrls.Values)
			{
				fontSb.AppendLine($"<link rel=\"preload\" href=\"{url}\" as=\"font\" type=\"font/woff2\" crossorigin>");
			}
			string htmlPathFontPreload = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_GoogleFontUrls_{Model.Area.ID}.html");
			Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(fontSb.ToString(), htmlPathFontPreload, false);
		}

		sb.AppendLine(googleCss);
	}
}
catch (Exception ex)
{
	//Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(Dynamicweb.Context.Current.Server.MapPath($"~/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_error.txt"), ex.ToString(), false);
	@ex.ToString()
		sb.AppendLine($"@import url('https://fonts.googleapis.com/css2?{fontsToLink}&display=swap');");
	}


	sb.AppendLine("");


	sb.AppendLine(".brand {");

	sb.AppendLine($"--swift-header-font: '{headerFontFamily}';");
	sb.AppendLine($"--swift-header-font-weight: {headerFontWeight};");
	sb.AppendLine($"--swift-header-casing: {headerCasing};");
	sb.AppendLine($"--swift-header-line-height: {headerLineHeight};");
	sb.AppendLine($"--swift-header-letter-spacing: {headerLetterSpacing}em;");
	sb.AppendLine($"--swift-display-font: '{displayFontFamily}';");
	sb.AppendLine($"--swift-display-font-weight: {displayFontWeight};");
	sb.AppendLine($"--swift-display-casing: {displayCasing};");
	sb.AppendLine($"--swift-display-line-height: {displayLineHeight};");
	sb.AppendLine($"--swift-display-letter-spacing: {displayLetterSpacing}em;");
	sb.AppendLine($"--swift-body-font: '{bodyFontFamily}';");
	sb.AppendLine($"--swift-body-font-weight: {bodyFontWeight};");
	sb.AppendLine($"--swift-body-line-height: {bodyLineHeight};");
	sb.AppendLine($"--swift-body-letter-spacing: {bodyLetterSpacing}em;");

	sb.AppendLine($"--swift-button-primary-font-weight: {primaryButtonFontWeight};");
	sb.AppendLine($"--swift-button-primary-casing: {primaryButtonCasing};");
	sb.AppendLine($"--swift-button-primary-shape: {primaryButtonShape};");
	sb.AppendLine($"--swift-button-primary-x-padding: {primaryButtonXpadding};");

	sb.AppendLine($"--swift-button-secondary-font-weight: {secondaryButtonFontWeight};");
	sb.AppendLine($"--swift-button-secondary-casing: {secondaryButtonCasing};");
	sb.AppendLine($"--swift-button-secondary-shape: {secondaryButtonShape};");
	sb.AppendLine($"--swift-button-secondary-x-padding: {secondaryButtonXpadding};");

	sb.AppendLine($"--swift-debug-css-written: '{DateTime.Now.ToString()}';");
	sb.AppendLine($"--swift-debug-page-changed: '{Model.UpdatedDate.ToString()}';");

	sb.AppendLine("}");

	string cssPathEcommerceBadges = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_ecommerce_badge_styles_{Model.Area.ID}.css");
	string cssPathTheme = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_theme_styles_{Model.Area.ID}.css");
	string cssPathBranding = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_branding_styles_{Model.Area.ID}.css");
	string cssPathCombined = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_styles_{Model.Area.ID}.min.css");

	Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(sb.ToString(), cssPathBranding, false);

	string combinedCss = Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathBranding);
	combinedCss += Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathTheme);
	combinedCss += Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathEcommerceBadges);
	combinedCss = System.Text.RegularExpressions.Regex.Replace(combinedCss, @"\s+", ""); //minify the css.
	combinedCss = combinedCss.Replace("\00a0", " "); //Re-insert spaces for content text
	Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(combinedCss, cssPathCombined, false);
}

<div class="container my-5 theme light">
	<div class="grid gap-3 mb-5 pb-3 text-center border-bottom">
		<div class="g-col-12">
			<h1 class="h1">@Translate("Branding") </h1>
			<div class="lead">@Translate("Define how you appear")</div>
		</div>
	</div>

	<div class="grid g-4">
		<div class="g-col-12">
			<div class="lead text-muted text-uppercase mb-3 pb-2 border-bottom">@Translate("Header font")</div>
		</div>
		<div class="g-col-12 g-col-lg-7">
			<div class="fs-7 text-muted">H1</div>
			<h1 class="h1 mb-3">@Translate("The whole beauty appeared before them in a swift")</h1>
			<div class="fs-7 text-muted">H2</div>
			<h2 class="h2 mb-3">@Translate("The whole beauty appeared before them in a swift")</h2>
			<div class="fs-7 text-muted">H3</div>
			<h3 class="h3 mb-3">@Translate("The whole beauty appeared before them in a swift")</h3>
			<div class="fs-7 text-muted">H4</div>
			<h4 class="h4 mb-3">@Translate("The whole beauty appeared before them in a swift")</h4>
			<div class="fs-7 text-muted">H5</div>
			<h5 class="h5 mb-3">@Translate("The whole beauty appeared before them in a swift")</h5>
			<div class="fs-7 text-muted">H6</div>
			<h6 class="h6 mb-3">@Translate("The whole beauty appeared before them in a swift")</h6>
		</div>
		<div class="g-col-12 g-col-lg-5">
			<div class="grid fs-7">
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font family")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerFontFamily');">@headerFontFamily</a></td>
						</tr>
						<tr>
							<td>@Translate("Font weigth")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerFontWeight');">@headerFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerCasing');">@headerCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Line height")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerLineHeight');">@headerLineHeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Letter spacing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerLetterSpacing');">@headerLetterSpacing</a></td>
						</tr>
					</table>
				</div>
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								<div class="mb-2">@Translate("Simply use these css classes"):</div>
								<div>.h1, .h2, .h3, .h4, .h5, .h6</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="g-col-12">
			<div class="lead text-muted text-uppercase my-3 pb-2 border-bottom">@Translate("Display font")</div>
		</div>
		<div class="g-col-12 g-col-lg-7">
			<div class="fs-7 text-muted">Display 1</div>
			<h1 class="display-1 mb-4">@Translate("Just in a swift")</h1>
			<div class="fs-7 text-muted">Display 2</div>
			<h2 class="display-2 mb-4">@Translate("Just in a swift")</h2>
			<div class="fs-7 text-muted">Display 3</div>
			<h3 class="display-3 mb-4">@Translate("Just in a swift")</h3>
			<div class="fs-7 text-muted">Display 4</div>
			<h4 class="display-4 mb-4">@Translate("Just in a swift")</h4>
			<div class="fs-7 text-muted">Display 5</div>
			<h5 class="display-5 mb-4">@Translate("Just in a swift")</h5>
			<div class="fs-7 text-muted">Display 6</div>
			<h6 class="display-6 mb-4">@Translate("Just in a swift")</h6>
		</div>
		<div class="g-col-12 g-col-lg-5">
			<div class="grid fs-7">
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font family")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayFontFamily');">@displayFontFamily</a></td>
						</tr>
						<tr>
							<td>@Translate("Font weigth")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayFontWeight');">@displayFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayCasing');">@displayCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Line height")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayLineHeight');">@displayLineHeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Letter spacing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayLetterSpacing');">@displayLetterSpacing</a></td>
						</tr>
					</table>
				</div>
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								<div class="mb-2">@Translate("Simply use these css classes"):</div>
								<div>.display-1, .display-2, .display-3, .display-4, .display-5, .display-6</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="g-col-12">
			<div class="lead text-muted text-uppercase mt-3 pb-2 border-bottom">@Translate("Body font")</div>
		</div>
		<div class="g-col-12 g-col-lg-7">
			<p class="mb-3">@Translate("The whole beauty appeared before them in a swift")</p>
		</div>
		<div class="g-col-12 g-col-lg-5">
			<div class="grid fs-7">
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font family")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyFontFamily');">@bodyFontFamily</a></td>
						</tr>
						<tr>
							<td>@Translate("Font weigth")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyFontWeight');">@bodyFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Line height")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyLineHeight');">@bodyLineHeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Letter spacing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyLetterSpacing');">@bodyLetterSpacing</a></td>
						</tr>
					</table>
				</div>
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								@Translate("Works on all text that is not styled with a heading or display class")
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="g-col-12">
			<div class="lead text-muted text-uppercase mt-3 pb-2 border-bottom">@Translate("Primary button")</div>
		</div>
		<div class="g-col-12 g-col-lg-7">
			<button class="btn btn-primary">@Translate("Add to cart")</button>
		</div>
		<div class="g-col-12 g-col-lg-5">
			<div class="grid fs-7">
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font weigth")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonFontWeight');">@primaryButtonFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonCasing');">@primaryButtonCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Shape")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonShape');">@primaryButtonShape</a></td>
						</tr>
					</table>
				</div>
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								@{
									string implementationPrimary = "<button class=\"btn btn-primary\">" + Translate("Add to cart") + "</button>";
								}
								<div class="text-muted">
									<a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('btn btn-primary');">
										@Dynamicweb.Core.Encoders.HtmlEncoder.HtmlEncode(implementationPrimary)
									</a>
								</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="g-col-12">
			<div class="lead text-muted text-uppercase mt-3 pb-2 border-bottom">@Translate("Secondary button")</div>
		</div>
		<div class="g-col-12 g-col-lg-7">
			<button class="btn btn-secondary">@Translate("Read more")</button>
		</div>
		<div class="g-col-12 g-col-lg-5">
			<div class="grid fs-7">
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font weigth")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonFontWeight');">@secondaryButtonFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonCasing');">@secondaryButtonCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Shape")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonShape');">@secondaryButtonShape</a></td>
						</tr>
					</table>
				</div>
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								@{
									string implementationSecondary = "<button class=\"btn btn-secondary\">" + Translate("Read more") + "</button>";
								}
								<div class="text-muted">
									<a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('btn btn-secondary');">
										@Dynamicweb.Core.Encoders.HtmlEncoder.HtmlEncode(implementationSecondary)
									</a>
								</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	function fallbackCopyTextToClipboard(text) {
		var textArea = document.createElement("textarea");
		textArea.value = text;

		// Avoid scrolling to bottom
		textArea.style.top = "0";
		textArea.style.left = "0";
		textArea.style.position = "fixed";

		document.body.appendChild(textArea);
		textArea.focus();
		textArea.select();

		try {
			var successful = document.execCommand('copy');
			var msg = successful ? 'successful' : 'unsuccessful';
			console.log('Fallback: Copying text command was ' + msg);
		} catch (err) {
			console.error('Fallback: Oops, unable to copy', err);
		}

		document.body.removeChild(textArea);
	}
	function copyTextToClipboard(text) {
		if (!navigator.clipboard) {
			fallbackCopyTextToClipboard(text);
			return;
		}
		navigator.clipboard.writeText(text).then(function () {
			console.log('Async: Copying to clipboard was successful!');
		}, function (err) {
			console.error('Async: Could not copy text: ', err);
		});
	}
</script>
