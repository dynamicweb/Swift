@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Content
@using Dynamicweb.Content.Items
@using Dynamicweb.Ecommerce.ProductCatalog
@using Page = Dynamicweb.Content.Page
@functions
{
	private string GetImageHandlerImage(string imagePath)
	{
		double imageWidth = GetImageWidth(); // get from the page
		string imageRatio = GetImageRatio();
		string image = $"/Admin/Public/GetImage.ashx?width={imageWidth}";
		string crop = "5";

		if (imageRatio != "original")
		{
			if (!string.IsNullOrEmpty(imageRatio))
			{
				image += $"&height={GetImageHeight(imageRatio, imageWidth)}&fillcanvas=true";
			}
		}

		image += $"&crop={crop}&image={imagePath}";

		return image;
	}

	private double GetImageWidth()
	{
		int newsletterWidth = Pageview != null ? Dynamicweb.Core.Converter.ToInt32(Pageview.Page.Item["Width"]) : 660;

		GridRow grid = Dynamicweb.Services.Grids.GetGridRowById(Pageview.CurrentParagraph.GridRowId);
		var spacing = 20;
		int padding = Convert.ToInt16(Model.Item.GetRawValueString("ContentPadding", "0"));
		int oneColPadding = padding * 2;
		double twoColPadding = padding * 1.5;
		
		if (grid == null) return IsTwoColLayout() ? (newsletterWidth - spacing) / 2 - twoColPadding : newsletterWidth - oneColPadding;

		var definitionId = grid.DefinitionId;

		if (definitionId == "1Column") return IsTwoColLayout() ? (newsletterWidth - spacing) / 2 - twoColPadding : newsletterWidth - oneColPadding;

		var item = Dynamicweb.Services.Items.GetItem(grid.ItemType, grid.ItemId);
		var spaceBetweenColumns = item["SpaceBetweenColumns"].ToString();
		int columnWidth = spaceBetweenColumns != "spacing" ? newsletterWidth / 2 : (newsletterWidth - spacing) / 2;

		return IsTwoColLayout() ? (columnWidth - spacing) / 2 - twoColPadding : columnWidth - oneColPadding;
	}

	private static double GetImageHeight(string imageRatio, double imageWidth)
	{
		string[] ratioValues = imageRatio.Split('-');
		double ratio = ratioValues.Length == 2 ? Dynamicweb.Core.Converter.ToDouble(ratioValues[1]) / Dynamicweb.Core.Converter.ToDouble(ratioValues[0]) : 1;
		return imageWidth * ratio;
	}

	private string GetImageRatio()
	{
		return Model.Item.GetRawValueString("ImageAspectRatio", "original").ToLower();
	}

	private bool IsTwoColLayout()
	{
		string colLayout = Model.Item.GetRawValueString("Layout", "2col").ToLower();
		return colLayout == "2col";
	}
	
	private string GetThemeValue(string systemName)
	{
		int themesPageId = Pageview.AreaSettings.GetLink("ThemesPage") != null ? Pageview.AreaSettings.GetLink("ThemesPage").PageId : 0;
		if (themesPageId == 0) return "";
        
		List<Paragraph> themesPageParagraphs = Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(themesPageId)?.ToList();
		string theme = GetSelectedTheme();
		Paragraph themeParagraph = themesPageParagraphs?.FirstOrDefault(p => p.Item["Name"].ToString().ToLower().Equals(theme));
		if (themeParagraph == null) return "";
		string themeValue = themeParagraph.Item[systemName] != null ? themeParagraph.Item[systemName].ToString() : "";
		themeValue = themeValue == "" ? "unset" : themeValue;
		return themeValue;
	}

	private string GetSelectedTheme()
	{
		string theme = !string.IsNullOrEmpty(Pageview.CurrentParagraph.Item["Theme"]?.ToString()) ? Pageview.CurrentParagraph.Item["Theme"].ToString().ToLower() : "";
		if (!string.IsNullOrEmpty(theme) && theme != "theme default") return theme;

		GridRow grid = Dynamicweb.Services.Grids.GetGridRowById(Pageview.CurrentParagraph.GridRowId);
		Item item = Dynamicweb.Services.Items.GetItem(grid.ItemType, grid.ItemId);
		theme = item["Theme"]?.ToString().ToLower();
		
		if (!string.IsNullOrEmpty(theme) && theme != "theme default") return theme;
		
		theme = Dynamicweb.Core.Converter.ToString(Pageview.Page.Item["Theme"])?.ToLower();
		return !string.IsNullOrEmpty(theme) && theme != "theme default" ? theme : "";
	}
	
	private string GetFontStyle(string type)
	{
		int brandingPageId = Pageview.AreaSettings.GetLink("BrandingPage") != null ? Pageview.AreaSettings.GetLink("BrandingPage").PageId : 0;
		if (brandingPageId == 0) return "";
		
		Page brandingPage = Dynamicweb.Services.Pages?.GetPage(brandingPageId);
		if (brandingPage == null) return "";
		
		string fontStyle = "";
		dynamic font = Newtonsoft.Json.JsonConvert.DeserializeObject(brandingPage.Item[type+"Font"].ToString());
		if (font != null) {
			fontStyle += $"font-family:{font.Family}, sans-serif;";
			fontStyle += $"font-weight:{font.SelectedVariant};";
		}
		fontStyle += $"text-transform:{brandingPage.Item[type+"Casing"]};";
		fontStyle += $"line-height:{brandingPage.Item[type+"LineHeight"]};";
		fontStyle += $"letter-spacing:{brandingPage.Item[type+"LetterSpacing"]};";
		return fontStyle;
	}

	private string GetPadding(bool isProductColumn = false)
	{
		if (isProductColumn && !IsTwoColLayout()) return "0";
		int paddingValue = Convert.ToInt32(Model.Item.GetRawValueString("ContentPadding", "0"));
		return (IsTwoColLayout() ? paddingValue / 2 : paddingValue) + "px";
	}
}
@{
	ProductListViewModel selectedProductList = Model.Item?.GetValue("Products") as ProductListViewModel;
	string backgroundColor = !string.IsNullOrEmpty(GetSelectedTheme()) ? GetThemeValue("BackgroundColor") : "transparent";
}

<td style="padding:@GetPadding();background-color:@backgroundColor;">
	@if (selectedProductList != null)
	{
		IList<ProductViewModel> products = selectedProductList.Products;

		if (products.Any())
		{
			if (IsTwoColLayout())
			{
				@RenderTwoCol(products)
			}
			else
			{
				@RenderOneCol(products)
			}
		}
	}
</td>

@helper RenderOneCol(IList<ProductViewModel> products)
{
	foreach (var product in products)
	{
		<div class="layout__inner" style="margin-bottom:10px;border-collapse: collapse;display: table;width: 100%;">
			<!--[if (mso)|(IE)]><table align="center" cellpadding="0" cellspacing="0" role="presentation"><tr><td style="width: 290px" valign="top" class="w250"><![endif]-->
			@RenderProduct(product)
			<!--[if (mso)|(IE)]></td></tr></table><![endif]-->
		</div>
	}
}

@helper RenderTwoCol(IList<ProductViewModel> products)
{
	int index = 1;
	foreach (var product in products)
	{
		bool isFirstProductInRow = index % 2 != 0;

		if (isFirstProductInRow)
		{
			@:<div class="layout__inner" style="margin-bottom:10px;border-collapse: collapse;display: table;width: 100%;">
			<!--[if (mso)|(IE)]><table align="center" cellpadding="0" cellspacing="0" role="presentation"><tr><td style="width: 290px" valign="top" class="w250"><![endif]-->
		}
	
		if (!isFirstProductInRow)
		{
			<!--[if (mso)|(IE)]></td><td style="width: 20px"><![endif]-->
			<div class="gutter" style="Float: left;width: 20px;">&nbsp;</div><!--[if (mso)|(IE)]></td><td style="width: 290px" valign="top" class="w250"><![endif]-->
		}
	
		@RenderProduct(product)
		
		if (!isFirstProductInRow || index == products.Count)
		{
			<!--[if (mso)|(IE)]></td></tr></table><![endif]-->
			@:</div>
		}
		index++;
	}
}

@helper RenderProduct(ProductViewModel product)
{
	string link = "Default.aspx?ID=" + GetPageIdByNavigationTag("Shop");
	link += $"&GroupID={product.PrimaryOrDefaultGroup.Id}";
	link += $"&ProductID={product.Id}";
	link += !string.IsNullOrEmpty(product.VariantId) ? $"&VariantID={product.VariantId}" : "";
	link = Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(link);

	string foregroundColor = !string.IsNullOrEmpty(GetSelectedTheme()) ? GetThemeValue("ForegroundColor") : "#000000";
	string width = GetImageRatio() == "original" ? "" : "width:100%";
	string bodyFontStyle = GetFontStyle("Body");
	string headerFontStyle = GetFontStyle("Header");

	<div class="column product-column" style="max-width: 320px;min-width: 290px; width: 320px;width: calc(18290px - 3000%);Float: left;">
		<table style="border-collapse: collapse;table-layout: fixed;" cellpadding="0" cellspacing="0" width="100%" role="presentation">
			<tbody>
				<tr>
					<td style="padding:@GetPadding(true);@bodyFontStyle">
						<a style="text-decoration: none;transition: opacity 0.1s ease-in;color:@foregroundColor;" href="@link">
							<div align="left">
								<img style="border: 0;display: block;height: auto;max-width: 100%;@width" alt="@product.Name" src="@GetImageHandlerImage(product.DefaultImage.Value)">
							</div>
							<div style="mso-line-height-rule: exactly;mso-text-raise: 11px;vertical-align: middle;">
								<h2 class="size-16" style="margin-top:10px;margin-bottom:0;font-size: 16px;text-align: left;@headerFontStyle;text-transform:uppercase;" lang="x-size-16">
									<span>@product.Name</span>
								</h2>
							</div>
							<div style="mso-line-height-rule: exactly;mso-text-raise: 11px;vertical-align: middle;">
								<p style="Margin-top: 0;Margin-bottom: 0;text-align:left;font-weight:700;">@product.Price.PriceFormatted</p>
							</div>
						</a>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
}
