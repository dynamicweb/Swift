@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb

@{ 
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string productGroupPromotionImageTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ProductGroupPromotionImageTheme")) ? " theme " + Model.Item.GetRawValueString("ProductGroupPromotionImageTheme").Replace(" ", "").Trim().ToLower() : "";

	string layout = Model.Item.GetRawValueString("Layout", "linksOnly");

	string navAlignment = Model.Item.GetRawValueString("NavAlignment", "justify-content-start text-start");
	navAlignment = navAlignment == "start" ? "justify-content-start text-start" : navAlignment;
	navAlignment = navAlignment == "center" ? "justify-content-center text-center" : navAlignment;
	navAlignment = navAlignment == "end" ? "justify-content-end text-end" : navAlignment;

	string dropdownAlignment = Model.Item.GetRawValueString("DropdownAlignment", "justify-content-start text-start");
	dropdownAlignment = dropdownAlignment == "start" ? "justify-content-start text-start" : dropdownAlignment;
	dropdownAlignment = dropdownAlignment == "center" ? "justify-content-center text-center" : dropdownAlignment;
	dropdownAlignment = dropdownAlignment == "end" ? "justify-content-end text-end" : dropdownAlignment;

	string linkFontWeight = Model.Item.GetRawValueString("LinkFontWeight", "fw-normal");
	linkFontWeight = linkFontWeight == "light" ? "fw-light" : linkFontWeight;
	linkFontWeight = linkFontWeight == "normal" ? "fw-normal" : linkFontWeight;
	linkFontWeight = linkFontWeight == "bold" ? "fw-bold" : linkFontWeight;

	string linkCasing = Model.Item.GetRawValueString("LinkCasing", "");
	linkCasing = linkCasing == "regular" ? "" : linkCasing;
	linkCasing = linkCasing == "uppercase" ? "text-uppercase" : linkCasing;
	linkCasing = linkCasing == "lowercase" ? "text-lowercase" : linkCasing;

	string linkFontSize = Model.Item.GetRawValueString("LinkFontSize", "fs-6");
	linkFontSize = linkFontSize == "small" ? "fs-7" : linkFontSize;
	linkFontSize = linkFontSize == "regular" ? "fs-6" : linkFontSize;
	linkFontSize = linkFontSize == "large" ? "fs-5" : linkFontSize;

	string dropdownLinkHeaderFontWeight = Model.Item.GetRawValueString("DropdownLinkHeaderFontWeight", "fw-normal");
	dropdownLinkHeaderFontWeight = dropdownLinkHeaderFontWeight == "light" ? "fw-light" : dropdownLinkHeaderFontWeight;
	dropdownLinkHeaderFontWeight = dropdownLinkHeaderFontWeight == "normal" ? "fw-normal" : dropdownLinkHeaderFontWeight;
	dropdownLinkHeaderFontWeight = dropdownLinkHeaderFontWeight == "bold" ? "fw-bold" : dropdownLinkHeaderFontWeight;

	string dropdownLinkHeaderCasing = Model.Item.GetRawValueString("DropdownLinkHeaderCasing", "");
	dropdownLinkHeaderCasing = dropdownLinkHeaderCasing == "regular" ? "" : dropdownLinkHeaderCasing;
	dropdownLinkHeaderCasing = dropdownLinkHeaderCasing == "uppercase" ? "text-uppercase" : dropdownLinkHeaderCasing;
	dropdownLinkHeaderCasing = dropdownLinkHeaderCasing == "lowercase" ? "text-lowercase" : dropdownLinkHeaderCasing;

	string dropdownLinkHeaderFontSize = Model.Item.GetRawValueString("DropdownLinkHeaderFontSize", "fs-6");
	dropdownLinkHeaderFontSize = dropdownLinkHeaderFontSize == "small" ? "fs-7" : dropdownLinkHeaderFontSize;
	dropdownLinkHeaderFontSize = dropdownLinkHeaderFontSize == "regular" ? "fs-6" : dropdownLinkHeaderFontSize;
	dropdownLinkHeaderFontSize = dropdownLinkHeaderFontSize == "large" ? "fs-5" : dropdownLinkHeaderFontSize;

	string dropdownLinkFontWeight = Model.Item.GetRawValueString("DropdownLinkFontWeight", "fw-normal");
	dropdownLinkFontWeight = dropdownLinkFontWeight == "light" ? "fw-light" : dropdownLinkFontWeight;
	dropdownLinkFontWeight = dropdownLinkFontWeight == "normal" ? "fw-normal" : dropdownLinkFontWeight;
	dropdownLinkFontWeight = dropdownLinkFontWeight == "bold" ? "fw-bold" : dropdownLinkFontWeight;

	string dropdownLinkCasing = Model.Item.GetRawValueString("DropdownLinkCasing", "");
	dropdownLinkCasing = dropdownLinkCasing == "regular" ? "" : dropdownLinkCasing;
	dropdownLinkCasing = dropdownLinkCasing == "uppercase" ? "text-uppercase" : dropdownLinkCasing;
	dropdownLinkCasing = dropdownLinkCasing == "lowercase" ? "text-lowercase" : dropdownLinkCasing;

	string dropdownLinkFontSize = Model.Item.GetRawValueString("DropdownLinkFontSize", "fs-6");
	dropdownLinkFontSize = dropdownLinkFontSize == "small" ? "fs-7" : dropdownLinkFontSize;
	dropdownLinkFontSize = dropdownLinkFontSize == "regular" ? "fs-6" : dropdownLinkFontSize;
	dropdownLinkFontSize = dropdownLinkFontSize == "large" ? "fs-5" : dropdownLinkFontSize;

	string imagePlacement = Model.Item.GetRawValueString("ProductGroupImagePlacement", "");
	imagePlacement = imagePlacement == "image-left" ? "flex-row" : imagePlacement;
	imagePlacement = imagePlacement == "image-right" ? "flex-row-reverse" : imagePlacement;
	imagePlacement = imagePlacement == "image-top" ? "flex-column" : imagePlacement;

	string productGroupImageShape = Model.Item.GetRawValueString("ProductGroupImageShape", "");
	productGroupImageShape = productGroupImageShape == "image-square" ? "" : productGroupImageShape;
	productGroupImageShape = productGroupImageShape == "image-rounded" ? "rounded-circle" : productGroupImageShape;

	string productGroupImageSize = Model.Item.GetRawValueString("ProductGroupImageSize", "");

	string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");

	var navigationSettings = new NavigationSettings();
	navigationSettings.StartLevel = 1;
	navigationSettings.StopLevel = 10;
	navigationSettings.ExpandMode = ExpandMode.All;
	navigationSettings.Parameters.Add("theme", theme);
	navigationSettings.Parameters.Add("NavAlignment", navAlignment);
	navigationSettings.Parameters.Add("DropdownAlignment", dropdownAlignment);
	navigationSettings.Parameters.Add("LinkFontWeight", linkFontWeight);
	navigationSettings.Parameters.Add("LinkCasing", linkCasing);
	navigationSettings.Parameters.Add("LinkFontSize", linkFontSize);
	navigationSettings.Parameters.Add("DropdownLinkHeaderFontWeight", dropdownLinkHeaderFontWeight);
	navigationSettings.Parameters.Add("DropdownLinkHeaderCasing", dropdownLinkHeaderCasing);
	navigationSettings.Parameters.Add("DropdownLinkHeaderFontSize", dropdownLinkHeaderFontSize);
	navigationSettings.Parameters.Add("DropdownLinkFontWeight", dropdownLinkFontWeight);
	navigationSettings.Parameters.Add("DropdownLinkCasing", dropdownLinkCasing);
	navigationSettings.Parameters.Add("DropdownLinkFontSize", dropdownLinkFontSize);
	navigationSettings.Parameters.Add("Layout", layout);
	navigationSettings.Parameters.Add("ProductGroupImagePlacement", imagePlacement);
	navigationSettings.Parameters.Add("ProductGroupImageShape", productGroupImageShape);
	navigationSettings.Parameters.Add("ProductGroupImageSize", productGroupImageSize);
	navigationSettings.Parameters.Add("ProductGroupPromotionImageTheme", productGroupPromotionImageTheme);
	navigationSettings.Parameters.Add("ShowProductGroupPromotionImage", Model.Item.GetBoolean("ShowProductGroupPromotionImage"));
	navigationSettings.Parameters.Add("ImageAspectRatio", ratio);

	if (!string.IsNullOrEmpty(Model.Item.GetString("NavigationRoot")))
	{
		string root = Model.Item.GetString("NavigationRoot");

		if (root.Contains("="))
		{
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			navigationSettings.RootPageId = rootPageId;
		}
	}
}

<div class="item_@Model.Item.SystemName.ToLower()">
	@Navigation.RenderNavigation("Navigation/MegaMenu.cshtml", navigationSettings)
</div>
