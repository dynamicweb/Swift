@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	string eyebrow = Model.Item.GetString("Eyebrow", string.Empty).Replace(System.Environment.NewLine, "<br>");
	string eyebrowHeadingLevel = Model.Item.GetString("EyebrowHeadingLevel", "h5");
	string eyebrowFontSize = Model.Item.GetRawValueString("EyebrowFontSize", "h5");
	string eyebrowColor = Model.Item.GetString("EyebrowColor", "text-inherit");
	string eyebrowTextOpacity = Model.Item.GetString("EyebrowTextOpacity", "opacity-100");
	string eyebrowCssClass = Model.Item.GetString("EyebrowCssClass", string.Empty);
	string eyebrowSpacingBottomDesktop = Model.Item.GetRawValueString("EyebrowSpacingBottomDesktop", "default");
	eyebrowSpacingBottomDesktop = eyebrowSpacingBottomDesktop != "default" ? eyebrowSpacingBottomDesktop : string.Empty;
	string eyebrowSpacingBottomMobile = Model.Item.GetRawValueString("EyebrowSpacingBottomMobile", "default");
	eyebrowSpacingBottomMobile = eyebrowSpacingBottomMobile != "default" ? eyebrowSpacingBottomMobile : string.Empty;

	string title = Model.Item.GetString("Title", string.Empty).Replace(System.Environment.NewLine, "<br>");
	string titleHeadingLevel = Model.Item.GetString("TitleHeadingLevel", "h2");
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h2");
	string titleColor = Model.Item.GetString("TitleColor", "text-inherit");
	string titleTextOpacity = Model.Item.GetString("TitleTextOpacity", "opacity-100");
	string titleCssClass = Model.Item.GetString("TitleCssClass", string.Empty);
	string titleSpacingBottomDesktop = Model.Item.GetRawValueString("TitleSpacingBottomDesktop", "default");
	titleSpacingBottomDesktop = titleSpacingBottomDesktop != "default" ? titleSpacingBottomDesktop : string.Empty;
	string titleSpacingBottomMobile = Model.Item.GetRawValueString("TitleSpacingBottomMobile", "default");
	titleSpacingBottomMobile = titleSpacingBottomMobile != "default" ? titleSpacingBottomMobile : string.Empty;

	string subtitle = Model.Item.GetString("Subtitle", string.Empty).Replace(System.Environment.NewLine, "<br>");
	string subtitleHeadingLevel = Model.Item.GetString("SubtitleHeadingLevel", "p");
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");
	string subtitleColor = Model.Item.GetString("SubtitleColor", "text-inherit");
	string subtitleTextOpacity = Model.Item.GetString("SubtitleTextOpacity", "opacity-100");
	string subtitleCssClass = Model.Item.GetString("SubtitleCssClass", string.Empty);
	string subtitleSpacingBottomDesktop = Model.Item.GetRawValueString("SubtitleSpacingBottomDesktop", "default");
	subtitleSpacingBottomDesktop = subtitleSpacingBottomDesktop != "default" ? subtitleSpacingBottomDesktop : string.Empty;
	string subtitleSpacingBottomMobile = Model.Item.GetRawValueString("SubtitleSpacingBottomMobile", "default");
	subtitleSpacingBottomMobile = subtitleSpacingBottomMobile != "default" ? subtitleSpacingBottomMobile : string.Empty;

	string text = Model.Item.GetString("Text", string.Empty);
	string textFontSize = Model.Item.GetRawValueString("TextFontSize", "fs-6");
	string textColor = Model.Item.GetString("TextColor", "text-inherit");
	string TextOpacity = Model.Item.GetString("TextOpacity", "opacity-100");
	string textCssClass = Model.Item.GetString("TextCssClass", string.Empty);
	string textSpacingBottomDesktop = Model.Item.GetRawValueString("TextSpacingBottomDesktop", "mb-lg-4");
	textSpacingBottomDesktop = textSpacingBottomDesktop != "default" ? textSpacingBottomDesktop : string.Empty;
	string textSpacingBottomMobile = Model.Item.GetRawValueString("TextSpacingBottomMobile", "mb-3");
	textSpacingBottomMobile = textSpacingBottomMobile != "default" ? textSpacingBottomMobile : string.Empty;

	string contentAlignment = Model.Item.GetRawValueString("ContentAlignment", "align-items-center justify-content-center");
	string contentTextAlignment = Model.Item.GetRawValueString("ContentTextAlignment", "text-start");
	string contentSpacingStartDesktop = Model.Item.GetRawValueString("ContentSpacingStartDesktop", "default");
	contentSpacingStartDesktop = contentSpacingStartDesktop != "default" ? contentSpacingStartDesktop : string.Empty;
	string contentSpacingStartMobile = Model.Item.GetRawValueString("ContentSpacingStartMobile", "default");
	contentSpacingStartMobile = contentSpacingStartMobile != "default" ? contentSpacingStartMobile : string.Empty;
	string contentSpacingEndDesktop = Model.Item.GetRawValueString("ContentSpacingEndDesktop", "default");
	contentSpacingEndDesktop = contentSpacingEndDesktop != "default" ? contentSpacingEndDesktop : string.Empty;
	string contentSpacingEndMobile = Model.Item.GetRawValueString("ContentSpacingEndMobile", "default");
	contentSpacingEndMobile = contentSpacingEndMobile != "default" ? contentSpacingEndMobile : string.Empty;
	string contentSpacingTopDesktop = Model.Item.GetRawValueString("ContentSpacingTopDesktop", "default");
	contentSpacingTopDesktop = contentSpacingTopDesktop != "default" ? contentSpacingTopDesktop : string.Empty;
	string contentSpacingTopMobile = Model.Item.GetRawValueString("ContentSpacingTopMobile", "default");
	contentSpacingTopMobile = contentSpacingTopMobile != "default" ? contentSpacingTopMobile : string.Empty;
	string contentSpacingBottomDesktop = Model.Item.GetRawValueString("ContentSpacingBottomDesktop", "default");
	contentSpacingBottomDesktop = contentSpacingBottomDesktop != "default" ? contentSpacingBottomDesktop : string.Empty;
	string contentSpacingBottomMobile = Model.Item.GetRawValueString("ContentSpacingBottomMobile", "default");
	contentSpacingBottomMobile = contentSpacingBottomMobile != "default" ? contentSpacingBottomMobile : string.Empty;
	string contentCssClass = Model.Item.GetString("ContentCssClass", string.Empty);

	var contentClasses = new List<string> { };
	if (contentSpacingStartDesktop != "default") { contentClasses.Add(contentSpacingStartDesktop.Trim()); }
	if (contentSpacingStartMobile != "default") { contentClasses.Add(contentSpacingStartMobile); }
	if (contentSpacingEndDesktop != "default") { contentClasses.Add(contentSpacingEndDesktop.Trim()); }
	if (contentSpacingEndMobile != "default") { contentClasses.Add(contentSpacingEndMobile); }
	if (contentSpacingTopDesktop != "default") { contentClasses.Add(contentSpacingTopDesktop); }
	if (contentSpacingTopMobile != "default") { contentClasses.Add(contentSpacingTopMobile); }
	if (contentSpacingBottomDesktop != "default") { contentClasses.Add(contentSpacingBottomDesktop); }
	if (contentSpacingBottomMobile != "default") { contentClasses.Add(contentSpacingBottomMobile); }
	if (!string.IsNullOrEmpty(contentCssClass)) { contentClasses.Add(contentCssClass); }

	//Button 1
	var button1Link = Model.Item.GetLink("Button1Link");
	var button1Label = Model.Item.GetString("Button1Label", string.Empty);
	var button1Icon = Model.Item.GetRawValueString("Button1Icon");
	var button1IconPosition = Model.Item.GetRawValueString("Button1IconPosition", "right");
	var button1Style = Model.Item.GetRawValueString("Button1Style", "btn-primary");

	//Button 2
	var button2Link = Model.Item.GetLink("Button2Link");
	var button2Label = Model.Item.GetString("Button2Label", string.Empty);
	var button2Icon = Model.Item.GetRawValueString("Button2Icon");
	var button2IconPosition = Model.Item.GetRawValueString("Button2IconPosition", "right");
	var button2Style = Model.Item.GetRawValueString("Button2Style", "btn-primary");
}

<div class="h-100 d-flex position-relative @(contentAlignment) @(theme) item_@Model.Item.SystemName.ToLower()">
	<div class="d-inline-flex flex-column @(contentTextAlignment) @(string.Join(" ",contentClasses))">

		@if (!string.IsNullOrEmpty(eyebrow))
		{
			@RenderContent(eyebrow, eyebrowHeadingLevel, eyebrowFontSize, eyebrowColor, eyebrowTextOpacity, eyebrowSpacingBottomDesktop, eyebrowSpacingBottomMobile, eyebrowCssClass)
		}

		@if (!string.IsNullOrEmpty(title))
		{
			@RenderContent(title, titleHeadingLevel, titleFontSize, titleColor, titleTextOpacity, titleSpacingBottomDesktop, titleSpacingBottomMobile, titleCssClass)
		}

		@if (!string.IsNullOrEmpty(subtitle))
		{
			@RenderContent(subtitle, subtitleHeadingLevel, subtitleFontSize, subtitleColor, subtitleTextOpacity, subtitleSpacingBottomDesktop, subtitleSpacingBottomMobile, subtitleCssClass)
		}

		@if (!string.IsNullOrEmpty(text))
		{
			@RenderContent(text, "div", textFontSize, textColor, TextOpacity, textSpacingBottomDesktop, textSpacingBottomMobile, $"mb-0-last-child {textCssClass}")
		}

		@if (button1Link is object || button2Link is object)
		{
			<div class="d-flex flex-wrap @(contentAlignment) gap-3">
				@if (button1Link is object && !string.IsNullOrEmpty(button1Label))
				{
					@RenderButton(button1Link, button1Label, button1Style, button1Icon, button1IconPosition)
				}

				@if (button2Link is object && !string.IsNullOrEmpty(button1Label))
				{
					@RenderButton(button2Link, button2Label, button2Style, button2Icon, button2IconPosition)
				}
			</div>
		}
		@if (!string.IsNullOrEmpty(Model.ModuleSystemName))
		{
			<div class="item_@Model.Item.SystemName.ToLower()">
				@Model.GetModuleOutput();
			</div>
		}
	</div>
</div>

@helper RenderContent(string content, string heading, string fontSize, string color, string opacity, string margin, string marginMobile, string cssClass)
{
	var classes = new List<string> { };
	if (!string.IsNullOrEmpty(fontSize)) { classes.Add(fontSize); }
	if (!string.IsNullOrEmpty(color)) { classes.Add(color); }
	if (!string.IsNullOrEmpty(opacity)) { classes.Add(opacity); }
	if (!string.IsNullOrEmpty(margin)) { classes.Add(margin); }
	if (!string.IsNullOrEmpty(marginMobile)) { classes.Add(marginMobile); }
	if (!string.IsNullOrEmpty(cssClass)) { classes.Add(cssClass); }

	var tagStart = $"<{heading} class=\"{string.Join(" ", classes)}\">";
	var tagEnd = $"</{heading}>";

	@tagStart
	@content
	@tagEnd
}

@helper RenderButton(Dynamicweb.Frontend.LinkViewModel link, string label, string style, string icon, string iconPosition)
{
	string target = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "target=\"_blank\"" : string.Empty;
	string rel = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "rel=\"noopener\"" : string.Empty;

	<a href="@link.Url" @target @rel class="btn @(style)">
		@if (icon is object)
		{
			<span class="d-flex align-items-center gap-1 @(iconPosition)">
				@label
				@RenderIcon(icon)
			</span>
		}
		else
		{
			@label
		}
	</a>
}

@helper RenderIcon(string icon)
{
	if (System.IO.Path.GetExtension(icon).ToLower() == ".svg")
	{
		if (!icon.ToLower().Contains("none") && icon != string.Empty)
		{
			<span class="icon-auto">
				@ReadFile(icon)
			</span>
		}
	}
}
