@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	ProductViewModel product = null;
	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}
	else if (Pageview.Page.Item["DummyProduct"] != null && Pageview.IsVisualEditorMode)
	{
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel productList = pageViewModel.Item.GetValue("DummyProduct") != null ? pageViewModel.Item.GetValue("DummyProduct") as ProductListViewModel : new ProductListViewModel();

		if (productList?.Products is object)
		{
			product = productList.Products[0];
		}
	}

	bool isErpConnectionDown = !Dynamicweb.Core.Converter.ToBoolean(Dynamicweb.Context.Current.Items["IsWebServiceConnectionAvailable"]);
	double? currentStockLevel = product.StockLevel;
	bool hideStock = Model.Item.GetBoolean("HideStockState") || (Pageview.AreaSettings.GetBoolean("ErpDownHideStock") && isErpConnectionDown);
}

@{
    <div class="d-flex justify-content-end align-items-center gap-1 card-product-footer-ratings">
        @for(var i = 0; i < product.Rating; ++i)
        {
            <button class="border-0 p-0 bg-transparent">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none"><path fill="#D5352D" d="m8.834 13.434-4.997 2.797 1.116-5.616L.75 6.727l5.685-.674L8.834.854l2.398 5.2 5.685.673-4.203 3.888 1.116 5.616-4.996-2.797Z"/></svg>
            </button>
        }


        <div class="d-flex justify-content-center align-items-center card-product-footer-ratings-count">@product.Rating</div>
    </div>
}