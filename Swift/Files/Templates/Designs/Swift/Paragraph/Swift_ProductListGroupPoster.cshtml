@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Environment
@using Dynamicweb.Frontend

@{
	bool isDetailPage = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ProductID"));

	ProductListViewModel productList = new ProductListViewModel();

	ProductListViewModelSettings productSetting = new ProductListViewModelSettings
	{
		LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
		CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
		CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
		ShopId = Pageview.Area.EcomShopId
	};

	if (Dynamicweb.Context.Current.Items.Contains("ProductList"))
	{
		productList = (ProductListViewModel)Dynamicweb.Context.Current.Items["ProductList"];
	}
	else if (Pageview.Item["DummyProductGroup"] != null)
	{
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel groupList = pageViewModel.Item.GetValue("DummyProductGroup") != null ? pageViewModel.Item.GetValue("DummyProductGroup") as ProductListViewModel : new ProductListViewModel();

		if (groupList?.Group?.Id != null)
		{
			productList = ViewModelFactory.CreateView(productSetting, groupList.Group.Id);
			Dynamicweb.Context.Current.Items.Add("ProductList", productList);
		}
		else
		{
			productList = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.ProductGroups.GetGroups(Dynamicweb.Ecommerce.Common.Context.LanguageID).FirstOrDefault().Id);

			Dynamicweb.Context.Current.Items.Add("ProductList", productList);
		}
	}
	else if (Pageview.Item["DummyProductGroup"] == null)
	{
		productList = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.ProductGroups.GetGroups(Dynamicweb.Ecommerce.Common.Context.LanguageID).FirstOrDefault().Id);
		Dynamicweb.Context.Current.Items.Add("ProductList", productList);
	}

	string layout = Model.Item.GetRawValueString("Layout", "align-middle-center-text-center");
	string alignment = "";

	string searchParameter = Dynamicweb.Context.Current.Request.GetString("q");

	bool hideTitle = Model.Item.GetBoolean("HideGroupTitle");
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-4");

	var navigationSettings = new NavigationSettings();
	navigationSettings.StartLevel = 2;
	navigationSettings.ExpandMode = ExpandMode.Path;
	navigationSettings.Parameters.Add("HideBreadcrumb", true);
	navigationSettings.Parameters.Add("TitleFontSize", titleFontSize);

	string breadcrumbContent = Navigation.RenderNavigation("Navigation/ProductGroupHeader.cshtml", navigationSettings);
	breadcrumbContent = searchParameter != "" ? "<h1 class=\"" + titleFontSize + "\">" + Translate("Search results for") + ": " + searchParameter + "</h1>" : breadcrumbContent;

	bool hideDescription = Model.Item.GetBoolean("HideGroupDescription");
	string groupDescription = productList?.Group?.Description != null ? productList.Group.Description : "";
	string descriptionFontSize = Model.Item.GetRawValueString("DescriptionFontSize", "fs-6");

	string groupImage = productList?.Group?.Assets != null ? productList.Group.Assets.FirstOrDefault(x => x.Name == "LargeImage").Value : "";

	string posterHeight = Model.Item.GetRawValueString("PosterHeight", "");
	posterHeight = posterHeight == "small" ? "min-vh-25" : posterHeight;
	posterHeight = posterHeight == "medium" ? "min-vh-25 min-vh-md-50" : posterHeight;
	posterHeight = posterHeight == "large" ? "min-vh-50 min-vh-md-75" : posterHeight;

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? "p-3 px-xl-3 py-xl-4" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-3 p-xl-4" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-xl-5" : contentPadding;

	string maxWidth = Model.Item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? " mw-75ch" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

@if (!string.IsNullOrEmpty(groupImage) && !isDetailPage) {
	var parms = new Dictionary<string, object>();
	parms.Add("cssClass", "h-100 w-100");
	parms.Add("columns", Model.GridRowColumnCount);

	switch (layout)
	{
		case "align-top-left-text-left":
		alignment = "text-start justify-content-start align-items-start";
			break;
		case "align-top-center-text-center":
		alignment = "text-center justify-content-center align-items-start";
			break;
		case "align-top-right-text-right":
		alignment = "text-end justify-content-end align-items-start";
			break;
		case "align-middle-left-text-left":
		alignment = "text-start justify-content-start align-items-center";
			break;
		case "align-middle-center-text-center":
		alignment = "text-center justify-content-center align-items-center";
			break;
		case "align-middle-right-text-right":
		alignment = "text-end justify-content-end align-items-center";
			break;
		case "align-bottom-left-text-left":
		alignment = "text-start justify-content-start align-items-end";
			break;
		case "align-bottom-center-text-center":
		alignment = "text-center justify-content-center align-items-end";
			break;
		case "align-bottom-right-text-right":
		alignment = "text-end justify-content-end align-items-end";
			break;
	}

	<div class="position-relative h-100@(theme) @(posterHeight) item_@Model.Item.SystemName.ToLower()">
		@if (!string.IsNullOrEmpty(groupImage)) {
			string imageFilter = Model.Item.GetRawValueString("ImageFilter", "");
			imageFilter = imageFilter == "no-filter" ? "" : imageFilter;
			imageFilter = imageFilter == "filter" ? " image-filter" : imageFilter;

			<div class="position-absolute top-0 bottom-0 end-0 start-0@(imageFilter)">
				@RenderPartial("Components/Image.cshtml", new FileViewModel { Path = groupImage }, parms)
			</div>
		}

		<div class="container-xl h-100 @(contentPadding)">
			<div class="h-100 w-100 position-relative d-flex @(alignment)">
				<div class="@(maxWidth)"> 
					@if (!hideTitle) {
						@breadcrumbContent
					}

					@if (!hideDescription && !string.IsNullOrEmpty(groupDescription)) {
						<div class="@descriptionFontSize">
							@groupDescription
						</div>
					}
				</div>
			</div>
		</div>
	</div>
} else if (Pageview.IsVisualEditorMode) {
	<div class="alert alert-dark m-0" role="alert">
		<span>@Translate("Product group poster: The poster paragraph will be hiden here, if any")</span>
	</div>
}
