@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.CustomerExperienceCenter.Favorites
@using System.Linq
@using Dynamicweb.Core

@functions
{
	bool isLazyLoadingForProductInfoEnabled = Dynamicweb.Ecommerce.DynamicwebLiveIntegration.TemplatesHelper.IsLazyLoadingForProductInfoEnabled;
	string liveInfoClass = "";
	string productInfoFeed = "";

	string showPricesWithVat = "";
	bool neverShowVat = false;

	bool isDetailPage = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ProductID"));

	ProductListViewModel productList = new ProductListViewModel();
}
@{ 
	if (Dynamicweb.Context.Current.Items.Contains("ProductList"))
	{
		productList = (ProductListViewModel)Dynamicweb.Context.Current.Items["ProductList"];
	}
	
	showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
	neverShowVat = string.IsNullOrEmpty(showPricesWithVat);

	if (isLazyLoadingForProductInfoEnabled)
	{
		if (Dynamicweb.Context.Current.Items.Contains("ProductInfoFeed"))
		{
			productInfoFeed = Dynamicweb.Context.Current.Items["ProductInfoFeed"]?.ToString();
			if (!string.IsNullOrEmpty(productInfoFeed))
			{
				productInfoFeed = $"data-product-info-feed=\"{productInfoFeed}\"";
			}
		}
		liveInfoClass = "js-live-info";
	}
	
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string themePadding = theme != string.Empty ? "p-3" : string.Empty;
}

@if (!isDetailPage) { 
	if (!string.IsNullOrEmpty(theme))
	{
		<div class="h-100@(theme) @themePadding item_@Model.Item.SystemName.ToLower()" @productInfoFeed>
			@RenderProductList()
		</div>
	}
	else
	{
		<div class="pt-3 item_@Model.Item.SystemName.ToLower()" @productInfoFeed>
			@RenderProductList()
		</div>
	}
}

@helper RenderProductList ()
{ 
	string anonymousUsersLimitations = Pageview.AreaSettings.GetRawValueString("AnonymousUsers", "");
	bool anonymousUser = Pageview.User == null;
	bool hidePrice = anonymousUsersLimitations.Contains("price") && anonymousUser || Pageview.AreaSettings.GetBoolean("ErpDownHidePrices") && !Dynamicweb.Ecommerce.DynamicwebLiveIntegration.TemplatesHelper.IsWebServiceConnectionAvailable();

	string productTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ProductTheme")) ? " theme " + Model.Item.GetRawValueString("ProductTheme").Replace(" ", "").Trim().ToLower() : "";
	string productThemePadding = productTheme != string.Empty ? "p-3" : string.Empty;

	string url = Dynamicweb.Context.Current.Request.RawUrl;
	bool hideFavoritesSelector = !string.IsNullOrEmpty(Model.Item.GetString("HideFavoritesSelector")) ? Model.Item.GetBoolean("HideFavoritesSelector") : false;
	string staticVariantsLayout = Model.Item.GetRawValueString("StaticVariantsLayout", "hide");

	string groupId = productList?.Group?.Id != null ? productList.Group.Id : "";

	var badgeParms = new Dictionary<string, object>();
	badgeParms.Add("saleBadgeType", Model.Item.GetRawValue("SaleBadgeType"));
	badgeParms.Add("saleBadgeCssClassName", Model.Item.GetRawValue("SaleBadgeDesign"));
	badgeParms.Add("newBadgeCssClassName", Model.Item.GetRawValue("NewBadgeDesign"));
	badgeParms.Add("newPublicationDays", Model.Item.GetInt32("NewPublicationDays"));
	badgeParms.Add("campaignBadgesValues", Model.Item.GetRawValueString("CampaignBadges"));

	bool saleBadgeEnabled = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("SaleBadgeDesign")) && Model.Item.GetRawValueString("SaleBadgeDesign") != "none" ? true : false;
	bool newBadgeEnabled = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("NewBadgeDesign")) && Model.Item.GetRawValueString("NewBadgeDesign") != "none" ? true : false;

	var favoriteParameters = new Dictionary<string, object>();
	if (!anonymousUser && !hideFavoritesSelector)
	{
		int defaultFavoriteListId = 0;

		IEnumerable<FavoriteList> favoreiteLists = Pageview.User.GetFavoriteLists();
		if (favoreiteLists.Count() == 1) {
			foreach (FavoriteList list in favoreiteLists) {
				defaultFavoriteListId = list.ListId;
			}
		}
		
		favoriteParameters.Add("ListId", defaultFavoriteListId);
	}

	if (productList.TotalProductsCount > 0) { 
		int pageSizeSetting = 30;
		int pageSize = productList.PageSize;
		pageSize += pageSizeSetting;

		int loadedProducts = productList.PageSize > productList.TotalProductsCount ? productList.TotalProductsCount : productList.PageSize;

		<div class="grid grid-2 grid-lg-3">
			@foreach (ProductViewModel product in productList.Products)
			{
				string link = "Default.aspx?ID=" + GetPageIdByNavigationTag("Shop");
				link += $"&GroupID={product.PrimaryOrDefaultGroup.Id}";
				link += $"&ProductID={product.Id}";
				link += !string.IsNullOrEmpty(product.VariantId) ? $"&VariantID={product.VariantId}" : "";
				link = Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(link);

				string imagePath = product?.DefaultImage?.Value ?? "";
				imagePath = Dynamicweb.Context.Current.Server.UrlEncode(imagePath);

				string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
				ratio = ratio != "0" ? ratio : "";
				string ratioCssClass = ratio != "" ? " ratio" : "";
				string ratioVariable = ratio != "" ? "--bs-aspect-ratio: " + ratio : "";

				string imagePathXs       = "/Admin/Public/GetImage.ashx?width=" + 480 + "&image=" + imagePath + "&format=webp";
				string imagePathS        = "/Admin/Public/GetImage.ashx?width=" + 640 + "&image=" + imagePath + "&format=webp";
				string imagePathFallBack = "/Admin/Public/GetImage.ashx?width=" + 640 + "&image=" + imagePath + "&format=webp";

				string imageTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ImageTheme")) ? " theme " + Model.Item.GetRawValueString("ImageTheme").Replace(" ", "").Trim().ToLower() : "";
				string imageThemePadding = imageTheme != string.Empty ? "p-3" : string.Empty;
				string imageOutlineStyle = imageTheme == string.Empty ? "style=\"border: 1px solid transparent\"" : string.Empty;

				string imageId = "ProductImage_" + product.Id + product.VariantId;
				string priceId = "ProductPrice_" + product.Id + product.VariantId;

				@* Alternative image *@
				var supportedImageFormats = new string[] { ".jpg", ".webp", ".png", ".gif" };
				string defaultImage = product.DefaultImage != null ? product.DefaultImage.Value : "";
				var selectedAssetCategories = Model.Item.GetRawValueString("AlternativeImageAssets");
				IEnumerable<MediaViewModel> alternativeImagesList = product.AssetCategories.Where(x => selectedAssetCategories.Contains(x.SystemName)).SelectMany(x => x.Assets);

				if (alternativeImagesList.FirstOrDefault() != null) { 
					alternativeImagesList = alternativeImagesList.OrderByDescending(x => x.Value.Equals(defaultImage));

					if (alternativeImagesList.First().Value == defaultImage) { 
						alternativeImagesList = alternativeImagesList.Skip(1);
					}
				}

				string alternativeImage = alternativeImagesList.FirstOrDefault() != null ? alternativeImagesList.FirstOrDefault().Value : "";
				alternativeImage = !string.IsNullOrEmpty(alternativeImage) ? "/Admin/Public/GetImage.ashx?width=" + 640 + "&image=" + alternativeImage + "&format=webp" : "";
				
				@* Badges *@
				DateTime createdDate = product.Created.Value;
				bool showBadges = saleBadgeEnabled && product.Discount.Price != 0 ? true : false;
				showBadges = (newBadgeEnabled && Model.Item.GetInt32("NewPublicationDays") == 0) || (newBadgeEnabled && (createdDate.AddDays(Model.Item.GetInt32("NewPublicationDays")) > DateTime.Now)) ? true : showBadges;
				showBadges = !string.IsNullOrEmpty(Model.Item.GetRawValueString("CampaignBadges")) ? true : showBadges;

				@* Main features *@
				IEnumerable<string> selectedDisplayGroups = Model.Item.GetRawValueString("MainFeatures").Split(',').ToList();
				List<CategoryFieldViewModel> mainFeatures = new List<CategoryFieldViewModel>();

				foreach (var selection in selectedDisplayGroups)
				{
					foreach (CategoryFieldViewModel group in product.FieldDisplayGroups.Values)
					{
						if (selection == group.Id) {
							mainFeatures.Add(group);
						}
					}
				}


				<article class="position-relative@(productTheme) product-list-item product js-product @liveInfoClass" data-product-id="@product.Id" itemscope itemtype="https://schema.org/Product">
					@if (!anonymousUser && !hideFavoritesSelector && product.VariantInfo.VariantInfo == null) {
						<div class="position-absolute top-0 end-0 my-3" style="z-index: 2">
							@RenderPartial("Components/ToggleFavorite.cshtml", product, favoriteParameters)
						</div>
					}

					@if (showBadges) { 
						<div class="position-absolute top-0 left-0 p-1 p-lg-2 ps-0 ps-lg-0" style="z-index: 2">
							@RenderPartial("Components/EcommerceBadge.cshtml", product, badgeParms)
						</div>
					}

					<div class="d-flex flex-column d-block h-100">
						<a href="@link" class="text-decoration-none">
							<div class="overflow-hidden@(imageTheme)" @imageOutlineStyle>
								<div class="ratio" style="@(ratioVariable)">
									<div class="d-flex justify-content-center align-items-center">
										@if (string.IsNullOrEmpty(alternativeImage)) { 
											<img 
												id="@imageId"
												srcset="
													@imagePathXs 480w,
													@imagePathS  640w"
												sizes="(min-width: 992px) 33vw, 50vw"
												src="@imagePathFallBack"
												loading="lazy"
												decoding="async"
												class="mw-100 mh-100 @imageThemePadding"
												alt="@product.Name">
										} else { 
											<img 
												id="@imageId"
												src="@imagePathFallBack"
												loading="lazy"
												decoding="async"
												class="mw-100 mh-100 @imageThemePadding"
												alt="@product.Name"
												onmouseover="this.src='@alternativeImage'" 
												onmouseout="this.src='@imagePathFallBack'">
										}
									</div>
								</div>


								<div class="position-relative">
									@if (product.VariantInfo.VariantInfo != null && staticVariantsLayout == "images") {
										int variantGroupCount = 0; 
										int showMaxVariantGroups = 2;
										int showMaxVariants = 3;
										var productVariantTheme = productTheme != "" ? productTheme : "bg-white";

										<div 
											class="static-variants w-100 d-none d-lg-block position-absolute left-0 bottom-0 @productTheme" 
											id="StaticVariants_@product.Id" 
											style="pointer-events: none;">

											@foreach (var variantGroup in product.VariantGroups())
											{
												int variantsCount = 0;

												<div class="d-flex gap-2 mb-2">
													@foreach (var variant in variantGroup.Options)
													{
														if (variantGroupCount < showMaxVariantGroups)
														{
															var optionsCount = variantGroup.Options.Count();

															if (variantsCount < showMaxVariants)
															{
																string optionWidth = !string.IsNullOrEmpty(variant.Color) ? "w-25" : "";

																<article class="static-variants-option @optionWidth @(productVariantTheme)" title="@product.Name @variant.Name" style="pointer-events: initial;">
																	@if (!string.IsNullOrEmpty(variant.Color))
																	{
																		string defaultProductImage = Dynamicweb.Context.Current.Server.UrlEncode(product.DefaultImage.Value);
																		string variantImage = Dynamicweb.Context.Current.Server.UrlEncode(variant.Image.Value);
																		string defaultPrice = !hidePrice ? product.Price.PriceFormatted : "0";
																		string variantPrice = !hidePrice ? product.Price.PriceFormatted : "0";
																	
																		if (isLazyLoadingForProductInfoEnabled)
																		{
																			<figure class="w-100 d-block m-0" data-price-formatted="" onmouseover="swift.StaticVariants.SwitchProduct(event, '@product.Id', this.getAttribute('data-price-formatted'), '@variantImage')" onmouseout="swift.StaticVariants.SwitchProduct(event, '@product.Id', this.getAttribute('data-price-formatted'), '@defaultProductImage')">
																				<div class="d-flex align-items-center justify-content-center">
																					<img src="/admin/public/GetImage.ashx?image=@variantImage&width=75&height=75&crop=5&FillCanvas=true&format=webp&Quality=70" height="75" width="75" class="p-1 text-small" loading="lazy" decoding="async" alt="@product.Name, @variant.Name">
																				</div>
																			</figure>
																		}
																		else
																		{
																			<figure class="w-100 d-block m-0" onmouseover="swift.StaticVariants.SwitchProduct(event, '@product.Id', '@defaultPrice', '@variantImage')" onmouseout="swift.StaticVariants.SwitchProduct(event, '@product.Id', '@variantPrice', '@defaultProductImage')">
																				<div class="d-flex align-items-center justify-content-center">
																					<img src="/admin/public/GetImage.ashx?image=@variantImage&width=75&height=75&crop=5&FillCanvas=true&format=webp&Quality=70" height="75" width="75" class="p-1 text-small" loading="lazy" decoding="async" alt="@product.Name, @variant.Name">
																				</div>
																			</figure>
																		}
																	}
																	else
																	{
																		<div class="d-flex align-items-center justify-content-center">
																			@variant.Name
																		</div>
																	}
																	<div class="visually-hidden">
																		<h4>@Translate("Variant Name")</h4>
																		<p>@product.Name, @variant.Name</p>
																		@if (!hidePrice) { 
																			<h4>@Translate("Variant Price")</h4>
																		if (isLazyLoadingForProductInfoEnabled)
																		{
																			<p><span class="text-price js-text-price"></span></p>
																		}
																		else
																		{
																			<p><span class="text-price">@product.Price.PriceFormatted</span></p>
																		}
																	}
																	</div>
																</article>
															}

															variantsCount++;

															if (variantsCount == showMaxVariants && optionsCount != showMaxVariants)
															{
																int left = optionsCount - showMaxVariants;
																<div class="variant-option ms-1 d-flex justify-content-center align-items-center">
																	<span>+@left</span>
																</div>
															}													
														}
													}

												</div>

												variantGroupCount++;
											}
										</div>
									}
								</div>
							</div>
							<div class="@productThemePadding">
								<div class="flex-grow-1">
									<h3 class="h6 mb-0 text-break">@product.Name @if (!string.IsNullOrEmpty(product.VariantName)) { <text>(@product.VariantName)</text> }</h3>
									@if (!Model.Item.GetBoolean("HideProductNumber")) { 
										<p class="fs-7 opacity-85 mb-2">@product.Number</p>
									}
									@if (mainFeatures.Count > 0)
									{
										<ul class="p-0 lh-sm opacity-75" style="list-style-position: inside">
											@foreach (CategoryFieldViewModel mainFeatureGroup in mainFeatures)
											{
												foreach (var field in mainFeatureGroup.Fields)
												{
													@RenderField(field.Value)
												}
											}
										</ul>
									}
								</div>
								
								@if (!hidePrice) { 
									string priceMin = "";
									string priceMax = "";

									<div>
										<div>
											<span itemprop="priceCurrency" content="@product.Price.CurrencyCode" class="d-none"></span>
				
											@if (showPricesWithVat == "false" && !neverShowVat) {
											if (isLazyLoadingForProductInfoEnabled)
											{
												<span itemprop="price" content="" class="d-none"></span>
												<span class="text-decoration-line-through js-text-decoration-line-through opacity-75 me-3 text-price js-text-price d-none" data-show-if="LiveProductInfo.product.Price.Price != LiveProductInfo.product.PriceBeforeDiscount.Price"></span>
											}
											else
											{
												string beforePrice = product.PriceBeforeDiscount.PriceWithoutVatFormatted;
												<span itemprop="price" content="@product.Price.PriceWithoutVat" class="d-none"></span>
												if (product.Price.Price != product.PriceBeforeDiscount.Price) {
													<span class="text-decoration-line-through opacity-75 me-3 text-price">@beforePrice</span>
												}
											}

											} else {

											if (isLazyLoadingForProductInfoEnabled)
											{
												<span itemprop="price" content="" class="d-none"></span>
												<span class="text-decoration-line-through js-text-decoration-line-through opacity-75 me-3 text-price js-text-price d-none" data-show-if="LiveProductInfo.product.Price.Price != LiveProductInfo.product.PriceBeforeDiscount.Price"></span>
											}
											else
											{
												string beforePrice = product.PriceBeforeDiscount.PriceFormatted;

												<span itemprop="price" content="@product.Price.Price" class="d-none"></span>
												if (product.Price.Price != product.PriceBeforeDiscount.Price) {
													<span class="text-decoration-line-through opacity-75 me-3 text-price">@beforePrice</span>
												}
											}
											}
			
											@if (showPricesWithVat == "false" && !neverShowVat) {
											if (isLazyLoadingForProductInfoEnabled)
											{
												<span class="text-price js-text-price"><div class="spinner-border" role="status"></div></span>
											}
											else
											{
												string price = product.Price.PriceWithoutVatFormatted;
												if (product?.VariantInfo?.VariantInfo != null) {
													priceMin = product?.VariantInfo?.PriceMin?.PriceWithoutVatFormatted != null ? product.VariantInfo.PriceMin.PriceWithoutVatFormatted : "";
													priceMax = product?.VariantInfo?.PriceMax?.PriceWithoutVatFormatted != null ? product.VariantInfo.PriceMax.PriceWithoutVatFormatted : "";
												}
												if (priceMin != priceMax) {
													price = priceMin + " - " + priceMax;
												} 
												<span class="text-price">@price</span>
											}
										} else {
											if (isLazyLoadingForProductInfoEnabled)
											{
												<span class="text-price js-text-price"><div class="spinner-border" role="status"></div></span>
											}
											else
											{
												string price = product.Price.PriceFormatted;
												if (product?.VariantInfo?.VariantInfo != null) {
													priceMin = product?.VariantInfo?.PriceMin?.PriceFormatted != null ? product.VariantInfo.PriceMin.PriceFormatted : "";
													priceMax = product?.VariantInfo?.PriceMax?.PriceFormatted != null ? product.VariantInfo.PriceMax.PriceFormatted : "";
												}
												if (priceMin != priceMax) {
													price = priceMin + " - " + priceMax;
												}
												<span class="text-price">@price</span>
											}
										}
										</div>
										@if (showPricesWithVat == "false" && !neverShowVat) {
										if (isLazyLoadingForProductInfoEnabled)
										{
											<div class="fs-7 opacity-85 text-price js-text-price-with-vat d-none" data-suffix="@Translate("Incl. VAT")"></div>
										}
										else
										{
											string price = product.Price.PriceWithVatFormatted;
											if (product?.VariantInfo?.VariantInfo != null) {
												priceMin = product?.VariantInfo?.PriceMin?.PriceWithVatFormatted != null ? product.VariantInfo.PriceMin.PriceWithVatFormatted : "";
												priceMax = product?.VariantInfo?.PriceMax?.PriceWithVatFormatted != null ? product.VariantInfo.PriceMax.PriceWithVatFormatted : "";
											}
											if (priceMin != priceMax) {
												price = priceMin + " - " + priceMax;
											}
											<div class="fs-7 opacity-85 text-price">@price @Translate("Incl. VAT")</div>
										}
									}
									</div>
								}

								@if (product.VariantInfo.VariantInfo != null && staticVariantsLayout == "swatches") {
									var optionCount = product.VariantInfo.VariantInfo.Count();
									var showMaxVariants = 5;

									<div class="d-flex flex-row gap-1 align-items-center">
										@foreach (VariantInfoViewModel variant in product.VariantInfo.VariantInfo.Take(showMaxVariants))
										{
											<span class="colorbox colorbox-sm rounded-circle border me-1" style="background-color: @variant.OptionColor"></span>
										}
										@if (optionCount > showMaxVariants)
										{
											int left = optionCount - showMaxVariants;
											<span class="ms-2">+@left</span>
										}
									</div>
								}
							</div>
						</a>
					</div>
				</article>
			}
		</div>

		<div class="my-3" id="LoadMoreButton">
			<div class="text-center d-flex flex-column gap-3">
				<div class="opacity-85">@loadedProducts @Translate("out of") @productList.TotalProductsCount @Translate("products")</div>
				@if (productList.PageCount != 1) {
					string sortBySelection = Dynamicweb.Context.Current.Request?.Form["SortBy"] ?? "Relevance";
					sortBySelection = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("SortBy")) ? Dynamicweb.Context.Current.Request.QueryString.Get("SortBy") : sortBySelection;

					string searchQuery = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("q")) ? Dynamicweb.Context.Current.Request.QueryString.Get("q") : "";
					string searchLayout = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("SearchLayout")) ? Dynamicweb.Context.Current.Request.QueryString.Get("SearchLayout") : "";

					<form method="get" action="@url" data-response-target-element="content" class="w-100">
						@foreach (FacetGroupViewModel facetGroup in productList.FacetGroups)
						{
							foreach (FacetViewModel facetItem in facetGroup.Facets)
							{
								foreach (FacetOptionViewModel facetOption in facetItem.Options)
								{
									if (facetOption.Selected)
									{
										<input type="hidden" name="@facetItem.QueryParameter" value="[@facetOption.Value]" />
									}
								}
							}
						}

						@if (productList?.Group?.Id != null) {
							<input type="hidden" name="GroupId" value="@productList.Group.Id" />
						}

						<input type="hidden" name="PageSize" value="@pageSize" />
						<input type="hidden" name="SortBy" value="@sortBySelection" />
						<input type="hidden" name="RequestType" value="UpdateList" />

						@if (!string.IsNullOrEmpty(searchQuery)) { 
							<input type="hidden" name="q" value="@searchQuery" />
							<input type="hidden" name="SearchLayout" value="@searchLayout" />
						}

						@{ 
							string nextPageLink = "/Default.aspx?ID=" + Pageview.Page.ID + "&PageSize=" + pageSize + "&SortBy=" + sortBySelection;

							foreach (FacetGroupViewModel facetGroup in productList.FacetGroups)
							{
								foreach (FacetViewModel facetItem in facetGroup.Facets)
								{
									foreach (FacetOptionViewModel facetOption in facetItem.Options)
									{
										if (facetOption.Selected)
										{
											nextPageLink += "&" + facetItem.QueryParameter + "=[" + facetOption.Value + "]";
										}
									}
								}
							}

							nextPageLink += productList?.Group?.Id != null ? "&GroupID=" + productList.Group.Id : "";
							nextPageLink += !string.IsNullOrEmpty(searchQuery) ? "&q=" + searchQuery : "";
						}

						<a href="@nextPageLink" class="btn btn-primary" type="button" onclick="swift.ProductList.Update(event)" id="LoadMoreButton_@Model.ID">@Translate("Load more products")</a>
					</form>
				}
			</div>
		</div>
	} else {
		if (!Pageview.IsVisualEditorMode) {
			<div class="alert alert-dark m-0">
				@Translate("We did not find anything matching your search result")
			</div>
		} else {
			<div class="alert alert-dark m-0" role="alert">
				<span>@Translate("Product list: The list will be shown here, if any")</span>
			</div>
		}
	}
}

@helper RenderField(FieldValueViewModel field) { 
	string fieldValue = field?.Value != null ? field.Value.ToString() : "";

	if (fieldValue != "") {
		fieldValue = fieldValue == "False" ? Translate("No") : fieldValue;
		fieldValue = fieldValue == "True" ? Translate("Yes") : fieldValue;

		if (field.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>)) {
			fieldValue = "";

			foreach (FieldOptionValueViewModel option in field.Value as System.Collections.Generic.List<FieldOptionValueViewModel>) {
				fieldValue = option.Name;
			}
		}

		bool isColor = false;
		if (fieldValue.Contains("#") && (Translate(field.Name) == Translate("Color") || Translate(field.Name) == Translate("Colour"))) {
			isColor = true;   
		}

		if (!string.IsNullOrEmpty(fieldValue)) {
			if (!isColor) {
				<li>@(field.Name): @fieldValue</li>
			} else {
				<li class="position-relative">
					<span class="colorbox-sm" style="background-color: @fieldValue"></span>
				</li>
			}
		} 
	}
}
