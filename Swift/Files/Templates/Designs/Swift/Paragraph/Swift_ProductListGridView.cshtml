@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog


@{ 
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

@if (!string.IsNullOrEmpty(theme)) {
	<div class="@theme">
		@RenderProductList()
	</div>
} else {
	@RenderProductList()
}

@helper RenderProductList () { 
	bool isVisualEditor = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;

	ProductListViewModel productList = new ProductListViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductList"))
	{
		productList = (ProductListViewModel)Dynamicweb.Context.Current.Items["ProductList"];
	}

	string detailsPageLink = Dynamicweb.Context.Current.Items["DetailsPageLink"] != null ? Dynamicweb.Context.Current.Items["DetailsPageLink"].ToString() : "";
	string productTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ProductTheme")) ? " theme p-3 " + Model.Item.GetRawValueString("ProductTheme").Replace(" ", "").Trim().ToLower() : "";
	string textPadding = productTheme != "" ? "px-2 px-lg-3 pb-2 pb-lg-3" : "";

	string url = Dynamicweb.Context.Current.Request.RawUrl;
	string staticVariantsLayout = Model.Item.GetRawValueString("StaticVariantsLayout", "hide");

	string groupId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("GroupID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("GroupID") : "";

	if (productList.TotalProductsCount > 0) { 
		int pageSizeSetting = 30;
		int pageSize = productList.PageSize;
		pageSize += pageSizeSetting;

		int loadedProducts = productList.PageSize > productList.TotalProductsCount ? productList.TotalProductsCount : productList.PageSize;

		<div class="grid grid-2 grid-lg-3 pt-3">
			@foreach (ProductViewModel product in productList.Products)
			{
				string link = $"{detailsPageLink}&groupid={product.PrimaryOrDefaultGroup.Id}&productid={product.Id}";
				link += !string.IsNullOrEmpty(product.VariantId) ? "&variantid=" + product.VariantId : "";
				string price = product?.Price?.PriceFormatted ?? "";
				string imagePath = product?.DefaultImage?.Value ?? "";
				imagePath = Dynamicweb.Context.Current.Server.UrlEncode(imagePath);

				string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
				ratio = ratio != "0" ? ratio : "";
				string ratioCssClass = ratio != "" ? " ratio" : "";
				string ratioVariable = ratio != "" ? "--bs-aspect-ratio: " + ratio : "";

				string imagePathXs       = "/Admin/Public/GetImage.ashx?width=" + 480 + "&image=" + imagePath + "&format=webp";
				string imagePathS        = "/Admin/Public/GetImage.ashx?width=" + 640 + "&image=" + imagePath + "&format=webp";
				string imagePathFallBack = "/Admin/Public/GetImage.ashx?width=" + 640 + "&image=" + imagePath + "&format=webp";

				string imageTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ImageTheme")) ? " theme " + Model.Item.GetRawValueString("ImageTheme").Replace(" ", "").Trim().ToLower() : "";
				string imagePadding = imageTheme != "" || productTheme != "" ? "p-2 p-lg-3" : "";

				string imageId = "ProductImage_" + product.Id + product.VariantId;
				string priceId = "ProductPrice_" + product.Id + product.VariantId;

				IEnumerable<string> selectedDisplayGroups = Model.Item.GetList("MainFeatures").SelectedValues;
				List<CategoryFieldViewModel> mainFeatures = new List<CategoryFieldViewModel>();

				foreach (var selection in selectedDisplayGroups)
				{
					foreach (CategoryFieldViewModel group in product.FieldDisplayGroups.Values)
					{
						if (selection == group.Id) {
							mainFeatures.Add(group);
						}
					}
				}

				<article class="product-list-item">

					<a href="@link" class="d-flex flex-column d-block h-100 text-decoration-none @(productTheme)">

						<div class="product-list-item__image overflow-hidden @(imageTheme)">
							<div class="ratio" style="@(ratioVariable)">
								<div class="d-flex justify-content-center align-items-center">
									<img 
										id="@imageId"
										srcset="
											@imagePathXs 480w,
											@imagePathS  640w"
										sizes="(min-width: 992px) 33vw, 50vw"
										src="@imagePathFallBack"
										loading="lazy"
										decoding="async"
										class="mw-100 mh-100 @imagePadding"
										alt="@product.Name">
								</div>
							</div>


							<div class="product-list-item__variants position-relative">
								@if (product.VariantInfo.VariantInfo != null && staticVariantsLayout == "images") {
									int variantGroupCount = 0; 
									int showMaxVariantGroups = 2;
									int showMaxVariants = 3;
									var productVariantTheme = productTheme != "" ? productTheme : "bg-white";

									<div 
										class="static-variants w-100 d-none d-lg-block position-absolute left-0 bottom-0" 
										id="StaticVariants_@product.Id" 
										style="pointer-events: none;">

										@foreach (var variantGroup in product.VariantGroups())
										{
											int variantsCount = 0;

											<div class="d-flex gap-2 mb-2">
												@foreach (var variant in variantGroup.Options)
												{
													if (variantGroupCount < showMaxVariantGroups)
													{
														var optionsCount = variantGroup.Options.Count();

														if (variantsCount < showMaxVariants)
														{
															string optionWidth = !string.IsNullOrEmpty(variant.Color) ? "w-25" : "";

															<article class="static-variants-option @optionWidth @(productVariantTheme)" title="@product.Name @variant.Name" style="transition-delay: calc(var(--animation-speed-in) * @variantsCount); pointer-events: initial;">
																@if (!string.IsNullOrEmpty(variant.Color))
																{
																	string defaultImage = Dynamicweb.Context.Current.Server.UrlEncode(product.DefaultImage.Value);
																	string variantImage = Dynamicweb.Context.Current.Server.UrlEncode(variant.Image.Value);

																	<figure class="figure w-100 d-block m-0" onmouseover="switchVariantProduct('@product.Id', '@product.Price.PriceFormatted', '@variantImage')" onmouseout="switchVariantProduct('@product.Id', '@product.Price.PriceFormatted', '@defaultImage')">
																		<div class="d-flex align-items-center justify-content-center">
																			<img src="/admin/public/GetImage.ashx?image=@variantImage&width=75&height=75&crop=5&FillCanvas=true&format=webp&Quality=70" height="75" width="75" class="p-1 text-small" loading="lazy" decoding="async" alt="@product.Name, @variant.Name">
																		</div>
																	</figure>
																}
																else
																{
																	<div class="d-flex align-items-center justify-content-center">
																		@variant.Name
																	</div>
																}
																<div class="visually-hidden">
																	<h4>@Translate("Variant Name")</h4>
																	<p>@product.Name, @variant.Name</p>
																	<h4>@Translate("Variant Price")</h4>
																	<p><span class="text-price">@product.Price.PriceFormatted</span></p>
																</div>
															</article>
														}

														variantsCount++;

														if (variantsCount == showMaxVariants && optionsCount != showMaxVariants)
														{
															int left = optionsCount - showMaxVariants;
															<div class="variant-option ms-1 d-flex justify-content-center align-items-center" style="transition-delay: calc(var(--animation-speed-in) * @variantsCount)">
																<span>+@left</span>
															</div>
														}													
													}
												}

											</div>

											variantGroupCount++;
										}
									</div>
								}
							</div>
						</div>

						<div class="product-list-item__name flex-grow-1">
							<h3 class="h6 mb-0">@product.Manufacturer.Name <i>@product.ProductCategories["specification_bike"].Fields["Model_Name"].Value</i> @product.ProductCategories["specification_bike"].Fields["Model_Year"].Value @product.VariantId</h3>
						</div>
						@if (!Model.Item.GetBoolean("HidePrice")) { 
							<div class="product-list-item__price">
								<span class="fw-bold" id="@priceId">
									<span class="text-price">@price</span>
								</span>
							</div>
						}
					</a>
				</article>

			}
		</div>

		<div class="my-3">
			<div class="text-center">
				<div class="opacity-85 mb-3">@loadedProducts @Translate("out of") @productList.TotalProductsCount @Translate("products")</div>
				@if (productList.PageCount != 1) {
					string sortBySelection = Dynamicweb.Context.Current.Request?.Form["SortBy"] ?? "NameForSort";
					sortBySelection = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("SortBy")) ? Dynamicweb.Context.Current.Request.QueryString.Get("SortBy") : sortBySelection;

					<form method="get" action="@url" data-response-target-element="content" class="w-100">
						@foreach (FacetGroupViewModel facetGroup in productList.FacetGroups)
						{
							foreach (FacetViewModel facetItem in facetGroup.Facets)
							{
								foreach (FacetOptionViewModel facetOption in facetItem.Options)
								{
									if (facetOption.Selected)
									{
										<input type="hidden" name="@facetItem.QueryParameter" value="[@facetOption.Value]" />
									}
								}
							}
						}

						@if (productList?.Group?.Id != null) {
							<input type="hidden" name="GroupId" value="@productList.Group.Id" />
						}

						<input type="hidden" name="PageSize" value="@pageSize" />
						<input type="hidden" name="SortBy" value="@sortBySelection" />
						<input type="hidden" name="RequestType" value="UpdateList" />

						<button class="btn btn-primary mb-3" type="button" onclick="swift.ProductList.Update(event)">@Translate("Load more products")</button>
					</form>
				}
			</div>
		</div>

		<script>
			function switchVariantProduct(id, price, imagesrc) {
				var productImageElement = document.querySelector("#ProductImage_" + id);
				var productPriceElement = document.querySelector("#ProductPrice_" + id + " .text-price");

				if (productPriceElement) {
					productPriceElement.innerText = price;
				}

				if (productImageElement) {
					productImageElement.src = imagesrc;

					var imageSrcset = productImageElement.srcset;
					imageSrcset = imageSrcset.replace(/image=.*?&/g, 'image=' + imagesrc + "&");

					productImageElement.srcset = imageSrcset;
				}
			}
		</script>
	} else {
		if (!isVisualEditor) {
			<div class="alert alert-dark m-0">
				@Translate("We did not find anything matching your search result")
			</div>
		} else {
			<div class="alert alert-dark m-0" role="alert">
				<span>@Translate("Product list: The list will be shown here, if any")</span>
			</div>
		}
	}
}

@helper RenderField(FieldValueViewModel field) { 
	string fieldValue = field?.Value != null ? field.Value.ToString() : "";

	if (fieldValue != "") {
		fieldValue = fieldValue == "False" ? Translate("No") : fieldValue;
		fieldValue = fieldValue == "True" ? Translate("Yes") : fieldValue;

		if (field.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>)) {
			fieldValue = "";

			foreach (FieldOptionValueViewModel option in field.Value as System.Collections.Generic.List<FieldOptionValueViewModel>) {
				fieldValue = option.Value;
			}
		}

		bool isColor = false;
		if (fieldValue.Contains("#") && (Translate(field.Name) == Translate("Color") || Translate(field.Name) == Translate("Colour"))) {
			isColor = true;   
		}

		if (!string.IsNullOrEmpty(fieldValue)) {
			<dt class="g-col-4 py-2 fw-bold">@field.Name</dt>

			<dd class="g-col-8 py-2 mb-0">
			@if (!isColor) {
				@fieldValue
			} else {
				<div class="position-relative">
					<span class="colorbox-sm" style="background-color: @fieldValue"></span>
				</div>
			}
			</dd>
		} 
	}
}
