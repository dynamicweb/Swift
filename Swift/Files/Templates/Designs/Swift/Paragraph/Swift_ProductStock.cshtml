@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	ProductViewModel product = new ProductViewModel();

	ProductViewModelSettings productSetting = new ProductViewModelSettings
	{
		LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
		CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
		CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
		ShopId = Pageview.Area.EcomShopId
	};

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	} else if (Pageview.Item["DummyProduct"] != null) {

		string dummyProductId = "";
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel productList = pageViewModel.Item.GetValue("DummyProduct") != null ? pageViewModel.Item.GetValue("DummyProduct") as ProductListViewModel : new ProductListViewModel();
		if (productList.Products != null)
		{
			foreach (var p in productList.Products) { dummyProductId = p.Id; }
			ProductViewModel dummyProduct = dummyProductId != "" ? ViewModelFactory.CreateView(productSetting, dummyProductId) : new ProductViewModel();
			product = dummyProduct;
		} else {
			product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetAllProducts(Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
		}
	} else if (Pageview.Item["DummyProduct"] == null) {
		product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetAllProducts(Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
	}

	bool IsNeverOutOfStock = product.NeverOutOfstock;

	string horizontalAlign = Model.Item.GetRawValueString("HorizontalAlignment", "");
	horizontalAlign = horizontalAlign == "center" ? "text-center" : horizontalAlign;
	horizontalAlign = horizontalAlign == "end" ? "text-end" : horizontalAlign;
	bool hasExpectedDelivery = product.ExpectedDelivery != null && product.ExpectedDelivery > DateTime.Now;
	string expectedDeliveryDate = product.ExpectedDelivery?.ToShortDateString() ?? "";
	
	bool isErpConnectionDown = !Dynamicweb.Ecommerce.DynamicwebLiveIntegration.TemplatesHelper.IsWebServiceConnectionAvailable();
	bool hideStock = Model.Item.GetBoolean("HideStockState") || (Pageview.AreaSettings.GetBoolean("ErpDownHideStock") && isErpConnectionDown);
	
	string liveInfoClass = "";
	string productInfoFeed = "";
	bool isLazyLoadingForProductInfoEnabled = Dynamicweb.Ecommerce.DynamicwebLiveIntegration.TemplatesHelper.IsLazyLoadingForProductInfoEnabled;
	if (isLazyLoadingForProductInfoEnabled)
	{
		if (Dynamicweb.Context.Current.Items.Contains("ProductInfoFeed"))
		{
			productInfoFeed = Dynamicweb.Context.Current.Items["ProductInfoFeed"]?.ToString();
			if (!string.IsNullOrEmpty(productInfoFeed))
			{
				productInfoFeed = $"data-product-info-feed=\"{productInfoFeed}\"";
			}
		}
		liveInfoClass = "js-live-info";
	}
}

@if (!hideStock)
{
	if (!IsNeverOutOfStock && product.Id != null) {
		if (isLazyLoadingForProductInfoEnabled)
		{
			string hideStockState = string.IsNullOrEmpty(product.VariantId) && product.VariantInfo.VariantInfo != null ? "d-none" : "";
			<div class="js-stock-state @horizontalAlign item_@Model.Item.SystemName.ToLower() @liveInfoClass" data-product-id="@product.Id" @productInfoFeed>
				<div class="mt-3 js-stock-state spinner-border @hideStockState">
					@if (!Model.Item.GetBoolean("HideInventory"))
					{
						<div class="small text-success d-none" data-show-if="LiveProductInfo.product.StockLevel > 0">
							<span class="js-text-stock"></span>
							@Translate("In stock")
						</div>
					}
					else
					{
						<div class="small text-success d-none" data-show-if="LiveProductInfo.product.StockLevel > 0">@Translate("In stock")</div>
					}
					<div class="small text-danger d-none" data-show-if="LiveProductInfo.product.StockLevel <= 0">@Translate("Out of Stock")</div>

					<div class="d-none" data-show-if="LiveProductInfo.product.ExpectedDelivery != null && new Date(LiveProductInfo.product.ExpectedDelivery) > new Date()">
						<span>@Translate("Expected back in stock"): </span>
						<span class="js-text-expected-delivery"></span>
					</div>
				</div>
			</div>
		}
		else
		{
			<div class="js-stock-state @horizontalAlign item_@Model.Item.SystemName.ToLower()">

				@if (product.StockLevel > 0)
				{
					if (!Model.Item.GetBoolean("HideInventory"))
					{
						<div class="small text-success">@product.StockLevel @Translate("In stock")</div>
					}
					else
					{
						<div class="small text-success">@Translate("In stock")</div>
					}
				}

				else
				{
					<div class="small text-danger">@Translate("Out of Stock")</div>
				}

				@if (hasExpectedDelivery)
				{
					<div>
						<span>@Translate("Expected in stock"): </span>
						<span>@expectedDeliveryDate</span>
					</div>
				}

			</div>
		}
	} else if (Pageview.IsVisualEditorMode) {
		<div class="alert alert-info">@Translate("No products available")</div>
	}
}
