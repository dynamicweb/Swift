@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Core.Encoders


@{
	ProductViewModel product = null;
	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}
	else if (Pageview.Page.Item["DummyProduct"] != null && Pageview.IsVisualEditorMode)
	{
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel productList = pageViewModel.Item.GetValue("DummyProduct") != null ? pageViewModel.Item.GetValue("DummyProduct") as ProductListViewModel : new ProductListViewModel();

		if (productList?.Products is object)
		{
			product = productList.Products[0];
		}
	}

	string anonymousUsersLimitations = Pageview.AreaSettings.GetRawValueString("AnonymousUsers", "");
	bool anonymousUser = Pageview.User == null;
	bool isErpConnectionDown = !Dynamicweb.Core.Converter.ToBoolean(Dynamicweb.Context.Current.Items["IsWebServiceConnectionAvailable"]);
	bool hideAddToCart = anonymousUsersLimitations.Contains("cart") && anonymousUser || Pageview.AreaSettings.GetBoolean("ErpDownHideAddToCart") && isErpConnectionDown;
	hideAddToCart = Pageview.IsVisualEditorMode ? false : hideAddToCart;
}

@if (product is object && !hideAddToCart) {
	string horizontalAlign = Model.Item.GetRawValueString("HorizontalAlignment", "");
	horizontalAlign = horizontalAlign == "center" ? "justify-content-center" : horizontalAlign;
	horizontalAlign = horizontalAlign == "end" ? "justify-content-end" : horizontalAlign;
	horizontalAlign = horizontalAlign == "full" ? "" : horizontalAlign;

	bool favoritesSelector = !string.IsNullOrEmpty(Model.Item.GetString("ShowAddToFavorites")) ? Model.Item.GetBoolean("ShowAddToFavorites") : false;
	bool quantitySelector = !string.IsNullOrEmpty(Model.Item.GetString("ShowQuantitySelector")) ? Model.Item.GetBoolean("ShowQuantitySelector") : false;
	bool unitsSelector = !string.IsNullOrEmpty(Model.Item.GetString("ShowUnitsSelector")) ? Model.Item.GetBoolean("ShowUnitsSelector") : false;
	bool hideInventory = !string.IsNullOrEmpty(Model.Item.GetString("HideInventory")) ? Model.Item.GetBoolean("HideInventory") : false;
	bool hideStockState = !string.IsNullOrEmpty(Model.Item.GetString("HideStockState")) ? Model.Item.GetBoolean("HideStockState") : false;

	string buttonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
	string inputSize = string.Empty;

	switch (buttonSize)
	{
		case "small":
			inputSize = " input-group-sm";
			buttonSize = " btn-sm";
			break;
		case "regular":
			buttonSize = string.Empty;
			break;
		case "large":
			inputSize = " input-group-lg";
			buttonSize = " btn-lg";
			break;
	}

	string iconPath = "/Files/icons/";
	string url = "/Default.aspx?ID=" + (GetPageIdByNavigationTag("CartService"));
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=Swift_MiniCart.cshtml" : "?LayoutTemplate=Swift_MiniCart.cshtml";
	}

	string whenVariantsExist = Model.Item.GetRawValueString("WhenVariantsExist", "hide");
	string flexFill = Model.Item.GetRawValueString("HorizontalAlignment", "") == "full" ? "flex-fill" : "";
	string fullWidth = Model.Item.GetRawValueString("HorizontalAlignment", "") == "full" ? "w-100" : "";
	string addToCartIcon = Model.Item.GetRawValueString("Icon", iconPath + "shopping-cart.svg");
	string addToCartLabel = !addToCartIcon.Contains("_none") ? $"<span class=\"icon-2\">{ReadFile(addToCartIcon)}</span>" : "";
	addToCartLabel += !addToCartIcon.Contains("_none") && !Model.Item.GetBoolean("HideButtonText") ? " " : "";
	addToCartLabel += !Model.Item.GetBoolean("HideButtonText") ? $"<span class=\"d-none d-md-inline\">{Translate("Add to cart")}</span><span class=\"d-inline d-md-none\">{Translate("Add")}</span>" : "";
	bool isLazyLoadingForProductInfoEnabled = Dynamicweb.Core.Converter.ToBoolean(Dynamicweb.Context.Current.Items["IsLazyLoadingForProductInfoEnabled"]);

	bool userHasPendingQuote = Dynamicweb.Ecommerce.Common.Context.Cart != null && Dynamicweb.Ecommerce.Common.Context.Cart.IsQuote;

	if (product.VariantInfo.VariantInfo == null || whenVariantsExist == "disable") {
		string unitId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("UnitId")) ? Dynamicweb.Context.Current.Request.Form.Get("UnitId") : product.DefaultUnitId;
		if (string.IsNullOrEmpty(unitId) && product?.UnitOptions != null) {
			if (product.UnitOptions.FirstOrDefault<UnitOptionViewModel>() != null) {
				unitId = product.UnitOptions.FirstOrDefault<UnitOptionViewModel>().Id;
			}
		}

		double? stepQty = product.PurchaseQuantityStep > 0 ? product.PurchaseQuantityStep : 1;
		double? minQty = product.PurchaseMinimumQuantity > 0 ? product.PurchaseMinimumQuantity : 1;
		double? valueQty = minQty > stepQty ? minQty : stepQty;
		string disableAddToCart = null;
		double? maxQty = null;
		
		if (product.ProductType == Dynamicweb.Ecommerce.Products.ProductType.Stock && !product.NeverOutOfstock)
		{
			disableAddToCart = (product.StockLevel <= 0) || (!product.NeverOutOfstock && isLazyLoadingForProductInfoEnabled) ? "disabled" : disableAddToCart;
			maxQty = product.StockLevel;
		}

		disableAddToCart = whenVariantsExist == "disable" && product.VariantInfo.VariantInfo != null && string.IsNullOrEmpty(product.VariantId) ? "disabled" : disableAddToCart;

		if (unitsSelector && product.UnitOptions.Count > 0) {
			<form method="post" action="/Default.aspx?ID=@(Pageview.Page.ID)&ProductId=@product.Id" id="UnitSelectorForm_@(product.Id)_@(product.VariantId.Replace(".", "_"))_@Model.ID">
				<input type="hidden" name="redirect" value="false">
				<input type="hidden" name="VariantID" value="@product.VariantId">
				<input type="hidden" name="UnitID" class="js-unit-id" value="@unitId">
			</form>
		}

		<div class="d-flex @horizontalAlign @fullWidth js-input-group item_@Model.Item.SystemName.ToLower()">
			<form method="post" action="@url" class="@fullWidth" style="z-index: 1">
				<input type="hidden" name="redirect" value="false">
				<input type="hidden" name="ProductId" value="@product.Id">
				<input type="hidden" name="ProductName" value="@HtmlEncoder.HtmlEncode(product.Name)">
				<input type="hidden" name="ProductVariantName" value="@product.VariantName">
				<input type="hidden" name="ProductCurrency" value="@Dynamicweb.Ecommerce.Common.Context.Currency.Code">
				<input type="hidden" name="ProductPrice" value="@PriceViewModelExtensions.ToStringInvariant(product.Price)">
				<input type="hidden" name="ProductReferer" value="component_ProductAddToCart">
				<input type="hidden" name="cartcmd" value="add">
				<input type="submit" class="d-none" onclick="event.preventDefault(); swift.Cart.Update(event)"> @* Fix for enterKey should not redirect to minicart page *@

				@if (!string.IsNullOrEmpty(product.VariantId))
				{
					<input type="hidden" name="VariantId" value="@product.VariantId">
				}

				<template class="js-step-quantity-warning">
					<div class="modal-header">
						<h1 class="modal-title fs-5">@Translate("The quantity is not valid")</h1>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						@Translate("Please select a quantity that is dividable by") @stepQty
					</div>
				</template>
				
				
				<template class="js-min-quantity-warning">
					<div class="modal-header">
						<h1 class="modal-title fs-5">@Translate("The product could not be added to the cart")</h1>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						@Translate("The quantity is not valid. You must buy at least") @product.PurchaseMinimumQuantity
					</div>
				</template>
				
				
				@if (userHasPendingQuote)
				{
					<input type="hidden" name="PendingQuote" value="true">
					
					<template class="js-pending-quote-notice">
						<div class="modal-header">
							<h1 class="modal-title fs-5">@Translate("Pending Quote")</h1>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@Translate("Close")"></button>
						</div>
						<div class="modal-body">
							@Translate("You need to complete your current quote or empty the cart before adding this product to cart.")
						</div>
					</template>
				}

				@if (quantitySelector || (!anonymousUser && product.VariantInfo.VariantInfo != null) || (!anonymousUser && favoritesSelector))
				{
					<input type="hidden" id="Unit_@(product.Id)_@product.VariantId.Replace(".", "_")" name="UnitID" value="@unitId" />
				}

				<div class="d-flex flex-row w-100">
					@if (!quantitySelector)
					{
						<input id="Quantity_@(product.Id)_@product.VariantId.Replace(".", "_")" class="swift_quantity_field" name="Quantity" value="@valueQty" type="hidden" @disableAddToCart>
					}

					@if (unitsSelector && product.UnitOptions.Count > 0)
					{
						string selectedUnitName = !string.IsNullOrEmpty(unitId) && product?.UnitOptions != null ? unitId : product.UnitOptions.FirstOrDefault<UnitOptionViewModel>().Name;

						foreach (var unitOption in product.UnitOptions)
						{
							if (unitOption.Id == unitId)
							{
								selectedUnitName = unitOption.Name;
							}
						}

						<div class="d-flex flex-column gap-2 w-100">
							<div class="input-group input-primary-button-group flex-nowrap@(inputSize)">
								@if (!anonymousUser && favoritesSelector)
								{
									@RenderPartial("Components/ToggleFavorite.cshtml", product)
								}

								@if (quantitySelector)
								{
									<input id="Quantity_@(product.Id)_@product.VariantId.Replace(".", "_")" name="Quantity" value="@valueQty" step="@stepQty" min="@minQty" max="@maxQty" class="form-control swift_quantity-field" style="min-width: 80px; max-width: 100px; z-index: 1" type="number" @disableAddToCart>
								}

								<button class="btn btn-secondary @flexFill dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
									@selectedUnitName
								</button>

								<ul class="dropdown-menu swift_unit-field">
									@foreach (var unitOption in product.UnitOptions)
									{
										var selectedUnit = unitOption.Id == unitId ? "selected" : "";

										<li>
											<button type="button" class="btn dropdown-item" data-value="@unitOption.Id" onclick="document.querySelector('#UnitSelectorForm_@(product.Id)_@(product.VariantId.Replace(".", "_"))_@Model.ID').querySelector('.js-unit-id').value = this.getAttribute('data-value');
																										document.querySelector('#Unit_@(product.Id)_@product.VariantId.Replace(".", "_")').value = this.getAttribute('data-value');
																										swift.PageUpdater.Update(document.querySelector('#UnitSelectorForm_@(product.Id)_@(product.VariantId.Replace(".", "_"))_@Model.ID'))">
												<span>@unitOption.Name</span>
												<span>
													@if (unitOption.StockLevel > 0 || unitOption.NeverOutOfStock)
													{
														if (!Model.Item.GetBoolean("HideInventory") && !unitOption.NeverOutOfStock)
														{
															<span class="small text-success">@unitOption.StockLevel @Translate("In stock")</span>
														}
														else
														{
															<span class="small text-success">@Translate("In stock")</span>
														}
													}
													else
													{
														<span class="small text-danger">@Translate("Out of Stock")</span>
													}
												</span>
											</button>
										</li>
									}
								</ul>
							</div>
							<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary @(buttonSize) js-add-to-cart-button" style="white-space: nowrap" @disableAddToCart title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)_@Pageview.CurrentParagraph.ID">
								@if (!Model.Item.GetBoolean("HideButtonText"))
								{
									<span class="text-nowrap d-flex align-items-center justify-content-center gap-2">
										@addToCartLabel
									</span>
								}
								else
								{
									@addToCartLabel
								}
							</button>
						</div>
					} 
					else
					{
						if (!anonymousUser && favoritesSelector)
						{
							@RenderPartial("Components/ToggleFavorite.cshtml", product)
						}

						<div class="input-group input-primary-button-group flex-nowrap@(inputSize)">
							@if (quantitySelector)
							{
								<input id="Quantity_@(product.Id)_@product.VariantId.Replace(".", "_")" name="Quantity" value="@valueQty" step="@stepQty" min="@minQty" max="@maxQty" class="form-control swift_quantity-field" style="min-width: 60px; max-width: 100px; z-index: 1" type="number" @disableAddToCart>
							}

							<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary @(buttonSize) @flexFill js-add-to-cart-button" style="white-space: nowrap" @disableAddToCart title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)_@Pageview.CurrentParagraph.ID">
								@if (!Model.Item.GetBoolean("HideButtonText"))
								{
									<span class="text-nowrap d-flex align-items-center justify-content-center gap-2">
										@addToCartLabel
									</span>
								}
								else
								{
									@addToCartLabel
								}
							</button>
						</div>
					}
				</div>
			</form>
		</div>
	} else if (whenVariantsExist == "modal") {
		string ButtonShape = Model.Item.GetRawValueString("VariantButtonShape", "square");
		string buttonAspectRatio = Model.Item.GetRawValueString("VariantImageAspectRatio", "56%");

		string buttonText = Translate("Select");
		string variantId = !string.IsNullOrWhiteSpace(product.VariantId) ? product.VariantId : product.DefaultVariantId;

		string variantSelectorServicePageId = !string.IsNullOrEmpty(Model.Item.GetString("VariantSelectorServicePageId")) ? Model.Item.GetLink("VariantSelectorServicePageId").PageId.ToString() : "";
		variantSelectorServicePageId = variantSelectorServicePageId != "" ? variantSelectorServicePageId : GetPageIdByNavigationTag("VariantSelectorService").ToString();

		<div class="d-flex @horizontalAlign w-100 item_@Model.Item.SystemName.ToLower()">
			@if (!anonymousUser && favoritesSelector)
			{
				@RenderPartial("Components/ToggleFavorite.cshtml", product)
			}
			<form action="/Default.aspx?ID=@variantSelectorServicePageId" data-response-target-element="DynamicModalContent" data-preloader="inline" style="z-index: 1" class="@fullWidth">
				<input type="hidden" name="ProductID" value="@product.Id">
				<input type="hidden" name="VariantID" value="@variantId">
				<input type="hidden" name="QuantitySelector" value="@quantitySelector.ToString()">
				<input type="hidden" name="HideInventory" value="@hideInventory.ToString()">
				<input type="hidden" name="HideStockState" value="@hideStockState.ToString()">
				<input type="hidden" name="ButtonLayout" value="@ButtonShape">
				<input type="hidden" name="ButtonAspectRatio" value="@buttonAspectRatio">
				<input type="hidden" name="VariantSelectorServicePage" value="@variantSelectorServicePageId">
				<input type="hidden" name="ViewType" value="ModalContent">
				@if (isLazyLoadingForProductInfoEnabled)
				{
					@* If lazy loading is enabled, bypass it because we're loading a modal window, so render everything as if it was server-side *@
					<input type="hidden" name="getproductinfo" value="true">
				}
				<button type="button" onclick="swift.PageUpdater.Update(event)" class="btn btn-primary@(buttonSize) @fullWidth" title="@Translate("Select")" data-bs-toggle="modal" data-bs-target="#DynamicModal" id="OpenVariantSelectorModal@(product.Id)_@Pageview.CurrentParagraph.ID">@buttonText</button>
			</form>
		</div>
	}
} else if (Pageview.IsVisualEditorMode) { 
	<div class="alert alert-dark m-0">@Translate("No products available")</div>
}
