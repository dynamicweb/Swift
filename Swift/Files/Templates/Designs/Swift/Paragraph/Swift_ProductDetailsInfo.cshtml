@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.CustomerExperienceCenter.Favorites
@using Dynamicweb.Ecommerce.Products.FieldDisplayGroups
@using Dynamicweb.Frontend
@using Dynamicweb.Core
@using System.Drawing

@functions { 
	//Find contrast color (white, black)
	public static string GetContrastColor(string hexString)
	{
		System.Drawing.Color bg = System.Drawing.ColorTranslator.FromHtml(hexString);

		int nThreshold = 105;
		int bgDelta = Convert.ToInt32((bg.R * 0.299) + (bg.G * 0.587) +
									(bg.B * 0.114));

		string foreColor = (255 - bgDelta < nThreshold) ? "#333" : "#fff";
		return foreColor;
	}
}

@{
	ProductViewModel product = new ProductViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}

	string anonymousUsersLimitations = Pageview.AreaSettings.GetRawValueString("AnonymousUsers", "");
	bool anonymousUser = Pageview.User == null;
	bool isErpConnectionDown = !Dynamicweb.Ecommerce.DynamicwebLiveIntegration.TemplatesHelper.IsWebServiceConnectionAvailable();
	bool hideAddToCart = anonymousUsersLimitations.Contains("cart") && anonymousUser || Pageview.AreaSettings.GetBoolean("ErpDownHideAddToCart") && isErpConnectionDown;
	hideAddToCart = product.VariantInfo.VariantInfo != null && Model.Item.GetBoolean("HideVariantSelector") ? true : hideAddToCart;
	bool hideStock = Model.Item.GetBoolean("HideStockState") || (Pageview.AreaSettings.GetBoolean("ErpDownHideStock") && isErpConnectionDown);
	bool hidePrice = anonymousUsersLimitations.Contains("price") && anonymousUser || Pageview.AreaSettings.GetBoolean("ErpDownHidePrices") && isErpConnectionDown;
	bool hideFavoritesSelector = !string.IsNullOrEmpty(Model.Item.GetString("HideFavoritesSelector")) ? Model.Item.GetBoolean("HideFavoritesSelector") : false;

	bool isDiscontinued = product.Discontinued;
	bool IsNeverOutOfStock = product.NeverOutOfstock;
	string[] variantId = product.VariantId.Split('.');
	string disableAddToCart = (product.StockLevel <= 0) ? "disabled" : "";
	disableAddToCart = isDiscontinued ? "disabled" : disableAddToCart;
	disableAddToCart = IsNeverOutOfStock ? "" : disableAddToCart;

	// Does product has a expected delivery data
	bool hasExpectedDelivery = product.ExpectedDelivery != null && product.ExpectedDelivery > DateTime.Now;
	string expectedDeliveryDate = product.ExpectedDelivery?.ToShortDateString() ?? "";

	string url = "/Default.aspx?ID=" + (GetPageIdByNavigationTag("CartService"));
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=Swift_MiniCart.cshtml" : "?LayoutTemplate=Swift_MiniCart.cshtml";
	}

	IEnumerable<string> selectedDisplayGroups = Model.Item.GetRawValueString("MainFeatures").Split(',').ToList();
	List<CategoryFieldViewModel> mainFeatures = new List<CategoryFieldViewModel>();

	foreach (var selection in selectedDisplayGroups)
	{
		foreach (CategoryFieldViewModel group in product.FieldDisplayGroups.Values)
		{
			if (selection == group.Id)
			{
				mainFeatures.Add(group);
			}
		}
	}

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-6");

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;

	string quantityPricesLayout = Model.Item.GetRawValueString("QuantityPricesLayout", "list");

	string minQty = product.PurchaseMinimumQuantity != 1 ? "min=\"" + product.PurchaseMinimumQuantity.ToString() + "\"" : "min=\"1\"";
	string stepQty = product.PurchaseQuantityStep > 1 ? product.PurchaseQuantityStep.ToString() : "1";
	string valueQty = product.PurchaseMinimumQuantity > product.PurchaseQuantityStep ? product.PurchaseMinimumQuantity.ToString() : stepQty;
	string qtyValidCheck = stepQty != "1" ? "onkeyup=\"swift.Cart.QuantityValidate(event)\"" : "";

	string showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
	bool neverShowVat = string.IsNullOrEmpty(showPricesWithVat);

	string priceMin = "";
	string priceMax = "";

	var favoriteParameters = new Dictionary<string, object>();
	if (!anonymousUser && !hideFavoritesSelector)
	{
		IEnumerable<FavoriteList> favoreiteLists = Pageview.User.GetFavoriteLists();
		int defaultFavoriteListId = 0;

		if (favoreiteLists.Count() == 1) {
			foreach (FavoriteList list in favoreiteLists) {
				defaultFavoriteListId = list.ListId;
			}
		}

		favoriteParameters.Add("ListId", defaultFavoriteListId);
	}

	var badgeParms = new Dictionary<string, object>();
	badgeParms.Add("size", "h7");
	badgeParms.Add("saleBadgeType", Model.Item.GetRawValue("SaleBadgeType"));
	badgeParms.Add("saleBadgeCssClassName", Model.Item.GetRawValue("SaleBadgeDesign"));
	badgeParms.Add("newBadgeCssClassName", Model.Item.GetRawValue("NewBadgeDesign"));
	badgeParms.Add("newPublicationDays", Model.Item.GetInt32("NewPublicationDays"));
	badgeParms.Add("campaignBadgesValues", Model.Item.GetRawValueString("CampaignBadges"));

	bool saleBadgeEnabled = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("SaleBadgeDesign")) && Model.Item.GetRawValueString("SaleBadgeDesign") != "none" ? true : false;
	bool newBadgeEnabled = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("NewBadgeDesign")) && Model.Item.GetRawValueString("NewBadgeDesign") != "none" ? true : false;
	DateTime createdDate = product.Created.Value;
	bool showBadges = saleBadgeEnabled && product.Discount.Price != 0 ? true : false;
	showBadges = (newBadgeEnabled && Model.Item.GetInt32("NewPublicationDays") == 0) || (newBadgeEnabled && (createdDate.AddDays(Model.Item.GetInt32("NewPublicationDays")) > DateTime.Now)) ? true : showBadges;
	showBadges = !string.IsNullOrEmpty(Model.Item.GetRawValueString("CampaignBadges")) ? true : showBadges;
	
	string liveInfoClass = "";
	string productInfoFeed = "";
	bool isLazyLoadingForProductInfoEnabled = Dynamicweb.Ecommerce.DynamicwebLiveIntegration.TemplatesHelper.IsLazyLoadingForProductInfoEnabled;
	if (isLazyLoadingForProductInfoEnabled)
	{
		if (Dynamicweb.Context.Current.Items.Contains("ProductInfoFeed"))
		{
			productInfoFeed = Dynamicweb.Context.Current.Items["ProductInfoFeed"]?.ToString();
			if (!string.IsNullOrEmpty(productInfoFeed))
			{
				productInfoFeed = $"data-product-info-feed=\"{productInfoFeed}\"";
			}
		}
		liveInfoClass = "js-live-info";
	}
}

<div class="h-100 @(contentPadding) @(theme) item_@Model.Item.SystemName.ToLower()" @productInfoFeed>
	<div class="d-flex flex-column gap-4 js-product" data-product-id="@product.Id">
		@if (showBadges) {
			<div class="swift_badge-collection">
				@RenderPartial("Components/EcommerceBadge.cshtml", product, badgeParms)
			</div>
		}

		<div class="d-flex flex-column gap-2">
			<h1 class="@titleFontSize m-0" itemprop="name">@product.Name</h1>
			@if (!Model.Item.GetBoolean("HideProductNumber"))
			{
				@RenderPartial("Paragraph/Swift_ProductNumber.cshtml", Model)
			}
		</div>

		@if (!hidePrice && !isDiscontinued)
		{
			@RenderPartial("Paragraph/Swift_ProductPrice.cshtml", Model)
			
			if (isLazyLoadingForProductInfoEnabled)
			{
				<div class="product-prices-container @liveInfoClass d-none" data-show-if="LiveProductInfo.product.Prices.length > 0">
					@if (quantityPricesLayout == "list")
					{
						<div class="mt-3 product-prices">
							<small class="d-block opacity-75 product-prices-template"><span><span class="js-text-price-quantity"></span> @Translate("PCS")</span> - <span class="fw-bold"><span class="js-text-price-price"></span> <span class="d-none" data-show-if="LiveProductInfo.productPrice.Quantity > 1">@Translate("pr. PCS")</span></span></small>
						</div>
					}
					else if (quantityPricesLayout == "table")
					{
						<div class="grid">
							<table class="table table-sm mt-3 g-col-12 g-col-lg-6">
								<thead>
								<tr>
									<td>@Translate("QTY")</td>
									<td>@Translate("pr. PCS")</td>
								</tr>
								</thead>
								<tbody class="product-prices">
									<tr class="product-prices-template">
										<td class="js-text-price-quantity"></td>
										<td class="js-text-price-price"></td>
									</tr>
								</tbody>
							</table>
						</div>
					}
				</div>
			}
			else
			{
				if (product.Prices.Count > 0)
				{
					<div>
						@if (quantityPricesLayout == "list")
						{
							<div class="mt-3">
								@foreach (PriceListViewModel quantityPrice in product.Prices)
								{
									string quantityLabel = Translate("PCS");
									string quantityPriceSuffix = quantityPrice.Quantity > 1 ? Translate("pr. PCS") : "";

									<small class="d-block opacity-75"><span>@quantityPrice.Quantity @quantityLabel</span> - <span class="fw-bold">@quantityPrice.Price.PriceFormatted @quantityPriceSuffix</span></small>
								}
							</div>
						}
						else if (quantityPricesLayout == "table")
						{
							<div class="grid">
								<table class="table table-sm mt-3 g-col-12 g-col-lg-6">
									<thead>
									<tr>
										<td>@Translate("QTY")</td>
										<td>@Translate("pr. PCS")</td>
									</tr>
									</thead>
									<tbody>
									@foreach (PriceListViewModel quantityPrice in product.Prices)
									{
										<tr>
											<td>@quantityPrice.Quantity</td>
											<td>@quantityPrice.Price.PriceFormatted</td>
										</tr>
									}
									</tbody>
								</table>
							</div>
						}
					</div>
				}
			}
		}

		@RenderPartial("Paragraph/Swift_ProductShortDescription.cshtml", Model)

		@if (mainFeatures.Count > 0)
		{
			foreach (CategoryFieldViewModel mainFeatureGroup in mainFeatures)
			{
				<dl class="grid gap-0">
					@foreach (var field in mainFeatureGroup.Fields)
					{
						@RenderField(field.Value)
					}
				</dl>
			}
		}

		@if (product.VariantInfo.VariantInfo != null && !Model.Item.GetBoolean("HideVariantSelector"))
		{
			int groupNumber = 1;

			<form class="js-variant-selector" data-combinations="@string.Join(",", product.VariantCombinations())">
				<input type="hidden" name="variantid" />

				@foreach (var variantGroup in product.VariantGroups())
				{
					VariantGroupViewModel group = variantGroup;

					<h3 class="h6">@group.Name</h3>
					<div class="d-flex gap-2 flex-wrap js-variant-group" data-group-id="@groupNumber">
						@foreach (var option in group.Options)
						{
							string active = variantId.Contains(option.Id) ? "active" : "";

							if (!string.IsNullOrEmpty(option.Color))
							{
								string contrastColor = GetContrastColor(option.Color);
								<button type="button" class="btn colorbox rounded-circle d-inline-block variant-option border js-variant-option @active" style="background-color: @option.Color;  --variantoption-check-color: @contrastColor" onclick="swift.VariantSelector.OptionClick(event)" data-variant-id="@option.Id" id="@(product.Id)_@(option.Id)_@Pageview.CurrentParagraph.ID"></button>
							}
							else if (!string.IsNullOrEmpty(option.Color) && !string.IsNullOrEmpty(option.Image.Value))
							{
								<button type="button" class="btn p-0 d-inline-block variant-option border js-variant-option @active" onclick="swift.VariantSelector.OptionClick(event)" data-variant-id="@option.Id">
									<img src="/Admin/Public/GetImage.ashx?image=@(option.Image.Value)&width=42&Format=WebP&Quality=70" />
								</button>
							}
							else
							{
								<button type="button" class="btn btn-secondary d-inline-block variant-option js-variant-option @active" onclick="swift.VariantSelector.OptionClick(event)" data-variant-id="@option.Id">
									@option.Name
								</button>
							}
						}
					</div>

					groupNumber++;
				}
			</form>
		}

	<div class="d-flex flex-row flex-nowrap gap-2">
		@if (!hideAddToCart)
		{
			<form method="post" action="@url" class="flex-fill">
				<input type="hidden" name="redirect" value="false" />
				<input type="hidden" name="ProductId" value="@product.Id" />
				<input type="hidden" name="cartcmd" value="add" />

				@if (!string.IsNullOrEmpty(product.VariantId))
				{
					<input type="hidden" name="VariantId" value="@product.VariantId" />
				}
				@if (!Model.Item.GetBoolean("QuantitySelector"))
				{
					<input id="Quantity_@product.Id" name="Quantity" value="@valueQty" type="hidden">
					<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary w-100 js-add-to-cart-button @disableAddToCart" @disableAddToCart title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)_@Pageview.CurrentParagraph.ID">@Translate("Add to cart")</button>
				} else { 
					<div class="input-group input-primary-button-group js-input-group d-flex flex-row flex-nowrap">
						<label for="Quantity_@(product.Id)" class="visually-hidden">@Translate("Quantity")</label>
						<input id="Quantity_@product.Id" name="Quantity" value="@valueQty" step="@stepQty" @minQty class="form-control" style="max-width: 96px; min-width:64px;" type="number">
						<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary flex-fill js-add-to-cart-button @disableAddToCart" @disableAddToCart title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)_@Pageview.CurrentParagraph.ID">@Translate("Add to cart")</button>
					</div>

					if (stepQty != "1")
					{
						<div class="invalid-feedback d-none">
							@Translate("Please select a quantity that is dividable by") @stepQty
						</div>
					}
				}
			</form>
			if (!anonymousUser && !hideFavoritesSelector)
			{
				@RenderPartial("Components/ToggleFavorite.cshtml", product, favoriteParameters)
			}
		}
		else if (!anonymousUser && !hideFavoritesSelector && !isDiscontinued)
		{
			<div class="flex-fill" id="AddToFavorites_@Model.ID">
				@Translate("Add to favorites") @RenderPartial("Components/ToggleFavorite.cshtml", product, favoriteParameters)
			</div>
		}

		@if (isDiscontinued && product.ReplacementProduct != null) {
			List<ProductInfoViewModel> replacementProductList = new List<ProductInfoViewModel>();
			replacementProductList.Add(product.ReplacementProduct);
			var replacementProduct = replacementProductList.GetProducts().FirstOrDefault();

			if ((product.DiscontinuedAction == 0 || product.DiscontinuedAction == 1) && product?.ReplacementProduct.ProductId != null) {
				var parms = new Dictionary<string, object>();
				parms.Add("cssClass", "d-block mw-100 mh-100 m-auto");
				parms.Add("fullwidth", true);
				parms.Add("columns", Model.GridRowColumnCount);

				string imagePath = replacementProduct?.DefaultImage?.Value != null ? replacementProduct.DefaultImage.Value : "";

				string link = "Default.aspx?ID=" + GetPageIdByNavigationTag("Shop");
				link += $"&GroupID={replacementProduct.PrimaryOrDefaultGroup.Id}";
				link += $"&ProductID={replacementProduct.Id}";
				link += !string.IsNullOrEmpty(replacementProduct.VariantId) ? $"&VariantID={replacementProduct.VariantId}" : "";
				link = Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(link);

				<div class="w-100">
					<div class="fw-bold w-100">@Translate("Sorry, this product is no longer available").</div>
					<div>@Translate("We recommend this replacement product instead"):</div>

					<a href="@link">
						@RenderPartial("Components/Image.cshtml", new FileViewModel { Path = imagePath }, parms)
					</a>

					<div>@replacementProduct.Name</div>

					@if (!hidePrice)
					{
						<div class="mb-3">
							<div class="h4" itemprop="offers" itemscope itemtype="https://schema.org/Offer">
								@if (showPricesWithVat == "false" && !neverShowVat)
								{
									if (isLazyLoadingForProductInfoEnabled)
									{
										<span itemprop="price" content="" class="d-none"></span>
										<span class="text-decoration-line-through js-text-decoration-line-through opacity-75 me-3 text-price js-text-price d-none" data-show-if="LiveProductInfo.product.Price.Price != LiveProductInfo.product.PriceBeforeDiscount.Price"></span>
									}
									else
									{
										string beforePrice = product.PriceBeforeDiscount.PriceWithoutVatFormatted;

										<span itemprop="price" content="@product.Price.PriceWithoutVat" class="d-none"></span>
										if (product.Price.Price != product.PriceBeforeDiscount.Price)
										{
											<span class="text-decoration-line-through opacity-75 me-3">@beforePrice</span>
										}
									}
								}
								else
								{
									if (isLazyLoadingForProductInfoEnabled)
									{
										<span itemprop="price" content="" class="d-none"></span>
										<span class="text-decoration-line-through js-text-decoration-line-through opacity-75 me-3 text-price js-text-price d-none" data-show-if="LiveProductInfo.product.Price.Price != LiveProductInfo.product.PriceBeforeDiscount.Price"></span>
									}
									else
									{
										string beforePrice = product.PriceBeforeDiscount.PriceFormatted;

										<span itemprop="price" content="@product.Price.Price" class="d-none"></span>
										if (product.Price.Price != product.PriceBeforeDiscount.Price)
										{
											<span class="text-decoration-line-through opacity-75 me-3">@beforePrice</span>
										}
									}
								}

								@if (showPricesWithVat == "false" && !neverShowVat)
								{
									if (isLazyLoadingForProductInfoEnabled)
									{
										<span class="text-price js-text-price"><div class="spinner-border" role="status"></div></span>
									}
									else
									{
										string price = product.Price.PriceWithoutVatFormatted;
										if (product?.VariantInfo?.VariantInfo != null)
										{
											priceMin = product?.VariantInfo?.PriceMin?.PriceWithoutVatFormatted != null ? product.VariantInfo.PriceMin.PriceWithoutVatFormatted : "";
											priceMax = product?.VariantInfo?.PriceMax?.PriceWithoutVatFormatted != null ? product.VariantInfo.PriceMax.PriceWithoutVatFormatted : "";
										}
										if (priceMin != priceMax)
										{
											price = priceMin + " - " + priceMax;
										}
										<span class="text-price">@price</span>
									}
								}
								else
								{
									if (isLazyLoadingForProductInfoEnabled)
									{
										<span class="text-price js-text-price"><div class="spinner-border" role="status"></div></span>
									}
									else
									{
										string price = product.Price.PriceFormatted;
										if (product?.VariantInfo?.VariantInfo != null)
										{
											priceMin = product?.VariantInfo?.PriceMin?.PriceFormatted != null ? product.VariantInfo.PriceMin.PriceFormatted : "";
											priceMax = product?.VariantInfo?.PriceMax?.PriceFormatted != null ? product.VariantInfo.PriceMax.PriceFormatted : "";
										}
										if (priceMin != priceMax)
										{
											price = priceMin + " - " + priceMax;
										}
										<span class="text-price">@price</span>
									}
								}
							</div>

							@if (showPricesWithVat == "false" && !neverShowVat)
							{
								if (isLazyLoadingForProductInfoEnabled)
								{
									<small class="opacity-85 fst-normal js-text-price-with-vat d-none" data-suffix="@Translate("Incl. VAT")"></small>
								}
								else
								{
									string price = product.Price.PriceWithVatFormatted;
									if (product?.VariantInfo?.VariantInfo != null)
									{
										priceMin = product?.VariantInfo?.PriceMin?.PriceWithVatFormatted != null ? product.VariantInfo.PriceMin.PriceWithVatFormatted : "";
										priceMax = product?.VariantInfo?.PriceMax?.PriceWithVatFormatted != null ? product.VariantInfo.PriceMax.PriceWithVatFormatted : "";
									}
									if (priceMin != priceMax)
									{
										price = priceMin + " - " + priceMax;
									}
									<small class="opacity-85 fst-normal">@price @Translate("Incl. VAT")</small>
								}
							}
						</div>
					}

					<a href="@link" class="btn btn-primary w-100">@Translate("Go to the replacement")</a>
				</div>
			}
		}
		</div>
	</div>
	@if (!hideStock)
	{
		if (!IsNeverOutOfStock)
		{
			if (isLazyLoadingForProductInfoEnabled)
			{
				string hideStockState = string.IsNullOrEmpty(product.VariantId) && product.VariantInfo.VariantInfo != null ? "d-none" : "";
				<div class="js-product @liveInfoClass" data-product-id="@product.Id">
					<div class="mt-3 js-stock-state spinner-border @hideStockState">
						@if (!Model.Item.GetBoolean("HideInventory"))
						{
							<div class="small text-success d-none" data-show-if="LiveProductInfo.product.StockLevel > 0">
								<span class="js-text-stock"></span>
								@Translate("Products available in stock")
							</div>
						}
						else
						{
							<div class="small text-success d-none" data-show-if="LiveProductInfo.product.StockLevel > 0">@Translate("Available in stock")</div>
						}
						<div class="small text-danger d-none" data-show-if="LiveProductInfo.product.StockLevel <= 0">@Translate("Out of Stock")</div>
						
						<div class="d-none" data-show-if="LiveProductInfo.product.ExpectedDelivery != null && new Date(LiveProductInfo.product.ExpectedDelivery) > new Date()">
							<span>@Translate("Expected back in stock:")</span>
							<span class="js-text-expected-delivery"></span>
						</div>
					</div>
				</div>
			}
			else
			{
				<div class="mt-3 js-stock-state">

					@if (product.StockLevel > 0)
					{
						if (!Model.Item.GetBoolean("HideInventory"))
						{
							<div class="small text-success">@product.StockLevel @Translate("Products available in stock")</div>
						}
						else
						{
							<div class="small text-success">@Translate("Available in stock")</div>
						}
					}

					else
					{
						<div class="small text-danger">@Translate("Out of Stock")</div>
					}

					@if (hasExpectedDelivery)
					{
						<div>
							<span>@Translate("Expected back in stock:")</span>
							<span>@expectedDeliveryDate</span>
						</div>
					}

				</div>
			}
		}
	}
</div>

@helper RenderField(FieldValueViewModel field)
{
	string fieldValue = field?.Value != null ? field.Value.ToString() : "";
	bool noValues = false;

	if (!string.IsNullOrEmpty(fieldValue))
	{
		if (field.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>))
		{
			System.Collections.Generic.List<FieldOptionValueViewModel> values = field.Value as System.Collections.Generic.List<FieldOptionValueViewModel>;
			noValues = values.Count > 0 ? false : true;
		}
	}

	if (!string.IsNullOrEmpty(fieldValue) && noValues == false)
	{
		<dt class="g-col-12 g-col-sm-4 g-col-lg-12 fw-bold m-0">@field.Name</dt>
		<dd class="g-col-12 g-col-sm-8 g-col-lg-12 mb-3">
			@RenderFieldValue(field)
		</dd>
	}
}

@helper RenderFieldValue(FieldValueViewModel field)
{
	string fieldValue = field?.Value != null ? field.Value.ToString() : "";

	fieldValue = fieldValue == "False" ? Translate("No") : fieldValue;
	fieldValue = fieldValue == "True" ? Translate("Yes") : fieldValue;

	bool isColor = false;

	if (field.Value.GetType() == typeof(System.Collections.Generic.List<Dynamicweb.Ecommerce.ProductCatalog.FieldOptionValueViewModel>))
	{
		int valueCount = 0;
		System.Collections.Generic.List<FieldOptionValueViewModel> values = field.Value as System.Collections.Generic.List<FieldOptionValueViewModel>;
		int totalValues = values.Count;

		foreach (FieldOptionValueViewModel option in values)
		{
			if (option.Value.Substring(0, 1) == "#")
			{
				isColor = true;
			}

			if (!isColor)
			{
				@option.Name
			}
			else
			{
				<span class="colorbox-sm" style="background-color: @option.Value" title="@option.Value"></span>
			}

			if (valueCount != totalValues && valueCount < (totalValues - 1))
			{
				if (isColor)
				{
					<text> </text>
				}
				else
				{
					<text>, </text>
				}
			}
			valueCount++;
		}
	}
	else
	{
		if (fieldValue.Substring(0, 1) == "#")
		{
			isColor = true;
		}

		if (!isColor)
		{
			@fieldValue
		}
		else
		{
			<span class="colorbox-sm" style="background-color: @fieldValue" title="@fieldValue"></span>
		}
	}
}
