@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@functions
{
	private string RenderCustomCSS(IEnumerable<string> decorations)
	{
		var cssClasses = new List<string>();

		foreach (var itemId in decorations)
		{
			var item = Dynamicweb.Content.Services.Items.GetItem("Swift_Css", itemId);
			item.TryGetValue("Class", out object classes);

			if (classes is null)
			{
				continue;
			}

			var cssString = (string)classes;

			if (cssString.StartsWith("["))
			{
				var cssArray = Dynamicweb.Core.Converter.Deserialize<string[]>(cssString);
				cssClasses.AddRange(cssArray);
			}
			else
			{
				cssClasses.Add(cssString.Replace(",", " "));
			}
		}

		return string.Join(" ", cssClasses).Trim();
	}
}

@{
	Dynamicweb.Frontend.LinkViewModel link1 = new Dynamicweb.Frontend.LinkViewModel();
	Dynamicweb.Frontend.LinkViewModel link2 = new Dynamicweb.Frontend.LinkViewModel();

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	var decorations = Model.Item?.GetList("CssDecorations")?.GetRawValue().OfType<string>() ?? Enumerable.Empty<string>();
	string css = RenderCustomCSS(decorations);
	string layout = Model.Item.GetRawValueString("Layout", "image-top");
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", string.Empty);
	string contentPaddingClass = string.Empty;
	string gapClass = " gap-3";

	switch (contentPadding)
	{
		case "small":
			contentPaddingClass = " p-3";
			gapClass = " gap-0";
			break;
		case "large":
			contentPaddingClass = " p-5";
			gapClass = " gap-0";
			break;
	}

	string maxWidth = Model.Item.GetRawValueString("TextReadability", string.Empty) == "max-width-on" ? " mw-75ch" : string.Empty;

	bool hideTitle = Model.Item?.GetBoolean("HideTitle") ?? false;
	string title = !hideTitle ? Model.Item.GetString("Title", string.Empty) : string.Empty;

	string titleFontSize = Model.Item.GetString("TitleFontSize", "h2");
	string titleColor = Model.Item.GetString("TitleColor", "text-inherit");
	string titleOpacity = Model.Item.GetString("TitleOpacity", "opacity-100");

	string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
	string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} {titleColor} {titleOpacity}{maxWidth} m-0\">";
	string headingLevelStop = $"</{headingLevel}>";

	string subtitleColor = Model.Item.GetString("SubtitleColor", "text-inherit");
	string subtitleOpacity = Model.Item.GetString("SubtitleOpacity", "opacity-100");
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

	string textColor = Model.Item.GetString("TextColor", "text-inherit");
	string textOpacity = Model.Item.GetString("TextOpacity", "opacity-100");

	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;
	string imageAspect = Model.Item.GetRawValueString("ImageAspectRatio", "0");
	string ratioCssClass = imageAspect != "0" && imageAspect != "" ? "ratio" : string.Empty;
	string ratioVariable = imageAspect != "0" && imageAspect != "" ? "style=\"--bs-aspect-ratio: " + imageAspect + "\"" : string.Empty;
	string ImageObjectFit = Model.Item.GetRawValueString("ImageObjectFit", string.Empty);
	ImageObjectFit = ImageObjectFit == "cover" ? string.Empty : ImageObjectFit;
	ImageObjectFit = ImageObjectFit == "contain" ? "object-fit:contain" : ImageObjectFit;

	var parms = new Dictionary<string, object>();
	parms.Add("loading", "lazy");
	parms.Add("style", ImageObjectFit);
	parms.Add("alt", Model.Item.GetString("ImageAltText"));
	parms.Add("columns", Model.GridRowColumnCount);

	string figureCss = layout == "text-center" && imageAspect == "0" ? "d-flex flex-column align-items-center" : $"mb-0 {ratioCssClass}";

	if (imageAspect == "0")
	{
		parms.Add("fullwidth", true);
		parms.Add("cssClass", "img-fluid");
	}

	string linkType = Model.Item.GetRawValueString("LinkType", "page");
	string linkType2 = Model.Item.GetRawValueString("LinkType2", "page2");

	link1 = linkType == "page" && Model.Item.GetLink("ButtonLink") != null ? Model.Item.GetLink("ButtonLink") : link1;
	link2 = linkType2 == "page2" && Model.Item.GetLink("ButtonLink2") != null ? Model.Item.GetLink("ButtonLink2") : link2;

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link1 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType2 == "product-group2")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink2");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null && products.Products.Any())
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}

			string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
			string productLink = products.Products?.FirstOrDefault()?.GetProductLink(GetPageIdByNavigationTag("Shop"), false);
			productLink = productIds.Count != 1 ? "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&" + productParameter + "=" + string.Join(",", productIds).Trim() : productLink;

			link1 = new Dynamicweb.Frontend.LinkViewModel()
			{
				Url = productLink,
				IsExternal = false
			};
		}
	}

	if (linkType2 == "product2")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink2");
		IList<string> productIds = new List<string> { };

		if (products != null && products.Products.Any())
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}

			string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
			string productLink = products.Products?.FirstOrDefault()?.GetProductLink(GetPageIdByNavigationTag("Shop"), false);
			productLink = productIds.Count != 1 ? "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&" + productParameter + "=" + string.Join(",", productIds).Trim() : productLink;

			link2 = new Dynamicweb.Frontend.LinkViewModel()
			{
				Url = productLink,
				IsExternal = false
			};
		}
	}

	string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "primary");
	buttonStyle = buttonStyle == "primary" ? " btn-primary" : buttonStyle;
	buttonStyle = buttonStyle == "secondary" ? " btn-secondary" : buttonStyle;
	buttonStyle = buttonStyle == "link" ? " btn-link" : buttonStyle;
	string buttonStyle2 = Model.Item.GetRawValueString("ButtonStyle2", "secondary");
	buttonStyle2 = buttonStyle2 == "primary" ? " btn-primary" : buttonStyle2;
	buttonStyle2 = buttonStyle2 == "secondary" ? " btn-secondary" : buttonStyle2;
	buttonStyle2 = buttonStyle2 == "link" ? " btn-link" : buttonStyle2;
	bool openLinksInNewTab = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab");
	string target1 = openLinksInNewTab && link1.IsExternal ? "target=\"_blank\"" : string.Empty;
	string target2 = openLinksInNewTab && link2.IsExternal ? "target=\"_blank\"" : string.Empty;
	string rel1 = openLinksInNewTab && link1.IsExternal ? "rel=\"noopener\"" : string.Empty;
	string rel2 = openLinksInNewTab && link2.IsExternal ? "rel=\"noopener\"" : string.Empty;
	string buttonLabel = Model.Item.GetString("ButtonLabel", string.Empty);
	bool buttonHasLabel = !string.IsNullOrEmpty(buttonLabel);
	buttonLabel = string.IsNullOrEmpty(buttonLabel) ? title : buttonLabel;
	string buttonLabel2 = Model.Item.GetString("ButtonLabel2", string.Empty);
	bool buttonHasLabel2 = !string.IsNullOrEmpty(buttonLabel2);
	buttonLabel2 = string.IsNullOrEmpty(buttonLabel2) ? title : buttonLabel2;
	string stretchedLink = Model.Item.GetRawValueString("StretchedLink", "column-not-clickable");
	string stretchedLink2 = Model.Item.GetRawValueString("StretchedLink2", "column-not-clickable");
	string stretchedLinkClass = stretchedLink == "column-clickable" && !string.IsNullOrEmpty(link1.Url) ? " stretched-link" : string.Empty;
	string stretchedLinkClass2 = stretchedLink2 == "column-clickable" && !string.IsNullOrEmpty(link2.Url) ? " stretched-link" : string.Empty;
	string buttonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
	buttonSize = buttonSize == "small" ? " btn-sm" : buttonSize;
	buttonSize = buttonSize == "regular" ? string.Empty : buttonSize;
	buttonSize = buttonSize == "large" ? " btn-lg" : buttonSize;
	string alignmentClass = Model.Item.GetString("Layout") == "text-center" ? " justify-content-center" : string.Empty;

	string buttonVisuallyHidden = !buttonHasLabel ? " visually-hidden" : string.Empty;
	string buttonClasses = buttonHasLabel ? $"text-nowrap btn{buttonStyle}{buttonSize}{stretchedLinkClass}{buttonVisuallyHidden}" : stretchedLinkClass;

	string buttonVisuallyHidden2 = !buttonHasLabel2 ? " visually-hidden" : string.Empty;
	string buttonClasses2 = buttonHasLabel2 ? $"text-nowrap btn{buttonStyle2}{buttonSize}{stretchedLinkClass2}{buttonVisuallyHidden2}" : stretchedLinkClass2;
}

<div class="d-flex flex-column@(gapClass) h-100 position-relative@(theme) @(css) item_@Model.Item.SystemName.ToLower()">
	<div id="@Model.ID" class="user-select-none position-absolute top-0" style="scroll-margin-top:var(--header-height,150px)"></div>

	@switch (layout)
	{
		case "title-top":
			if (!string.IsNullOrEmpty(title))
			{
				<div class="@(contentPaddingClass)">
					@if (!string.IsNullOrEmpty(title) && !hideTitle)
					{
						@headingLevelStart
						@title
						@headingLevelStop
					}
				</div>
			}

			if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
			{
				<figure class="@figureCss" @ratioVariable>
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure>
			}

			if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")) || !string.IsNullOrEmpty(Model.Item.GetString("Text")) || link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				<div class="d-flex flex-column gap-3@(contentPaddingClass)">
					@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
					{
						<p class="m-0 lead @(subtitleFontSize) @(subtitleColor) @(subtitleOpacity)@(maxWidth)">
							@Model.Item.GetString("Lead")
						</p>
					}
					@if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
					{
						<div class="mb-0-last-child @textColor @(textOpacity)@(maxWidth)">
							@Model.Item.GetString("Text")
						</div>
					}
					@if (link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
					{
						<div class="d-flex flex-wrap gap-3@(alignmentClass)">
							@if (link1 != null && !string.IsNullOrEmpty(link1.Url))
							{
								<a href="@link1.Url" @target1 @rel1 class="@buttonClasses">@buttonLabel</a>
							}
							@if (link2 != null && !string.IsNullOrEmpty(link2.Url))
							{
								<a href="@link2.Url" @target2 @rel2 class="@buttonClasses2">@buttonLabel2</a>
							}
						</div>
					}
				</div>
			}
			break;

		case "title-lead-top":
			if (!string.IsNullOrEmpty(title) || !string.IsNullOrEmpty(Model.Item.GetString("Lead")))
			{
				<div class="d-flex flex-column gap-3@(contentPaddingClass)">
					@if (!string.IsNullOrEmpty(title) && !hideTitle)
					{
						@headingLevelStart
						@title
						@headingLevelStop
					}

					@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
					{
						<p class="m-0 lead @(subtitleFontSize) @(subtitleColor) @(subtitleOpacity)@(maxWidth)">
							@Model.Item.GetString("Lead")
						</p>
					}
				</div>
			}

			if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
			{
				<figure class="@figureCss" @ratioVariable>
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure>
			}

			if (!string.IsNullOrEmpty(Model.Item.GetString("Text")) || link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				<div class="d-flex flex-column gap-3@(contentPaddingClass)">
					@if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
					{
						<div class="mb-0-last-child @textColor @(textOpacity)@(maxWidth)">
							@Model.Item.GetString("Text")
						</div>
					}

					@if (link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
					{
						<div class="d-flex flex-wrap gap-3@(alignmentClass)">
							@if (link1 != null && !string.IsNullOrEmpty(link1.Url))
							{
								<a href="@link1.Url" @target1 @rel1 class="@buttonClasses">@buttonLabel</a>
							}
							@if (link2 != null && !string.IsNullOrEmpty(link2.Url))
							{
								<a href="@link2.Url" @target2 @rel2 class="@buttonClasses2">@buttonLabel2</a>
							}
						</div>
					}
				</div>
			}
			break;

		case "text-center":
			if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
			{
				<figure class="@figureCss" @ratioVariable>
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure>
			}

			if (!string.IsNullOrEmpty(title) || !string.IsNullOrEmpty(Model.Item.GetString("Lead")) || !string.IsNullOrEmpty(Model.Item.GetString("Text")) || link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				<div class="d-flex flex-column gap-3 align-items-center text-center h-100@(contentPaddingClass)">
					@if (!string.IsNullOrEmpty(title) && !hideTitle)
					{
						@headingLevelStart
						@title
						@headingLevelStop
					}

					@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
					{
						<p class="m-0 lead @(subtitleFontSize) @(subtitleColor) @(subtitleOpacity)@(maxWidth)">
							@Model.Item.GetString("Lead")
						</p>
					}

					@if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
					{
						<div class="mb-0-last-child @textColor @(textOpacity)@(maxWidth)">
							@Model.Item.GetString("Text")
						</div>
					}

					@if (link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
					{
						<div class="d-flex flex-wrap gap-3@(alignmentClass)">
							@if (link1 != null && !string.IsNullOrEmpty(link1.Url))
							{
								<a href="@link1.Url" @target1 @rel1 class="@buttonClasses">@buttonLabel</a>
							}
							@if (link2 != null && !string.IsNullOrEmpty(link2.Url))
							{
								<a href="@link2.Url" @target2 @rel2 class="@buttonClasses2">@buttonLabel2</a>
							}
						</div>
					}
				</div>
			}
			break;

		case "image-top":
			if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
			{
				<figure class="@figureCss" @ratioVariable>
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure>
			}

			if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) || !string.IsNullOrEmpty(Model.Item.GetString("Lead")) || !string.IsNullOrEmpty(Model.Item.GetString("Text")) || link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				<div class="d-flex flex-column gap-3 h-100@(contentPaddingClass)">
					@if (!string.IsNullOrEmpty(title) && !hideTitle)
					{
						@headingLevelStart
						@title
						@headingLevelStop
					}

					@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
					{
						<p class="m-0 lead @(subtitleFontSize) @(subtitleColor) @(subtitleOpacity)@(maxWidth)">
							@Model.Item.GetString("Lead")
						</p>
					}

					@if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
					{
						<div class="mb-0-last-child @textColor @(textOpacity)@(maxWidth)">
							@Model.Item.GetString("Text")
						</div>
					}

					@if (link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
					{
						<div class="d-flex flex-wrap gap-3@(alignmentClass)">
							@if (link1 != null && !string.IsNullOrEmpty(link1.Url))
							{
								<a href="@link1.Url" @target1 @rel1 class="@buttonClasses">@buttonLabel</a>
							}
							@if (link2 != null && !string.IsNullOrEmpty(link2.Url))
							{
								<a href="@link2.Url" @target2 @rel2 class="@buttonClasses2">@buttonLabel2</a>
							}
						</div>
					}
				</div>
			}
			break;

		case "image-bottom":
			if (!string.IsNullOrEmpty(title) || !string.IsNullOrEmpty(Model.Item.GetString("Lead")) || !string.IsNullOrEmpty(Model.Item.GetString("Text")) || link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				<div class="d-flex flex-column gap-3@(contentPaddingClass)">
					@if (!string.IsNullOrEmpty(title) && !hideTitle)
					{
						@headingLevelStart
						@title
						@headingLevelStop
					}

					@if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
					{
						<p class="m-0 lead @(subtitleFontSize) @(subtitleColor) @(subtitleOpacity)@(maxWidth)">
							@Model.Item.GetString("Lead")
						</p>
					}

					@if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
					{
						<div class="mb-0-last-child @textColor @(textOpacity)@(maxWidth)">
							@Model.Item.GetString("Text")
						</div>
					}

					@if (link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
					{
						<div class="d-flex flex-wrap gap-3@(alignmentClass)">
							@if (link1 != null && !string.IsNullOrEmpty(link1.Url))
							{
								<a href="@link1.Url" @target1 @rel1 class="@buttonClasses">@buttonLabel</a>
							}
							@if (link2 != null && !string.IsNullOrEmpty(link2.Url))
							{
								<a href="@link2.Url" @target2 @rel2 class="@buttonClasses2">@buttonLabel2</a>
							}
						</div>
					}
				</div>
			}

			if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
			{
				<figure class="@figureCss" @ratioVariable>
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure>
			}
			break;
	}
</div>
