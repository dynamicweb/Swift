@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Core
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	bool productViewModelFound = false;
	ProductViewModel product = new ProductViewModel();

	ProductViewModelSettings productSetting = new ProductViewModelSettings
	{
		LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
		CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
		CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
		ShopId = Pageview.Area.EcomShopId
	};

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		productViewModelFound = true;
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}
	if (Pageview.IsVisualEditorMode && !productViewModelFound)
	{
		if (Pageview.Item["DummyProduct"] != null)
		{
			productViewModelFound = true;
			string dummyProductId = "";
			var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
			ProductListViewModel productList = pageViewModel.Item.GetValue("DummyProduct") != null ? pageViewModel.Item.GetValue("DummyProduct") as ProductListViewModel : new ProductListViewModel();
			if (productList.Products != null)
			{
				foreach (var p in productList.Products) { dummyProductId = p.Id; }
				ProductViewModel dummyProduct = dummyProductId != "" ? ViewModelFactory.CreateView(productSetting, dummyProductId) : new ProductViewModel();
				product = dummyProduct;
			}
			else
			{
				product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetAllProducts(Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
			}
		}
		else if (Pageview.Item["DummyProduct"] == null)
		{
			productViewModelFound = true;
			product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetAllProducts(Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
		}
	}

	string title = Model?.Item?.GetString("Title") != null ? Model.Item.GetString("Title") : Translate("Products");

	string campaignValues = string.Join(",", Model.Item.GetList("CampaignBadges").SelectedValues.ToArray());

	//Styling
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");
	string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "");
	buttonStyle = buttonStyle == "primary" ? " btn-primary" : buttonStyle;
	buttonStyle = buttonStyle == "secondary" ? " btn-secondary" : buttonStyle;
	string maxWidth = Model.Item.GetRawValueString("TextReadability", "");
	maxWidth = maxWidth == "max-width-on" ? " mw-75ch" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	string generalTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("GeneralTheme")) ? " theme " + Model.Item.GetRawValueString("GeneralTheme").Replace(" ", "").Trim().ToLower() : "";
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme px-3 " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string imageTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ImageTheme")) ? " theme " + Model.Item.GetRawValueString("ImageTheme").Replace(" ", "").Trim().ToLower() : "";

	//Link generation
	string pageId = Model.Item.GetLink("ProductSliderServicePage") != null ? Model.Item.GetLink("ProductSliderServicePage").PageId.ToString() : "";
	string servicePageByNavigationTag = GetPageIdByNavigationTag("ProductSliderService") != 0 ? GetPageIdByNavigationTag("ProductSliderService").ToString() : "";
	pageId = pageId == "" ? servicePageByNavigationTag : pageId;

	string url = "/Default.aspx?ID=" + pageId;
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=Designs/Swift/Swift_PageClean.cshtml" : "?LayoutTemplate=Designs/Swift/Swift_PageClean.cshtml";
	}
	if (Pageview.IsVisualEditorMode)
	{
		url += "&VisualEdit=True";
	}

	bool isLazyLoadingForProductInfoEnabled = Dynamicweb.Ecommerce.DynamicwebLiveIntegration.TemplatesHelper.IsLazyLoadingForProductInfoEnabled;
	if (isLazyLoadingForProductInfoEnabled)
	{
		url += "&getproductinfo=true";
	}

	//Source type
	string sourceType = Model.Item.GetRawValueString("RelationType", "trending");
	IList<string> relateFromGroupIds = new List<string> { };
	IList<string> relateFromProductIds = new List<string> { };

	//--- VARIANTS ---
	ProductListViewModel productsToRelateToVariants = Model.Item.GetValue<ProductListViewModel>("ProductsToRelateToVariants");
	if (productsToRelateToVariants != null && sourceType == "variants")
	{
		foreach (var productSelection in productsToRelateToVariants.Products)
		{
			relateFromProductIds.Add(productSelection.Id);
		}
	}

	//--- MOST SOLD ---
	IList<ProductGroupViewModel> groupsToRelateToMostSold = Model.Item.GetValue<IList<ProductGroupViewModel>>("GroupsToRelateToMostSold");
	if (groupsToRelateToMostSold != null && sourceType == "most-sold")
	{
		foreach (var fromGroup in groupsToRelateToMostSold)
		{
			relateFromGroupIds.Add(fromGroup.Id);
		}
	}

	//--- TRENDING ---
	IList<ProductGroupViewModel> groupsToRelateToTrending = Model.Item.GetValue<IList<ProductGroupViewModel>>("GroupsToRelateToTrending");
	if (groupsToRelateToTrending != null && sourceType == "trending")
	{
		foreach (var fromGroup in groupsToRelateToTrending)
		{
			relateFromGroupIds.Add(fromGroup.Id);
		}
	}

	//--- LATEST ---
	IList<ProductGroupViewModel> groupsToRelateToLatest = Model.Item.GetValue<IList<ProductGroupViewModel>>("GroupsToRelateToLatest");
	if (groupsToRelateToLatest != null && sourceType == "latest")
	{
		foreach (var fromGroup in groupsToRelateToLatest)
		{
			relateFromGroupIds.Add(fromGroup.Id);
		}
	}

	//--- FREQUENTLY BOUGHT ---
	ProductListViewModel productsToRelateTo = Model.Item.GetValue<ProductListViewModel>("ProductsToRelateTo");
	if (productsToRelateTo != null && sourceType == "frequently")
	{
		foreach (var fromProduct in productsToRelateTo.Products)
		{
			relateFromProductIds.Add(fromProduct.Id);
		}
	}

	//--- SELECTED PRODUCTS ---
	ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("Products");
	if (products != null && sourceType == "selected")
	{
		foreach (var productSelection in products.Products)
		{
			relateFromProductIds.Add(productSelection.Id);
		}
	}

	//--- RELATED PRODUCTS ---
	if (sourceType == "related-products")
	{
		ProductListViewModel selectedRelationProduct = Model.Item.GetValue<ProductListViewModel>("ProductsToRelateTo2");
		if (selectedRelationProduct?.Products != null)
		{
			if (selectedRelationProduct.Products.Count > 0)
			{
				int productCount = 0;
				foreach (var selectedProduct in selectedRelationProduct.Products)
				{
					if (productCount == 0)
					{
						product = selectedProduct;
						productCount++;
					}
				}
			}
		}

		if (product?.RelatedGroups != null)
		{
			foreach (var group in product.RelatedGroups)
			{
				foreach (var relatedProduct in group.Products)
				{
					relateFromProductIds.Add(relatedProduct.ProductId);
				}
			}
		}
	}

	//Create group id collection and products id collection strings
	string groupIds = productViewModelFound ? product.PrimaryOrDefaultGroup.Id : string.Join(",", relateFromGroupIds);
	string productIds = productViewModelFound && relateFromProductIds.Count == 0 ? product.Id : string.Join(",", relateFromProductIds);

	//Set the parameters to the url
	string linkParameters = "";
	linkParameters += sourceType != "related-products" ? "&GroupId=" + groupIds : "";
	linkParameters += !string.IsNullOrEmpty(productIds) ? "&MainProductId=" + productIds : "";
	var productListPageId = GetPageIdByNavigationTag("Shop");
	string link = "/Default.aspx?ID=" + productListPageId + linkParameters;

	// Slider settings (documentation: swiffyslider.com/configuration)
	string navigationStyle = $"{Model.Item.GetRawValueString("NavigationStyle", "slider-nav-round")}";
	string navigationPlacement = $"{Model.Item.GetRawValueString("NavigationPlacement", "slider-nav-on-slides")}";
	string indicatorStyle = $"{Model.Item.GetRawValueString("IndicatorStyle", "slider-indicators-hidden")}";
	string revealSlides = Model.Item.GetRawValueString("RevealSlides", "no-reveal") == "reveal" ? "slider-item-reveal" : string.Empty;

	string navigationAlwaysVisible = (Model.Item.GetBoolean("NavigationAlwaysVisible")) ? "slider-nav-visible" : string.Empty;
	string navigationVisibleOnTouch = (Model.Item.GetBoolean("NavigationVisibleOnTouch")) ? "slider-nav-touch" : string.Empty;
	string navigationShowScrollbar = (Model.Item.GetBoolean("NavigationShowScrollbar")) ? "slider-nav-scrollbar" : string.Empty;
	string navigationSmall = (Model.Item.GetBoolean("NavigationSmall")) ? "slider-nav-sm" : string.Empty;
	string navigationInvertColors = (Model.Item.GetBoolean("NavigationInvertColors")) ? "slider-nav-dark" : string.Empty;
	string navigationSlideEntirePage = (Model.Item.GetBoolean("NavigationSlideEntirePage")) ? "slider-nav-page" : string.Empty;
	string navigationNoLoop = (Model.Item.GetBoolean("NavigationNoLoop")) ? "slider-nav-noloop" : string.Empty;
	string indicatorsOutsideSlider = (Model.Item.GetBoolean("IndicatorsOutsideSlider") && indicatorStyle != string.Empty) ? "slider-indicators-outside" : string.Empty;
	string indicatorsHighlightActive = (Model.Item.GetBoolean("IndicatorsHighlightActive")) ? "slider-indicators-highlight" : string.Empty;
	string indicatorsInvertColors = (Model.Item.GetBoolean("IndicatorsInvertedColors")) ? "slider-indicators-dark" : string.Empty;
	string indicatorsVisibleOnSmallDevices = (Model.Item.GetBoolean("IndicatorsVisibleOnSmallDevices")) ? "slider-indicators-sm" : string.Empty;

	bool productsFound = true;
	if (string.IsNullOrEmpty(groupIds) && string.IsNullOrEmpty(productIds))
	{
		if (Pageview.IsVisualEditorMode)
		{
			productIds = product.Id;
			sourceType = "selected";
		}
		else
		{
			productsFound = false;
		}
	}
}

<form method="post" action="@url" id="RelatedProductsForm_@Model.ID" data-response-target-element="RelatedProducts_@Model.ID" data-preloader="inline" data-update-url="false" class="item_@Model.Item.SystemName.ToLower()">
	<input type="hidden" name="ModelID" value="@Model.ID" />

	@*--- SLIDER SETTINGS ---*@
	<input type="hidden" name="NavigationStyle" value="@navigationStyle" />
	<input type="hidden" name="NavigationPlacement" value="@navigationPlacement" />
	<input type="hidden" name="IndicatorStyle" value="@indicatorStyle" />
	<input type="hidden" name="RevealSlides" value="@revealSlides" />

	<input type="hidden" name="NavigationAlwaysVisible" value="@(navigationAlwaysVisible)" />
	<input type="hidden" name="NavigationVisibleOnTouch" value="@(navigationVisibleOnTouch)" />
	<input type="hidden" name="NavigationShowScrollbar" value="@(navigationShowScrollbar)" />
	<input type="hidden" name="NavigationSmall" value="@(navigationSmall)" />
	<input type="hidden" name="NavigationInvertColors" value="@(navigationInvertColors)" />
	<input type="hidden" name="NavigationNoLoop" value="@(navigationNoLoop)" />
	<input type="hidden" name="NavigationSlideEntirePage" value="@(navigationSlideEntirePage)" />
	<input type="hidden" name="IndicatorsOutsideSlider" value="@(indicatorsOutsideSlider)" />
	<input type="hidden" name="IndicatorsHighlightActive" value="@(indicatorsHighlightActive)" />
	<input type="hidden" name="IndicatorsInvertColors" value="@(indicatorsInvertColors)" />
	<input type="hidden" name="IndicatorsVisibleOnSmallDevices" value="@(indicatorsVisibleOnSmallDevices)" />

	@*--- VARIANTS ---*@
	@if (sourceType == "variants")
	{
		<input type="hidden" name="isVariant" value="true" />
		<input type="hidden" name="MainProductID" id="MainProductID_@Model.ID" value="@productIds" />
	}

	@*--- MOST SOLD ---*@
	@if (sourceType == "most-sold")
	{
		<input type="hidden" name="SortBy" value="OrderCount" />
		if (groupIds != "")
		{
			<input type="hidden" name="GroupId" value="@groupIds" />
		}
	}

	@*--- TRENDING ---*@
	@if (sourceType == "trending")
	{
		<input type="hidden" name="SortBy" value="OrderCountGrowth" />
		if (groupIds != "")
		{
			<input type="hidden" name="GroupId" value="@groupIds" />
		}
	}

	@*--- FREQUENTLY BOUGHT ---*@
	@if (sourceType == "frequently" && !string.IsNullOrEmpty(productIds))
	{
		<input type="hidden" name="BoughtWithProductIds" value="[@productIds]" />
	}

	@*--- LATEST ---*@
	@if (sourceType == "latest")
	{
		<input type="hidden" name="SortBy" value="Created" />
		<input type="hidden" name="GroupId" value="@groupIds" />
	}

	@*--- SELECTED PRODUCTS ---*@
	@if (sourceType == "selected")
	{
		<input type="hidden" name="MainProductID" id="MainProductID_@Model.ID" value="@productIds" />
	}

	@*--- RELATED PRODUCTS ---*@
	@if (sourceType == "related-products")
	{
		<input type="hidden" name="MainProductID" id="MainProductID_@Model.ID" value="@productIds" />
	}

	@* General parameters *@
	<input type="hidden" name="Link" value="@link" />
	<input type="hidden" name="HideTitle" value="@Model.Item.GetString("HideTitle")" />
	<input type="hidden" name="SortOrder" value="DESC" />
	@if (Model.Item.GetInt32("ProductsCount") != 0)
	{
		<input type="hidden" name="PageSize" value="@Model.Item.GetInt32("ProductsCount")" />
	}
	<input type="hidden" name="HeadingTitle" id="RelatedProductsTitle_@Model.ID" value="@title" />
	@if (!string.IsNullOrEmpty(Model.Item.GetString("Subtitle")))
	{
		<input type="hidden" name="Subtitle" value="@Model.Item.GetString("Subtitle")" />
	}
	@if (!string.IsNullOrEmpty(Model.Item.GetString("LinkText")))
	{
		<input type="hidden" name="LinkText" value="@Model.Item.GetString("LinkText")" />
	}
	@if (!string.IsNullOrEmpty(Model.Item.GetString("ImageAspectRatio")))
	{
		string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
		ratio = ratio != "0" ? ratio : "";
		<input type="hidden" name="ImageAspectRatio" value="@ratio" />
	}
	@if (!string.IsNullOrEmpty(Model.Item.GetString("Layout")))
	{
		<input type="hidden" name="Layout" value="@Model.Item.GetRawValueString("Layout")" />
	}
	@if (titleFontSize != "")
	{
		<input type="hidden" name="TitleFontSize" value="@titleFontSize" />
	}
	@if (subtitleFontSize != "")
	{
		<input type="hidden" name="SubtitleFontSize" value="@subtitleFontSize" />
	}
	@if (buttonStyle != "")
	{
		<input type="hidden" name="ButtonStyle" value="@buttonStyle" />
	}
	@if (generalTheme != "")
	{
		<input type="hidden" name="GeneralTheme" value="@generalTheme" />
	}
	@if (theme != "")
	{
		<input type="hidden" name="Theme" value="@theme" />
	}
	@if (imageTheme != "")
	{
		<input type="hidden" name="ImageTheme" value="@imageTheme" />
	}
	@if (!string.IsNullOrEmpty(Model.Item.GetString("ContentPadding")))
	{
		string contentPadding = Model.Item.GetRawValueString("ContentPadding");
		<input type="hidden" name="ContentPadding" value="@contentPadding" />
	}
	<input type="hidden" name="TextReadability" value="@maxWidth" />
	<input type="hidden" name="ParentColumnSize" id="ParentColumnSize_@Model.ID" value="12" />

	<input type="hidden" name="SaleBadgeType" value="@Model.Item.GetRawValue("SaleBadgeType")" />
	<input type="hidden" name="SaleBadgeCssClassName" value="@Model.Item.GetRawValue("SaleBadgeDesign")" />
	<input type="hidden" name="NewBadgeCssClassName" value="@Model.Item.GetRawValue("NewBadgeDesign")" />
	<input type="hidden" name="NewPublicationDays" value="@Model.Item.GetInt32("NewPublicationDays")" />

	@if (campaignValues != "")
	{
		<input type="hidden" name="CampaignBadgesValues" value="@campaignValues" />
	}
</form>

<script type="module" src="~/Files/Templates/Designs/Swift/Assets/js/swiffy-slider.js"></script>
<script type="module">
	swift.AssetLoader.Load('Files/Templates/Designs/Swift/Assets/css/swiffy-slider.min.css', 'css');
</script>


@*Container element for the request*@
@if (productsFound)
{
	if (sourceType != "related-products")
	{
		<div class="w-100 h-100">
			<div id="RelatedProducts_@Model.ID" class="h-100" style="min-height: 345px"></div>
		</div>
	}
	else if (product?.RelatedGroups != null)
	{
		@* Create multiple slider containers, if type is Product relation *@
		<div class="grid w-100 h-100" style="grid-row-gap: 4rem">
			@foreach (var group in product.RelatedGroups)
			{
				<div id="RelatedProducts_@(Model.ID)_@group.Id" class="g-col-12 h-100" style="min-height: 345px"></div>
			}
		</div>
	}
}

@* Initialize *@
@if (sourceType != "related-products")
{
	<script type="module">
		if (document.querySelector("#RelatedProducts_@Model.ID").closest("[data-col-size]")) {
			document.querySelector("#ParentColumnSize_@Model.ID").value = document.querySelector("#RelatedProducts_@Model.ID").closest("[data-col-size]").getAttribute("data-col-size");
		}
		swift.PageUpdater.Update(document.querySelector("#RelatedProductsForm_@Model.ID"));
	</script>
}
else if (product?.RelatedGroups != null)
{
	@* Create multiple sliders, if type is Product relation *@
	foreach (var group in product.RelatedGroups)
	{
		IList<string> fromProductIds = new List<string> { };

		foreach (var relatedProduct in group.Products)
		{
			fromProductIds.Add(relatedProduct.ProductId);
		}
		<script type="module">
			document.querySelector("#ParentColumnSize_@Model.ID").value = document.querySelector("#RelatedProducts_@(Model.ID)_@group.Id").closest("[data-col-size]").getAttribute("data-col-size");
			document.querySelector("#MainProductID_@Model.ID").value = "@string.Join(",", fromProductIds)";
			document.querySelector("#RelatedProductsTitle_@Model.ID").value = "@group.Name";
			document.querySelector("#RelatedProductsForm_@Model.ID").setAttribute("data-response-target-element", "RelatedProducts_@(Model.ID)_@group.Id");

			swift.PageUpdater.Update(document.querySelector("#RelatedProductsForm_@Model.ID"));
		</script>
	}
}
