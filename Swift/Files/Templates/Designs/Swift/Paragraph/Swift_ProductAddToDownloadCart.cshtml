@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.CustomerExperienceCenter.Favorites

@{
	ProductViewModel product = new ProductViewModel();

	ProductViewModelSettings productSetting = new ProductViewModelSettings
	{
		LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
		CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
		CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
		ShopId = Pageview.Area.EcomShopId
	};

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	} else if (Pageview.Item["DummyProduct"] != null) {

		string dummyProductId = "";
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel productList = pageViewModel.Item.GetValue("DummyProduct") != null ? pageViewModel.Item.GetValue("DummyProduct") as ProductListViewModel : new ProductListViewModel();
		if (productList.Products != null)
		{
			foreach (var p in productList.Products) { dummyProductId = p.Id; }
			ProductViewModel dummyProduct = dummyProductId != "" ? ViewModelFactory.CreateView(productSetting, dummyProductId) : new ProductViewModel();
			product = dummyProduct;
		} else {
			product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetAllProducts(Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
		}
	} else if (Pageview.Item["DummyProduct"] == null) {
		product = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.Products.GetAllProducts(Dynamicweb.Ecommerce.Common.Context.LanguageID, false).FirstOrDefault().Id);
	}

	string contextCart = Model.Item.GetRawValueString("ContextCart", "");

	string formurl = "/Default.aspx?ID=" + (GetPageIdByNavigationTag("CartService"));
	if (!formurl.Contains("LayoutTemplate"))
	{
		formurl += formurl.Contains("?") ? "&LayoutTemplate=Swift_MiniCart.cshtml" : "?LayoutTemplate=Swift_MiniCart.cshtml";
	}

	string horizontalAlign = Model.Item.GetRawValueString("HorizontalAlignment", "");
	horizontalAlign = horizontalAlign == "center" ? "justify-content-center" : horizontalAlign;
	horizontalAlign = horizontalAlign == "end" ? "justify-content-end" : horizontalAlign;
	horizontalAlign = horizontalAlign == "full" ? "" : horizontalAlign;

	string anonymousUsersLimitations = Pageview.AreaSettings.GetRawValueString("AnonymousUsers", "");
	bool anonymousUser = Pageview.User == null;

	bool hideAddToCart = (anonymousUsersLimitations.Contains("cart") && anonymousUser) ? true : false;
	hideAddToCart = Pageview.IsVisualEditorMode ? false : hideAddToCart;

	string buttonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
	buttonSize = buttonSize == "small" ? " btn-sm" : buttonSize;
	buttonSize = buttonSize == "regular" ? string.Empty : buttonSize;
	buttonSize = buttonSize == "large" ? " btn-lg" : buttonSize;
}


@if (!hideAddToCart && product.Id != null) {
	string iconPath = "/Files/icons/";
	string url = "/Default.aspx?ID=" + (GetPageIdByNavigationTag("CartService"));
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=Swift_MiniCart.cshtml" : "?LayoutTemplate=Swift_MiniCart.cshtml";
	}

	string cartCommand = "add";
	string buttonStyle = "btn-primary";
	bool inCart = false;

	string fullWidth = Model.Item.GetRawValueString("HorizontalAlignment", "") == "full" ? "w-100" : "";
	string addToCartIcon = Model.Item.GetRawValueString("Icon", iconPath + "download.svg");
	string addToCartLabel = "";

	if (!string.IsNullOrEmpty(contextCart)) { 
		addToCartLabel += !addToCartIcon.Contains("_none") ? "<span class=\"icon-2\">" + ReadFile(addToCartIcon) + "</span>" : "";
		addToCartLabel += !addToCartIcon.Contains("_none") && !Model.Item.GetBoolean("HideButtonText") ? " " : "";

		if (product.IsProductInCart(contextCart))
		{
			addToCartLabel += !Model.Item.GetBoolean("HideButtonText") ? Translate("Remove from download cart") : "";
			cartCommand = "delorderline";
			buttonStyle = "btn-secondary";
			inCart = true;
		} else {
			addToCartLabel += !Model.Item.GetBoolean("HideButtonText") ? Translate("Add to download cart") : "";
		}

		string minQty = product.PurchaseMinimumQuantity != 1 ? "min=\"" + product.PurchaseMinimumQuantity.ToString() + "\"" : "min=\"1\"";
		string stepQty = product.PurchaseQuantityStep > 1 ? product.PurchaseQuantityStep.ToString() : "1";
		string valueQty = product.PurchaseMinimumQuantity > product.PurchaseQuantityStep ? product.PurchaseMinimumQuantity.ToString() : stepQty;
		string qtyValidCheck = stepQty != "1" ? "onkeyup=\"swift.Cart.QuantityValidate(event)\"" : "";

		<div class="d-flex @horizontalAlign @fullWidth item_@Model.Item.SystemName.ToLower()">
			<form method="post" action="@formurl" class="@fullWidth" style="z-index: 1">
				<input type="hidden" name="OrderContext" value="@contextCart" />
				<input type="hidden" name="minicartid" value="@contextCart" />
				<input type="hidden" name="redirect" value="false" />
				<input type="hidden" name="ProductId" value="@product.Id" />

				@if (!string.IsNullOrEmpty(product.VariantId))
				{
					<input type="hidden" name="VariantId" value="@product.VariantId" />
				}

				<input name="RenderOrderlineCountInsteadOfProductCount" value="true" type="hidden">
				<input name="Quantity" value="1" type="hidden">

				<input type="hidden" name="cartcmd" value="@cartCommand" />
				<button type="button" class="d-inline-flex align-items-center gap-2 btn @buttonStyle @(buttonSize) js-add-to-cart-button @fullWidth" onclick="swift.Cart.Update(event); this.addEventListener('updated.swift.cart', updateDownloadCartButton(this))" data-in-cart="@inCart" id="AddToDownloadCartButton@(product.Id)@(product.VariantId)">
					<span class="text-nowrap">
						@addToCartLabel
					</span>
				</button>
			</form>

			<script>
				function updateDownloadCartButton(clickedButton) {
					var removeFocusCssClassTimer = setTimeout(function () {
						var inCart = clickedButton.getAttribute('data-in-cart');

						if (inCart == 'True') {
							clickedButton.parentNode.querySelector('input[name="cartcmd"]').value = 'add';
							clickedButton.innerHTML = '<span class="text-nowrap">@Translate("Add to download cart")</span>';
							clickedButton.classList.add('btn-primary');
							clickedButton.classList.remove('btn-secondary');
							clickedButton.setAttribute('data-in-cart', 'False');
						} else {
							clickedButton.parentNode.querySelector('input[name="cartcmd"]').value = 'delorderline';
							clickedButton.innerHTML = '<span class="text-nowrap">@Translate("Remove from download cart")</span>';
							clickedButton.classList.remove('btn-primary');
							clickedButton.classList.add('btn-secondary');
							clickedButton.setAttribute('data-in-cart', 'True');
						}
					}, 220);
				};
			</script>
		</div>
	} else if (Pageview.IsVisualEditorMode) { 
		<div class="alert alert-dark m-0">@Translate("Please create and select a context cart")</div>
	}
} else if (Pageview.IsVisualEditorMode) { 
	<div class="alert alert-dark m-0">@Translate("No products available")</div>
}
