@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using Dynamicweb
@using System.IO
@using System.Text.RegularExpressions

@{
	string negativMargin = Model.Parameters["mx-n3"].ToString();
	string navOrientation = Model.Parameters["navOrientation"].ToString();
	string navAlignment = Model.Parameters["navAlignment"].ToString();
	string theme = !string.IsNullOrEmpty(Model.Parameters["theme"].ToString()) ? Model.Parameters["theme"].ToString() : "";
}

<nav class="navbar navbar-expand d-none d-lg-flex nav-wrapper py-0 mx-n2 @navOrientation @navAlignment desktop">
	@RenderFirstLevelNodes(Model.Nodes, theme, navOrientation)
</nav>

<nav class="navbar navbar-expand d-flex d-lg-none nav-wrapper py-0 mx-n2 @navOrientation @navAlignment mobile">
	@RenderFirstLevelNodesMobile(Model.Nodes, navOrientation)
</nav>

@helper RenderFirstLevelNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes, string theme, string navOrientation)
{
	string linkFontSize = Model.Parameters["LinkFontSize"].ToString();
	string linkFontWeight = Model.Parameters["LinkFontWeight"].ToString();
	string linkCasing = Model.Parameters["LinkCasing"].ToString();
	bool showOnlyFirstNavLevel = Model.Parameters.ContainsKey("ShowOnlyFirstNavLevel") ? Convert.ToBoolean(Model.Parameters["ShowOnlyFirstNavLevel"].ToString()) : false;

	<ul class="navbar-nav @(navOrientation == "vertical" ? "flex-column" : navOrientation)">

		@foreach (var node in nodes)
		{
			var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
			string pageType = page.ItemType;

			string preferencesLayout = page.Item["PreferencesLayout"] != null ? page.Item["PreferencesLayout"].ToString() : "";
			string preferencesType = "language";
			bool countrySelector = page.Item["CountrySelector"] != null ? Convert.ToBoolean(page.Item["CountrySelector"].ToString()) : false;
			bool languageSelector = page.Item["LanguageSelector"] != null ? Convert.ToBoolean(page.Item["LanguageSelector"].ToString()) : false;
			bool currencySelector = page.Item["CurrencySelector"] != null ? Convert.ToBoolean(page.Item["CurrencySelector"].ToString()) : false;

			var hasChildren = node.Nodes.Count() > 0 || pageType == "Swift_SignIn";
			string dropdownAttributes = hasChildren ? " role=\"button\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"" : "";

			string nodeId = !string.IsNullOrEmpty(node.GroupId) ? "Navigation_" + node.GroupId + "_" + Pageview.CurrentParagraph.ID : "Navigation_Page_Desktop_" + node.PageId.ToString() + "_" + Pageview.CurrentParagraph.ID;

			if (pageType != "Swift_Preferences")
			{
				<li class="nav-item@(hasChildren ? " dropdown" : "")">
					@if (node.IsClickable)
					{
						<a class="nav-link nav-link-clean text-nowrap nav-link-underline @linkFontSize @linkFontWeight @linkCasing@(node.IsActive ? " active" : "")@(hasChildren ? " dropdown-toggle" : "")" href="@(hasChildren ? "#" : node.Link)" @dropdownAttributes @(node.IsActive ? " aria-current='page'" : "") id="@nodeId">
							@RenderNavigationItem(node)
						</a>
					}
					else
					{
						<span class="nav-link nav-link-clean text-nowrap @linkFontSize @linkFontWeight @linkCasing" @dropdownAttributes id="@nodeId">
							@RenderNavigationItem(node)
						</span>
					}

					@if (hasChildren)
					{
						if (!showOnlyFirstNavLevel)
						{
							<ul class="dropdown-menu @(theme)">
								@foreach (var subnode in node.Nodes)//Standard pages
								{
									nodeId = !string.IsNullOrEmpty(subnode.GroupId) ? "Navigation_" + subnode.GroupId + "_" + Pageview.CurrentParagraph.ID : "Navigation_Page_" + subnode.PageId.ToString() + "_" + Pageview.CurrentParagraph.ID;

									<li>
										@if (subnode.IsClickable)
										{
											<a href="@subnode.Link" class="dropdown-item py-2 nav-link-underline @linkFontSize @linkFontWeight @linkCasing" @(subnode.IsActive ? " aria-current='page'" : "") id="@nodeId">@subnode.Name</a>
										}
										else
										{
											<span class="dropdown-item py-2 @linkFontSize @linkFontWeight @linkCasing" @(subnode.IsActive ? " aria-current='page'" : "") id="@nodeId">@subnode.Name</span>
										}
									</li>
								}
								@if (pageType == "Swift_SignIn") //Sign out link
								{
									if (Pageview.User != null)
									{
										string link = "/Admin/Public/ExtranetLogoff.aspx?redirect=no";

										<li><hr class="dropdown-divider"></li>
										if (Pageview.User.CurrentSecondaryUser != null)
										{
											<li>
												<a href="Default.aspx?ID=@(Pageview.ID)&DwExtranetRemoveSecondaryUser=1" class="dropdown-item py-2 nav-link-underline @linkFontSize @linkFontWeight @linkCasing" id="SignInButton_@Pageview.CurrentParagraph.ID">@Translate("Sign out as a customer")</a>
											</li>
										}
										<li>
											<a href="@link" class="dropdown-item py-2 nav-link-underline @linkFontSize @linkFontWeight @linkCasing">@Translate("Sign out")</a>
										</li>
									}
								}
							</ul>
						}
					}
				</li>
			}
			else
			{
				if (preferencesLayout == "modal")
				{

					string groupId = Dynamicweb.Context.Current.Request["GroupID"] != null ? Dynamicweb.Context.Current.Request["GroupID"].ToString() : "";
					string productId = Dynamicweb.Context.Current.Request["ProductID"] != null ? Dynamicweb.Context.Current.Request["ProductID"].ToString() : "";
					string variantId = Dynamicweb.Context.Current.Request["VariantID"] != null ? Dynamicweb.Context.Current.Request["VariantID"].ToString() : "";

					<li class="nav-item@(hasChildren ? " dropdown" : "")">
						<form action="/Default.aspx?ID=@node.PageId" data-response-target-element="PreferencesModalContent" data-layout-template="Swift_Preferences.cshtml" data-preloader="inline">
							<input type="hidden" name="CurrentPageID" value="@Pageview.ID" />
							<input type="hidden" name="GroupID" value="@groupId" />
							<input type="hidden" name="ProductID" value="@productId" />
							<input type="hidden" name="VariantID" value="@variantId" />
							<button type="button" onmouseover="swift.PageUpdater.Update(event)" onclick="swift.PageUpdater.Update(event)" class="btn nav-link nav-link-clean text-nowrap border-0 @linkFontSize @linkFontWeight @linkCasing" data-bs-toggle="modal" data-bs-target="#PreferencesModal" id="OpenPreferences_@Pageview.CurrentParagraph.ID">
								@if (languageSelector)
								{
									@RenderNavigationItem(node, "language") }
								else
								{
									@RenderNavigationItem(node)}
							</button>
						</form>
					</li>
				}
				else
				{
					var ecomCountries = Dynamicweb.Ecommerce.Services.Countries.GetCountries();
					var currencies = Dynamicweb.Ecommerce.Services.Currencies.GetAllCurrencies();

					if (languageSelector)
					{
						List<Dynamicweb.Content.Page> languages = new List<Dynamicweb.Content.Page>();

						if (Pageview.Page.Area.IsMaster)
						{
							languages.Add(Pageview.Page);
							if (Pageview.Page.Languages != null)
							{
								foreach (var language in Pageview.Page.Languages)
								{
									if (language.Area.Active == true)
									{
										languages.Add(language);
									}
								}
							}
						}
						else
						{
							languages.Add(Pageview.Page.MasterPage);
							if (Pageview.Page.MasterPage != null)
							{
								if (Pageview.Page.MasterPage.Languages != null)
								{
									foreach (var language in Pageview.Page.MasterPage.Languages)
									{
										if (language.Area.Active == true)
										{
											languages.Add(language);
										}
									}
								}
							}
						}

						if (languages.Count > 1)
						{
							preferencesType = "language";

							@RenderPreferencesDropdown(node, preferencesType, linkFontSize, linkFontWeight, linkCasing, theme) }
					}
					if (countrySelector && ecomCountries.Count > 1)
					{
						preferencesType = "country";
						@RenderPreferencesDropdown(node, preferencesType, linkFontSize, linkFontWeight, linkCasing, theme) }
					if (currencySelector && currencies.Count() > 1)
					{
						preferencesType = "currency";
						@RenderPreferencesDropdown(node, preferencesType, linkFontSize, linkFontWeight, linkCasing, theme)}
				}
			}
		}
	</ul>
}

@helper RenderFirstLevelNodesMobile(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes, string navOrientation)
{
	string linkFontSize = Model.Parameters["LinkFontSize"].ToString();
	string linkFontWeight = Model.Parameters["LinkFontWeight"].ToString();
	string linkCasing = Model.Parameters["LinkCasing"].ToString();

	<div class="navbar-nav @(navOrientation == "vertical" ? "flex-column" : navOrientation)">
		@foreach (var node in nodes)
		{
			string nodeId = !string.IsNullOrEmpty(node.GroupId) ? "Navigation_" + node.GroupId + "_" + Pageview.CurrentParagraph.ID : "Navigation_Page_Mobile_" + node.PageId.ToString() + "_" + Pageview.CurrentParagraph.ID;
			var hasChildren = node.Nodes.Count() > 0;
			var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
			string pageType = page.ItemType;

			if (pageType != "Swift_Preferences")
			{
				if (node.IsClickable)
				{
					<a id="@nodeId" class="nav-link nav-link-clean text-nowrap @linkFontWeight @linkCasing @linkFontSize @(node.IsActive ? " active" : "")" href="@node.Link" title="@node.Name">
						@RenderNavigationItem(node)
					</a>
				}
				else
				{
					<span class="nav-link nav-link-clean text-nowrap @linkFontWeight @linkCasing @linkFontSize" title="@node.Name">
						@RenderNavigationItem(node)
					</span>
				}
			}
			else
			{
				bool languageSelector = page.Item["LanguageSelector"] != null ? Convert.ToBoolean(page.Item["LanguageSelector"].ToString()) : false;
				string groupId = Dynamicweb.Context.Current.Request["GroupID"] != null ? Dynamicweb.Context.Current.Request["GroupID"].ToString() : "";
				string productId = Dynamicweb.Context.Current.Request["ProductID"] != null ? Dynamicweb.Context.Current.Request["ProductID"].ToString() : "";
				string variantId = Dynamicweb.Context.Current.Request["VariantID"] != null ? Dynamicweb.Context.Current.Request["VariantID"].ToString() : "";

				<div class="nav-item">
					<form action="/Default.aspx?ID=@node.PageId" data-response-target-element="PreferencesModalContent" data-layout-template="Swift_Preferences.cshtml" data-preloader="inline">
						<input type="hidden" name="Layout" value="modal" />
						<input type="hidden" name="CurrentPageID" value="@Pageview.ID" />
						<input type="hidden" name="GroupID" value="@groupId" />
						<input type="hidden" name="ProductID" value="@productId" />
						<input type="hidden" name="VariantID" value="@variantId" />
						<button type="button" onmouseover="swift.PageUpdater.Update(event)" onclick="swift.PageUpdater.Update(event)" class="btn nav-link nav-link-clean text-nowrap border-0 @linkFontSize @linkFontWeight @linkCasing" data-bs-toggle="modal" data-bs-target="#PreferencesModal">
							@if (languageSelector)
							{
								@RenderNavigationItem(node, "language") }
							else
							{
								@RenderNavigationItem(node)}
						</button>
					</form>
				</div>
			}
		}
	</div>
}

@helper RenderNavigationItem(Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel node, string preferencesType = "")
{
	var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
	string pageType = page.ItemType;
	string linkFontSize = Model.Parameters["LinkFontSize"].ToString();
	string layout = Model?.Parameters["Layout"].ToString();
	string icon = page.Item["Icon"] != null ? page.Item["Icon"].ToString() : "";
	string iconSize = "icon-3";

	if (linkFontSize == "fs-7")
	{
		iconSize = "icon-2";
	}
	if (linkFontSize == "fs-5")
	{
		iconSize = "icon-4";
	}

	if (page.PropertyItem != null)
	{
		icon = page.PropertyItem["Icon"] != null ? page.PropertyItem["Icon"].ToString() : "";
	}

	if (pageType == "Swift_Cart") //Mini cart
	{

		string cartId = "";
		if (page.Item["ContextCart"] != null)
		{
			cartId = !string.IsNullOrEmpty(page.Item["ContextCart"].ToString()) ? "ID=\"Cart_" + page.Item["ContextCart"].ToString() + "\"" : "";
		}

		string jsCartClass = string.IsNullOrEmpty(cartId) ? "js-cart-qty" : "";
		double totalProducts = 0;


		Dynamicweb.Ecommerce.Common.Context.CartContext = null;
		if (page.Item["ContextCart"] != null)
		{
			var orderContext = Dynamicweb.Ecommerce.Orders.OrderContext.GetOrderContextById(page.Item["ContextCart"].ToString());
			Dynamicweb.Ecommerce.Common.Context.CartContext = orderContext;
		}

		if (Dynamicweb.Ecommerce.Common.Context.Cart != null)
		{
			bool renderOrderlineCountInsteadOfProductCount = page.Item["RenderOrderlineCountInsteadOfProductCount"] != null ? Convert.ToBoolean(page.Item["RenderOrderlineCountInsteadOfProductCount"]) : false;
			if (!renderOrderlineCountInsteadOfProductCount) { 
				totalProducts = Dynamicweb.Ecommerce.Common.Context.Cart.GetParentProductLineQuantityCount(Dynamicweb.Ecommerce.Common.Context.Cart.OrderLines);
			} else
            {
				totalProducts = Dynamicweb.Ecommerce.Common.Context.Cart.GetParentOrderLineCount(Dynamicweb.Ecommerce.Common.Context.Cart.OrderLines);
            }
		}


		switch (layout)
		{
			case "linksOnly":
				<span class="align-middle">@node.Name</span>
				<span class="@jsCartClass mini-cart-quantity align-middle" @cartId>(@totalProducts)</span>
				break;

			case "iconsOnly":
				@RenderIcon(icon, iconSize)
				<span class="@jsCartClass mini-cart-quantity align-middle" @cartId>(@totalProducts)</span>
				break;
			case "iconsAndLinks":
				@RenderIcon(icon, iconSize)
				<span class="@jsCartClass mini-cart-quantity align-middle" @cartId>(@totalProducts)</span>
				<span class="align-middle">@node.Name</span>
				break;
			case "linksAndIcons":
				<span class="align-middle">@node.Name</span>
				<span class="@jsCartClass mini-cart-quantity align-middle" @cartId>(@totalProducts)</span>
				@RenderIcon(icon, iconSize)
				break;
		}
	}
	else
	{
		string name = node.Name;

		if (preferencesType == "country")
		{ //Country
			name = Translate("Deliver to") + ": " + Dynamicweb.Ecommerce.Common.Context.Country.Name;
		}

		if (preferencesType == "language")
		{ //Languange
			string iconFolder = "/Files/FlagIcons/";
			icon = iconFolder + Pageview.Area.CultureInfo.Name.ToLower() + ".svg";
			Regex reg = new Regex(@"\(([^\)]+)\)");
			name = reg.Replace(Pageview.Area.CultureInfo.DisplayName, "");

			layout = layout == "linksOnly" ? "iconsAndLinks" : layout;
			bool hideIcon = page.Item["HideIcon"] != null ? Convert.ToBoolean(page.Item["HideIcon"].ToString()) : false;
			bool hideName = page.Item["HideName"] != null ? Convert.ToBoolean(page.Item["HideName"].ToString()) : false;
			layout = hideIcon ? "linksOnly" : layout;
			layout = hideName ? "iconsOnly" : layout;
		}

		if (preferencesType == "currency")
		{ //Country
			name = Dynamicweb.Ecommerce.Common.Context.Currency.Code;
		}

		switch (layout)
		{
			case "linksOnly":
				<span class="align-middle">@name</span>
				break;

			case "iconsOnly":
				<span class="visually-hidden">@name</span>
				@RenderIcon(icon, iconSize)
				break;
			case "iconsAndLinks":
				@RenderIcon(icon, iconSize)
				<span class="align-middle">@name</span>
				break;
			case "linksAndIcons":
				<span class="align-middle">@name</span>
				@RenderIcon(icon, iconSize)
				break;
		}
	}
}

@helper RenderPreferencesDropdown(Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel node, string preferencesType, string linkFontSize, string linkFontWeight, string linkCasing, string theme)
{
	string groupId = Dynamicweb.Context.Current.Request["GroupID"] != null ? Dynamicweb.Context.Current.Request["GroupID"].ToString() : "";
	string productId = Dynamicweb.Context.Current.Request["ProductID"] != null ? Dynamicweb.Context.Current.Request["ProductID"].ToString() : "";
	string variantId = Dynamicweb.Context.Current.Request["VariantID"] != null ? Dynamicweb.Context.Current.Request["VariantID"].ToString() : "";

	string nodeId = !string.IsNullOrEmpty(node.GroupId) ? "PreferencesLink_" + node.GroupId + "_" + Pageview.CurrentParagraph.ID : "PreferencesLink_" + node.PageId.ToString() + "_" + Pageview.CurrentParagraph.ID;

	<li class="nav-item dropdown">
		<form class="d-none d-lg-block" action="/Default.aspx?ID=@node.PageId" data-response-target-element="@(preferencesType)Dropdown_@Pageview.CurrentParagraph.ID" data-layout-template="Swift_Preferences.cshtml" data-preloader="inline">
			<input type="hidden" name="Type" value="@preferencesType" />
			<input type="hidden" name="CurrentPageID" value="@Pageview.ID" />
			<input type="hidden" name="GroupID" value="@groupId" />
			<input type="hidden" name="ProductID" value="@productId" />
			<input type="hidden" name="VariantID" value="@variantId" />
			<input type="hidden" name="FontSize" value="@linkFontSize" />
			<input type="hidden" name="FontWeight" value="@linkFontWeight" />
			<input type="hidden" name="Casing" value="@linkCasing" />

			<a id="@nodeId" onmouseover="swift.PageUpdater.Update(event)" onclick="swift.PageUpdater.Update(event)" class="nav-link nav-link-clean text-nowrap nav-link-underline @linkFontSize @linkFontWeight @linkCasing@(node.IsActive ? " active" : "") dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" @(node.IsActive ? " aria-current='page'" : "")>
				@RenderNavigationItem(node, preferencesType)
			</a>

			<ul class="dropdown-menu @(theme)" id="@(preferencesType)Dropdown_@Pageview.CurrentParagraph.ID">
				@* The content here comes from an external request *@
			</ul>
		</form>

		<form class="d-block d-lg-none" action="/Default.aspx?ID=@node.PageId" data-response-target-element="PreferencesModalContent" data-layout-template="Swift_Preferences.cshtml" data-preloader="inline">
			<input type="hidden" name="Layout" value="modal" />
			<input type="hidden" name="CurrentPageID" value="@Pageview.ID" />
			<input type="hidden" name="GroupID" value="@groupId" />
			<input type="hidden" name="ProductID" value="@productId" />
			<input type="hidden" name="VariantID" value="@variantId" />
			<button type="button" onmouseover="swift.PageUpdater.Update(event)" onclick="swift.PageUpdater.Update(event)" class="btn nav-link nav-link-clean text-nowrap border-0 @linkFontSize @linkFontWeight @linkCasing" data-bs-toggle="modal" data-bs-target="#PreferencesModal">
				@RenderNavigationItem(node, preferencesType)
			</button>
		</form>
	</li>
}

@helper RenderIcon(string icon, string iconSize)
{
	if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none"))
	{
		string iconPath = Dynamicweb.Context.Current.Server.MapPath(icon);

		<span class="@iconSize">
			@ReadFile(iconPath)
		</span>
	}
}
