@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using Dynamicweb
@using System.IO

@RenderFirstLevelNodes(Model.Nodes)


@helper RenderFirstLevelNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes)
{
	string groupId = Dynamicweb.Context.Current.Request["GroupID"] != null ? Dynamicweb.Context.Current.Request["GroupID"].ToString() : "";
	string productId = Dynamicweb.Context.Current.Request["ProductID"] != null ? Dynamicweb.Context.Current.Request["ProductID"].ToString() : "";
	string variantId = Dynamicweb.Context.Current.Request["VariantID"] != null ? Dynamicweb.Context.Current.Request["VariantID"].ToString() : "";

    <nav class="nav flex-nowrap offcanvas-utility-navigation" aria-label="@Translate("Utility navigation")">
        @foreach (var node in nodes)
        {
			var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
			string pageType = page.ItemType;

			var inPathClass = node.InPath ? "in-path" : "";
			var activeClass = node.IsActive ? "active fw-bold" : "";

            <div class="nav-item@(node.IsActive ? " active" : "")">
                @if (pageType != "Swift_Preferences") { 
                    if (node.IsClickable)
                    {
                        <a class="nav-link @(activeClass)" href="@node.Link">
                            @RenderNavigationItem(node)
                        </a>
                    } else {
                        <span class="nav-link">
                            @RenderNavigationItem(node)
                        </span>
                    }
                } else { 
                    List<string> preferences = new List<string>();

					bool countrySelector = page.Item["CountrySelector"] != null ? Convert.ToBoolean(page.Item["CountrySelector"].ToString()) : false;
					bool languageSelector = page.Item["LanguageSelector"] != null ? Convert.ToBoolean(page.Item["LanguageSelector"].ToString()) : false;
					bool currencySelector = page.Item["CurrencySelector"] != null ? Convert.ToBoolean(page.Item["CurrencySelector"].ToString()) : false;
					string name = Translate("Preferences");
					string icon = "";

					if (countrySelector) {
						preferences.Add(Dynamicweb.Ecommerce.Common.Context.Country.Code2);
					}

					if (languageSelector) {
						bool hideIcon = page.Item["HideIcon"] != null ? Convert.ToBoolean(page.Item["HideIcon"].ToString()) : false;

						if (!hideIcon) {
							string iconFolder = "/Files/FlagIcons/";
							icon = iconFolder + Pageview.Area.CultureInfo.Name.ToLower() + ".svg";
						}
					}

					if (currencySelector) {
						string currencyName = Dynamicweb.Ecommerce.Common.Context.Currency.Code;
						preferences.Add(currencyName);
					}

					if (preferences.Count != 0) {
						name = (string.Join(" / ", preferences.Select(x => x.ToString()).ToArray()));
					}

					<form action="/Default.aspx?ID=@node.PageId" data-response-target-element="PreferencesModalContent" data-layout-template="Swift_Preferences.cshtml" data-preloader="inline">
						<input type="hidden" name="Layout" value="modal" />
						<input type="hidden" name="CurrentPageID" value="@Pageview.ID" />
						<input type="hidden" name="GroupID" value="@groupId" />
						<input type="hidden" name="ProductID" value="@productId" />
						<input type="hidden" name="VariantID" value="@variantId" />
						<a href="#" type="button" onclick="swift.PageUpdater.Update(event)" class="nav-link position-relative flex-fill @activeClass @inPathClass" @(node.IsActive ? "aria-current='page'" : "") data-bs-toggle="modal" data-bs-target="#PreferencesModal">
							@if (icon != "") { 
								if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none")) {
									string iconPath = Dynamicweb.Context.Current.Server.MapPath(icon);

									<span class="icon-2">
										@ReadFile(iconPath)
									</span>
								}
							}
							<span class="align-middle">@name</span>
						</a>
					</form>
                }
            </div>
        }
    </nav>
}

@helper RenderNavigationItem(Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel node) { 
    var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
    string pageType = page.ItemType;
    string icon = "";
    if (page.PropertyItem != null) {
        icon = page.PropertyItem["Icon"] != null ? page.PropertyItem["Icon"].ToString() : "";
    }

    if (pageType == "Swift_Cart") {
		double totalProducts = 0;
		if (Dynamicweb.Ecommerce.Common.Context.Cart != null) {
            bool renderOrderlineCountInsteadOfProductCount = page.Item["RenderOrderlineCountInsteadOfProductCount"] != null ? Convert.ToBoolean(page.Item["RenderOrderlineCountInsteadOfProductCount"]) : false;
			if (!renderOrderlineCountInsteadOfProductCount) { 
				totalProducts = Dynamicweb.Ecommerce.Common.Context.Cart.GetParentProductLineQuantityCount(Dynamicweb.Ecommerce.Common.Context.Cart.OrderLines);
			} else
            {
				totalProducts = Dynamicweb.Ecommerce.Common.Context.Cart.GetParentOrderLineCount(Dynamicweb.Ecommerce.Common.Context.Cart.OrderLines);
            }
		}

        if (Path.GetExtension(icon).ToLower() == ".svg") {
            @RenderIcon(icon)
            <span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
        }
	} 
    else {
        if (Path.GetExtension(icon).ToLower() == ".svg") {
            @RenderIcon(icon)
        }
    }
}

@helper RenderIcon(string icon, string cssClass = "") { 
    if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none")) {
        string iconPath = Dynamicweb.Context.Current.Server.MapPath(icon);

        <span class="icon-3">
            @ReadFile(iconPath)
        </span>
    }
}



