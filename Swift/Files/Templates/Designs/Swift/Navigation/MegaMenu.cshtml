@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using Dynamicweb
@using Dynamicweb.Frontend
@using System.IO
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string theme = Model.Parameters["theme"] != null ? Model.Parameters["theme"].ToString() : string.Empty;
	string navAlignment = Model.Parameters["NavAlignment"] != null ? Model.Parameters["NavAlignment"].ToString() : string.Empty;
	string linkFontWeight = Model.Parameters["LinkFontWeight"] != null ? Model.Parameters["LinkFontWeight"].ToString() : string.Empty;
	string linkCasing = Model.Parameters["LinkCasing"] != null ? Model.Parameters["LinkCasing"].ToString() : string.Empty;
	string linkFontSize = Model.Parameters["LinkFontSize"] != null ? Model.Parameters["LinkFontSize"].ToString() : string.Empty;
}

<nav class="navbar navbar-expand d-none d-lg-flex mx-n2 position-static py-0 @navAlignment megamenu-wrapper desktop">
	@RenderFirstLevelNodes(Model.Nodes, theme, linkFontWeight, linkCasing, linkFontSize)
</nav>

<nav class="navbar navbar-expand d-flex d-lg-none mx-n2 py-0 @navAlignment megamenu-wrapper mobile">
	@RenderFirstLevelNodesMobile(Model.Nodes, linkFontWeight, linkCasing, linkFontSize, navAlignment)
</nav>

@helper RenderFirstLevelNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes, string theme, string linkFontWeight, string linkCasing, string linkFontSize)
{
	string dropdownAlignment = Model.Parameters["DropdownAlignment"] != null ? Model.Parameters["DropdownAlignment"].ToString() : string.Empty;
	string dropdownLinkHeaderFontWeight = Model.Parameters["DropdownLinkHeaderFontWeight"] != null ? Model.Parameters["DropdownLinkHeaderFontWeight"].ToString() : string.Empty;
	string dropdownLinkHeaderCasing = Model.Parameters["DropdownLinkHeaderCasing"] != null ? Model.Parameters["DropdownLinkHeaderCasing"].ToString() : string.Empty;
	string dropdownLinkHeaderFontSize = Model.Parameters["DropdownLinkHeaderFontSize"] != null ? Model.Parameters["DropdownLinkHeaderFontSize"].ToString() : string.Empty;
	string dropdownLinkFontWeight = Model.Parameters["DropdownLinkFontWeight"] != null ? Model.Parameters["DropdownLinkFontWeight"].ToString() : string.Empty;
	string dropdownLinkCasing = Model.Parameters["DropdownLinkCasing"] != null ? Model.Parameters["DropdownLinkCasing"].ToString() : string.Empty;
	string dropdownLinkFontSize = Model.Parameters["DropdownLinkFontSize"] != null ? Model.Parameters["DropdownLinkFontSize"].ToString() : string.Empty;
	string productGroupImagePlacement = Model.Parameters["ProductGroupImagePlacement"] != null ? Model.Parameters["ProductGroupImagePlacement"].ToString() : string.Empty;
	string imageAlignment = "";
	imageAlignment = dropdownAlignment == "justify-content-start text-start" && productGroupImagePlacement == "flex-row" ? "align-items-center" : imageAlignment;
	imageAlignment = dropdownAlignment == "justify-content-start text-start" && productGroupImagePlacement == "flex-row-reverse" ? "align-items-center" : imageAlignment;
	imageAlignment = dropdownAlignment == "justify-content-start text-start" && productGroupImagePlacement == "flex-column" ? "align-items-start" : imageAlignment;
	imageAlignment = dropdownAlignment == "justify-content-center text-center" && productGroupImagePlacement == "flex-row" ? "align-items-center" : imageAlignment;
	imageAlignment = dropdownAlignment == "justify-content-center text-center" && productGroupImagePlacement == "flex-row-reverse" ? "align-items-center" : imageAlignment;
	imageAlignment = dropdownAlignment == "justify-content-center text-center" && productGroupImagePlacement == "flex-column" ? "align-items-center" : imageAlignment;
	imageAlignment = dropdownAlignment == "justify-content-end text-end" && productGroupImagePlacement == "flex-row" ? "align-items-center" : imageAlignment;
	imageAlignment = dropdownAlignment == "justify-content-end text-end" && productGroupImagePlacement == "flex-row-reverse" ? "align-items-center" : imageAlignment;
	bool showProductGroupPromotionImage = Model.Parameters.ContainsKey("ShowProductGroupPromotionImage") ? Convert.ToBoolean(Model.Parameters["ShowProductGroupPromotionImage"].ToString()) : false;

	<ul class="navbar-nav">
		@foreach (var node in nodes)
		{
			var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
			var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(page);
			string submenuType = pageViewModel?.PropertyItem != null ? pageViewModel.PropertyItem.GetRawValueString("SubmenuType", "auto") : "auto";

			var hasChildren = node.Nodes.Count() > 0;
			string dropdownAttributes = hasChildren ? " role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"" : "";

			bool hasManyChildren = false;
			foreach (var subnode in node.Nodes)
			{
				if (subnode.Nodes.Any())
				{
					hasManyChildren = true;
				}
			}

			submenuType = submenuType == "auto" && hasManyChildren ? "megamenu" : submenuType;
			submenuType = submenuType == "auto" && !hasManyChildren ? "dropdown" : submenuType;
			string submenuTypeCss = submenuType == "dropdown" ? " dropdown js-dropdown" : "";
			submenuTypeCss = submenuType == "megamenu" ? " dropdown js-dropdown has-megamenu" : submenuTypeCss;

			string nodeId = !string.IsNullOrEmpty(node.GroupId) ? "Megamenu_" + node.GroupId + "_" + Pageview.CurrentParagraph.ID : "Megamenu_Page_" + node.PageId.ToString() + "_" + Pageview.CurrentParagraph.ID;
			string dataType = !string.IsNullOrEmpty(node.GroupId) ? "group" : "page";

			<li id="@(nodeId)" data-type="@dataType" class="nav-item@(node.IsActive ? " active" : "")@submenuTypeCss">
				@if (node.IsClickable)
				{
					<a class="nav-link nav-link-clean nav-link-underline @linkFontWeight @linkCasing @linkFontSize@(node.IsActive ? " active" : "")@(hasChildren ? " dropdown-toggle js-dropdown-toggle" : "")" href="@node.Link" @dropdownAttributes id="NavLink_@nodeId">
						@RenderNavigationItem(node, pageViewModel)
					</a>
				}
				else
				{
					<span class="nav-link nav-link-clean @linkFontWeight @linkCasing @linkFontSize" @dropdownAlignment>
						@RenderNavigationItem(node, pageViewModel)
					</span>
				}

				@if (hasChildren)
				{
					if (submenuType == "megamenu")
					{
						<div class="dropdown-menu megamenu py-4@(theme)" id="NavGroup@(node.PageId)">
							<div class="container-xl">
								@if (showProductGroupPromotionImage && !string.IsNullOrEmpty(node.GroupId))
								{
									<div class="grid gap-4">
										<div class="g-col-9 g-col-xxl-10">
											<div class="d-flex flex-wrap gap-3 mx-n2 @dropdownAlignment">
												@foreach (var subnode in node.Nodes)
												{
													nodeId = !string.IsNullOrEmpty(subnode.GroupId) ? "Megamenu_" + subnode.GroupId + "_" + Pageview.CurrentParagraph.ID : "GMegamenu_Page_" + subnode.PageId.ToString() + "_" + Pageview.CurrentParagraph.ID;
													dataType = !string.IsNullOrEmpty(subnode.GroupId) ? "group" : "page";

													<div class="col-4 col-xl-3 col-xxl-2">
														@if (subnode.IsClickable)
														{
															<a id="@(nodeId)" data-type="@dataType" href="@subnode.Link" class="nav-link nav-link-underline lh-sm text-break">
																@if (productGroupImagePlacement != "none")
																{
																	<div class="d-flex @productGroupImagePlacement @imageAlignment gap-3">
																		@RenderGroupImage(subnode.GetProductGroup())
																		<h6 class="m-0 w-100 @dropdownLinkHeaderFontWeight @dropdownLinkHeaderCasing @dropdownLinkHeaderFontSize">@subnode.Name</h6>
																	</div>
																}
																else
																{
																	<h6 class="m-0 @dropdownLinkHeaderFontWeight @dropdownLinkHeaderCasing @dropdownLinkHeaderFontSize">@subnode.Name</h6>
																}
															</a>
														} else { 
															<div id="@(nodeId)" data-type="@dataType" class="nav-link nav-link-underline lh-sm text-break">
																@if (productGroupImagePlacement != "none")
																{
																	<div class="d-flex @productGroupImagePlacement @imageAlignment gap-3">
																		@RenderGroupImage(subnode.GetProductGroup())
																		<h6 class="m-0 w-100 @dropdownLinkHeaderFontWeight @dropdownLinkHeaderCasing @dropdownLinkHeaderFontSize">@subnode.Name</h6>
																	</div>
																}
																else
																{
																	<h6 class="m-0 @dropdownLinkHeaderFontWeight @dropdownLinkHeaderCasing @dropdownLinkHeaderFontSize">@subnode.Name</h6>
																}
															</div>
														}

														@if (subnode.Nodes.Any())
														{
															foreach (var subsubnode in subnode.Nodes)
															{
																nodeId = !string.IsNullOrEmpty(subsubnode.GroupId) ? "Megamenu_" + subsubnode.GroupId + "_" + Pageview.CurrentParagraph.ID : "Megamenu_Page_" + subsubnode.PageId.ToString() + "_" + Pageview.CurrentParagraph.ID;
																dataType = !string.IsNullOrEmpty(subsubnode.GroupId) ? "group" : "page";

																if (subsubnode.IsClickable)
																{
																	<a class="nav-link nav-link-underline lh-sm text-break" href="@subsubnode.Link" @(subnode.IsActive ? " aria-current='page'" : "")>
																		@if (productGroupImagePlacement != "none")
																		{
																			<div class="d-flex @productGroupImagePlacement @imageAlignment gap-3">
																				@RenderGroupImage(subsubnode.GetProductGroup())
																				<span class="w-100 @dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subsubnode.Name</span>
																			</div>
																		}
																		else
																		{
																			<span class="@dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subsubnode.Name</span>
																		}
																	</a>
																} else { 
																	<div class="nav-link nav-link-underline lh-sm text-break" @(subnode.IsActive ? " aria-current='page'" : "")>
																		@if (productGroupImagePlacement != "none")
																		{
																			<div class="d-flex @productGroupImagePlacement @imageAlignment gap-3">
																				@RenderGroupImage(subsubnode.GetProductGroup())
																				<span class="w-100 @dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subsubnode.Name</span>
																			</div>
																		}
																		else
																		{
																			<span class="@dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subsubnode.Name</span>
																		}
																	</div>
																}
															}
														}
													</div>
												}
											</div>
										</div>
										<div class="g-col-3 g-col-xxl-2" id="NavGroupPromotion@(node.PageId)">
											@RenderProductGroupPromotionImage(node.GetProductGroup(), node.Link)
										</div>
									</div>
								}
								else
								{
									<div class="d-flex flex-wrap mx-n2 @dropdownAlignment">
										@foreach (var subnode in node.Nodes)
										{
											nodeId = !string.IsNullOrEmpty(subnode.GroupId) ? "Megamenu_" + subnode.GroupId + "_" + Pageview.CurrentParagraph.ID : "Megamenu_Page_" + subnode.PageId.ToString() + "_" + Pageview.CurrentParagraph.ID;
											dataType = !string.IsNullOrEmpty(subnode.GroupId) ? "group" : "page";

											<div class="col-4 col-xl-3 col-xxl-2">
												@if (subnode.IsClickable) { 
													<a id="@(nodeId)" data-type="@dataType" href="@subnode.Link" class="nav-link nav-link-underline lh-sm text-break">
														@if (productGroupImagePlacement != "none")
														{
															<div class="d-flex @productGroupImagePlacement @imageAlignment gap-3">
																@RenderGroupImage(subnode.GetProductGroup())
																<h6 class="m-0 w-100 @dropdownLinkHeaderFontWeight @dropdownLinkHeaderCasing @dropdownLinkHeaderFontSize">@subnode.Name</h6>
															</div>
														}
														else
														{
															<h6 class="m-0 @dropdownLinkHeaderFontWeight @dropdownLinkHeaderCasing @dropdownLinkHeaderFontSize">@subnode.Name</h6>
														}
													</a>
												} else { 
													<div id="@(nodeId)" data-type="@dataType" class="nav-link -sm text-break">
														@if (productGroupImagePlacement != "none")
														{
															<div class="d-flex @productGroupImagePlacement @imageAlignment gap-3">
																@RenderGroupImage(subnode.GetProductGroup())
																<h6 class="m-0 w-100 @dropdownLinkHeaderFontWeight @dropdownLinkHeaderCasing @dropdownLinkHeaderFontSize">@subnode.Name</h6>
															</div>
														}
														else
														{
															<h6 class="m-0 @dropdownLinkHeaderFontWeight @dropdownLinkHeaderCasing @dropdownLinkHeaderFontSize">@subnode.Name</h6>
														}
													</div>
												}


												@if (subnode.Nodes.Any())
												{
													foreach (var subsubnode in subnode.Nodes)
													{
														nodeId = !string.IsNullOrEmpty(subsubnode.GroupId) ? "Megamenu_" + subsubnode.GroupId + "_" + Pageview.CurrentParagraph.ID : "Megamenu_Page_" + subsubnode.PageId.ToString() + "_" + Pageview.CurrentParagraph.ID;
														dataType = !string.IsNullOrEmpty(subsubnode.GroupId) ? "group" : "page";

														if (subsubnode.IsClickable) { 
															<a id="@(nodeId)" data-type="@dataType" class="nav-link nav-link-underline lh-sm text-break" href="@subsubnode.Link" @(subnode.IsActive ? " aria-current='page'" : "")>
																@if (productGroupImagePlacement != "none")
																{
																	<div class="d-flex @productGroupImagePlacement @imageAlignment gap-3">
																		@RenderGroupImage(subsubnode.GetProductGroup())
																		<span class="w-100 @dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subsubnode.Name</span>
																	</div>
																}
																else
																{
																	<span class="@dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subsubnode.Name</span>
																}
															</a>
														} else { 
															<div id="@(nodeId)" data-type="@dataType" class="nav-link lh-sm text-break" @(subnode.IsActive ? " aria-current='page'" : "")>
																@if (productGroupImagePlacement != "none")
																{
																	<div class="d-flex @productGroupImagePlacement @imageAlignment gap-3">
																		@RenderGroupImage(subsubnode.GetProductGroup())
																		<span class="w-100 @dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subsubnode.Name</span>
																	</div>
																}
																else
																{
																	<span class="@dropdownLinkFontWeight @dropdownLinkCasing @dropdownLinkFontSize">@subsubnode.Name</span>
																}
															</div>
														}
													}
												}
											</div>
										}
									</div>
								}
							</div>
						</div>
					}
					else
					{
						string pageType = page.ItemType;

						<ul class="dropdown-menu@(theme)">
							@if (pageType == "Swift_SignIn")
							{
								if (Pageview.User == null)
								{
									<li>
										<a href="@node.Link" class="dropdown-item nav-link-underline  @linkFontWeight @linkCasing @linkFontSize" @(node.IsActive ? " aria-current='page'" : "")>@node.Name</a>
									</li>
								}
							}

							@foreach (var subnode in node.Nodes)
							{
								<li>
									<a class="dropdown-item nav-link-underline  @linkFontWeight @linkCasing @linkFontSize" href="@subnode.Link" @(node.IsActive ? " aria-current='page'" : "")>@subnode.Name</a>
								</li>
							}

							@if (pageType == "Swift_SignIn")
							{
								if (Pageview.User != null)
								{
									string link = "/Admin/Public/ExtranetLogoff.aspx?redirect=no";

									<li><hr class="dropdown-divider"></li>

									if (Pageview.User.CurrentSecondaryUser != null)
									{
										<li>
											<a href="Default.aspx?ID=@(Pageview.ID)&DwExtranetRemoveSecondaryUser=1" class="dropdown-item nav-link-underline @linkFontWeight @linkCasing @linkFontSize" @(node.IsActive ? " aria-current='page'" : "")>@Translate("Sign out as a customer")</a>
										</li>
									}
									<li>
										<a href="@link" class="dropdown-item nav-link-underline @linkFontWeight @linkCasing @linkFontSize" @(node.IsActive ? " aria-current='page'" : "")>@Translate("Sign out")</a>
									</li>
								}

							}
						</ul>
					}
				}
			</li>
		}
	</ul>
}

@helper RenderFirstLevelNodesMobile(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes, string linkFontWeight, string linkCasing, string linkFontSize, string navAlignment)
{
	<div class="navbar-nav">
		@foreach (var node in nodes)
		{
			var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
			var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(page);
			var hasChildren = node.Nodes.Count() > 0;

			if (node.IsClickable)
			{
				<a class="nav-link nav-link-clean text-nowrap @linkFontWeight @linkCasing @linkFontSize @(node.IsActive ? " active" : "")" href="@node.Link">
					@RenderNavigationItem(node, pageViewModel)
				</a>
			}
			else
			{
				<span class="nav-link nav-link-clean text-nowrap @linkFontWeight @linkCasing @linkFontSize">
					@RenderNavigationItem(node, pageViewModel)
				</span>
			}
		}
	</div>
}

@helper RenderNavigationItem(Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel node, PageInfoViewModel pageViewModel)
{
	string pageType = pageViewModel?.Item?.SystemName != null ? pageViewModel.Item.SystemName : "Swift_Page";
	string linkFontSize = Model.Parameters["LinkFontSize"].ToString();
	string layout = Model?.Parameters["Layout"].ToString();
	string icon = pageViewModel?.PropertyItem != null ? pageViewModel.PropertyItem.GetRawValueString("Icon", "") : "";
	string iconSize = "icon-3";

	if (linkFontSize == "fs-7")
	{
		iconSize = "icon-2";
	}
	if (linkFontSize == "fs-5")
	{
		iconSize = "icon-4";
	}

	if (pageType == "Swift_Cart")
	{
		double totalProducts = 0;

		if (Dynamicweb.Ecommerce.Common.Context.Cart != null)
		{
			totalProducts = Dynamicweb.Ecommerce.Common.Context.Cart.GetParentProductLineQuantityCount(Dynamicweb.Ecommerce.Common.Context.Cart.OrderLines);
		}

		switch (layout)
		{
			case "linksOnly":
				<span class="align-middle">@node.Name</span>
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
				break;
			case "iconsOnly":
				@RenderIcon(icon, iconSize)
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
				break;
			case "iconsAndLinks":
				@RenderIcon(icon, iconSize)
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
				<span class="align-middle">@node.Name</span>
				break;
			case "linksAndIcons":
				<span class="align-middle">@node.Name</span>
				<span class="js-cart-qty mini-cart-quantity align-middle">(@totalProducts)</span>
				@RenderIcon(icon, iconSize)
				break;
		}
	}
	else
	{
		switch (layout)
		{
			case "linksOnly":
				<span class="align-middle">@node.Name</span>
				break;

			case "iconsOnly":
				@RenderIcon(icon, iconSize)
				break;
			case "iconsAndLinks":
				@RenderIcon(icon, iconSize)
				<span class="align-middle">@node.Name</span>
				break;
			case "linksAndIcons":
				<span class="align-middle">@node.Name</span>
				@RenderIcon(icon, iconSize)
				break;
		}
	}
}

@helper RenderIcon(string icon, string iconSize)
{
	if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none"))
	{
		string iconPath = Dynamicweb.Context.Current.Server.MapPath(icon);

		<span class="@iconSize">
			@ReadFile(iconPath)
		</span>
	}
}


@helper RenderProductGroupPromotionImage(ProductGroupViewModel group, string link)
{
	IList<FieldValueViewModel> groupFields = group.GroupFields != null ? group.GroupFields : null;

	if (groupFields != null)
	{
		var groupName = group.Name;
		string ratio = Model.Parameters["ImageAspectRatio"].ToString();
		ratio = ratio != "0" ? ratio : string.Empty;
		string ratioCssClass = ratio != string.Empty ? " ratio" : "";
		string ratioVariable = ratio != "" ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : string.Empty;
		string productGroupPromotionImage = string.Empty;
		string productGroupPromotionImagePath = string.Empty;
		string productGroupPromotionDescription = string.Empty;
		string productGroupPromotionLinkLabel = string.Empty;
		string productGroupPromotionLink = string.Empty;
		string productGroupPromotionImageTheme = Model.Parameters.ContainsKey("ProductGroupPromotionImageTheme") ? Model.Parameters["ProductGroupPromotionImageTheme"].ToString().ToLower() : string.Empty;
		string gridGap = !string.IsNullOrEmpty(productGroupPromotionImageTheme) ? "gap-0" : "gap-3";
		string themePadding = !string.IsNullOrEmpty(productGroupPromotionImageTheme) ? "p-3" : "p-0";

		foreach (FieldValueViewModel field in groupFields)
		{
			if (field.SystemName == "ProductGroupPromotionImage")
			{
				productGroupPromotionImage = field.Value != null ? field.Value.ToString() : string.Empty;
				productGroupPromotionImagePath = "/Admin/Public/GetImage.ashx?Width=" + 480 + "&crop=0&image=" + "Files/Images/" + productGroupPromotionImage;
			}
			if (field.SystemName == "ProductGroupPromotionDescription")
			{
				productGroupPromotionDescription = field.Value != null ? field.Value.ToString() : string.Empty;
			}
			if (field.SystemName == "ProductGroupPromotionLinkLabel")
			{
				productGroupPromotionLinkLabel = field.Value != null ? field.Value.ToString() : string.Empty;
			}
			if (field.SystemName == "ProductGroupPromotionLink")
			{
				productGroupPromotionLink = field.Value != null ? field.Value.ToString() : string.Empty;
			}
		}

		<div class="grid grid-1 @gridGap@(productGroupPromotionImageTheme)">
			@if (productGroupPromotionImage != string.Empty)
			{
				productGroupPromotionLink = !string.IsNullOrEmpty(productGroupPromotionLink) ? productGroupPromotionLink : link;

				<a href="@productGroupPromotionLink" title="@groupName" id="NavGroupPromotionLink@(group.Id)">
					<figure class="m-0@(ratioCssClass)" @ratioVariable>
						<img class="img-fluid" src="@productGroupPromotionImagePath" alt="@groupName" style="object-fit:cover">
					</figure>
				</a>
			}
			@if (!string.IsNullOrEmpty(productGroupPromotionDescription) || !string.IsNullOrEmpty(productGroupPromotionLinkLabel))
			{
				<div class="grid grid-1 @themePadding ">

					@if (!string.IsNullOrEmpty(productGroupPromotionDescription))
					{
						<h6 class="m-0">@productGroupPromotionDescription</h6>
					}
					@if (!string.IsNullOrEmpty(productGroupPromotionLinkLabel))
					{
						productGroupPromotionLink = !string.IsNullOrEmpty(productGroupPromotionLink) ? productGroupPromotionLink : link;

						<a href="@productGroupPromotionLink" title="@productGroupPromotionLinkLabel" class="btn btn-link text-start border-0 p-0" id="NavGroupPromotionLink@(group.Id)">@productGroupPromotionLinkLabel</a>
					}
				</div>
			}
		</div>
	}
}

@helper RenderGroupImage(ProductGroupViewModel group)
{
	IList<FieldValueViewModel> groupFields = group.GroupFields;

	if (groupFields != null)
	{
		foreach (FieldValueViewModel field in groupFields)
		{
			if (field.SystemName == "ProductGroupNavigationImage")
			{
				if (!string.IsNullOrEmpty(field.Value.ToString()))
				{
					string productGroupImageShape = Model.Parameters["ProductGroupImageShape"] != null ? Model.Parameters["ProductGroupImageShape"].ToString() : string.Empty;
					string productGroupImageSize = Model.Parameters["ProductGroupImageSize"] != null ? Model.Parameters["ProductGroupImageSize"].ToString() : string.Empty;
					string ratio = productGroupImageSize.Contains("%") ? Model.Parameters["ProductGroupImageSize"].ToString() : string.Empty;
					string ratioCssClass = ratio != string.Empty ? "ratio" : string.Empty;
					string ratioVariable = ratio != "" ? "--bs-aspect-ratio: " + ratio : string.Empty;
					var groupImage = field.Value.ToString();
					var groupName = group.Name;

					if (Path.GetExtension(groupImage).ToLower() == ".svg")
					{
						if (!string.IsNullOrEmpty(ratio))
						{
							<div class="@(ratioCssClass)" style="@ratioVariable">
								@ReadFile("/Files/Images/" + groupImage)
							</div>
						}
						else
						{
							<div class="icon-auto" style="height: @(productGroupImageSize)px; width: @(productGroupImageSize)px;">
								@ReadFile("/Files/Images/" + groupImage)
							</div>
						}

					}
					else
					{
						if (!string.IsNullOrEmpty(ratio))
						{
							var imagePath = "/Admin/Public/GetImage.ashx?Image=" + "/Files/Images/" + groupImage + "&Width=640&crop=0";

							<figure class="@(ratioCssClass) m-0" style="@ratioVariable">
								<img loading="lazy" class="@productGroupImageShape" alt="@groupName" src="@imagePath" style="object-fit: cover">
							</figure>

						}
						else
						{
							var imagePath = "/Admin/Public/GetImage.ashx?Image=" + "/Files/Images/" + groupImage + "&Width=" + productGroupImageSize + "&Height=" + productGroupImageSize + "&crop=0";

							<img loading="lazy" class="@productGroupImageShape" alt="@groupName" width="@productGroupImageSize" height="@productGroupImageSize" src="@imagePath">
						}
					}
				}
			}
		}
	}
}
