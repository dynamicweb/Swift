
@{

bool userHasDefaultAddress = false;
bool userAddressSelected = false;
List<LoopItem> userAddressLoop = GetLoop("UserManagement:User.UserAddresses");
foreach (LoopItem userAddress in userAddressLoop)
{
if (userAddress.GetBoolean("UserManagement:User.UserAddress.Default"))
{
userHasDefaultAddress = true;
}
if (userAddress.GetBoolean("UserManagement:User.UserAddress.SelectedForDeliveryFields"))
{
userAddressSelected = true;
}
}
bool hideEditShippingAddress = Pageview.CurrentParagraph?.Item["HideEditShippingAddress"] != null ? Convert.ToBoolean(Pageview.CurrentParagraph.Item["HideEditShippingAddress"].ToString()) : false;

string userAccountPageLink = Pageview.CurrentParagraph.Item["UserAccountPageLink"] != null ? Pageview.CurrentParagraph.Item["UserAccountPageLink"].ToString() + "&GoBackToPage=" + Pageview.Page.ID : "";
string userAddressesPage = Pageview.CurrentParagraph.Item["UserAddressesPageLink"] != null ? Pageview.CurrentParagraph.Item["UserAddressesPageLink"].ToString() + "&GoBackToPage=" + Pageview.Page.ID : "";
string userId = GetString("UserManagement:User.UserAddress.ID");

string userSelectedAddressID = GetString("Ecom:Order:CustomerAddressId");
bool useBillingIsChecked = false; //String.Equals(userId, userSelectedAddressID) || !userHasDefaultAddress && String.Equals(userId, userSelectedAddressID);
string disabledHiddenUser = String.Equals(userId, userSelectedAddressID) || !userHasDefaultAddress && String.Equals(userId, userSelectedAddressID) ? string.Empty : "disabled";

}

@if (userAddressLoop is null || !userAddressLoop.Any())
{
Include("TSD_OrderCustomerAddressInputFieldsComponent.cshtml");
}
else
{

<div class="mt-4">
	<div class="d-flex justify-content-between mb-3">
		<h2 class="">@Translate("Billing address")</h2>
		@if (!hideEditShippingAddress)
		{
		<a href="@userAddressesPage" class="m-0 h6 fw-normal d-none d-md-block"
		   id="ManageAddressesButton">@Translate("Manage your addresses")</a>
		}
	</div>
</div>

<div class="list-group" id="SelectDeliveryAddressGroup">

	@foreach (LoopItem userAddress in userAddressLoop)
	{
	string addressId = userAddress.GetString("UserManagement:User.UserAddress.ID");

	List<string> userAddressList = new List<string>();
	if (!string.IsNullOrEmpty(userAddress.GetString("UserManagement:User.UserAddress.Address")))
	{
	userAddressList.Add(userAddress.GetString("UserManagement:User.UserAddress.Address"));
	}
	if (!string.IsNullOrEmpty(userAddress.GetString("UserManagement:User.UserAddress.Address2")))
	{
	userAddressList.Add(userAddress.GetString("UserManagement:User.UserAddress.Address2"));
	}
	if (!string.IsNullOrEmpty(userAddress.GetString("UserManagement:User.UserAddress.Zip")))
	{
	userAddressList.Add(userAddress.GetString("UserManagement:User.UserAddress.Zip"));
	}
	if (!string.IsNullOrEmpty(userAddress.GetString("UserManagement:User.UserAddress.City")))
	{
	userAddressList.Add(userAddress.GetString("UserManagement:User.UserAddress.City"));
	}
	if (!string.IsNullOrEmpty(userAddress.GetString("UserManagement:User.UserAddress.State")))
	{
	var countryCode = userAddress.GetString("UserManagement:User.UserAddress.CountryCode");
	string stateName = Dynamicweb.Ecommerce.Services.Countries.GetRegion(countryCode, GetString("UserManagement:User.UserAddress.State"))?.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) ?? string.Empty;

	userAddressList.Add(stateName);
	}
	if (!string.IsNullOrEmpty(userAddress.GetString("UserManagement:User.UserAddress.Culture.CountryName")))
	{
	userAddressList.Add(userAddress.GetString("UserManagement:User.UserAddress.Culture.CountryName"));
	}

	string userAddressLabelString = (string.Join(", ", userAddressList.Select(x => x.ToString()).ToArray()));

	bool isChecked = String.Equals(addressId, userSelectedAddressID) && userAddress.GetBoolean("UserManagement:User.UserAddress.SelectedForDeliveryFields") || userHasDefaultAddress && userAddress.GetBoolean("UserManagement:User.UserAddress.Default") ;
	string disabledHidden = String.Equals(addressId, userSelectedAddressID) && userAddress.GetBoolean("UserManagement:User.UserAddress.SelectedForDeliveryFields") || userHasDefaultAddress && userAddress.GetBoolean("UserManagement:User.UserAddress.Default") ? string.Empty : "disabled";


	<div class="row">
		<div class="col d-flex flex-row justify-content-start align-items-center py-2 radioContainer">
			<label class="custom-radio">
				<input class="form-check-input custom-radio-input" type="radio"
				       name="EcomOrderCustomerSelectedAddressId" id="EcomOrderCustomerSelectedAddressId_@addressId"
				       value="@addressId" @(isChecked ? "checked=\"checked\"" : "")
				       onclick="useUserAddress(@addressId)">
				<span class="custom-radio-button"></span>
			</label>

			<label class="form-check-label lh-1 px-3 pb-1 text-label-black" for="EcomOrderCustomerSelectedAddressId">
				@userAddressLabelString
			</label>
		</div>
		<input class="hidden-customer-field" disabled="@(!isChecked)" data-address-id="@addressId" type="hidden"
		       name="EcomOrderCustomerCompany"
		       value="@userAddress.GetString("UserManagement:User.UserAddress.Company")">
		<input class="hidden-customer-field" disabled="@(!isChecked)" data-address-id="@addressId" type="hidden"
		       name="EcomOrderCustomerName"
		       value="@($"{GetString("UserManagement:User.FirstName")} {GetString("UserManagement:User.LastName")}")">
		<input class="hidden-customer-field" disabled="@(!isChecked)" data-address-id="@addressId" type="hidden"
		       name="EcomOrderCustomerAddress"
		       value="@userAddress.GetString("UserManagement:User.UserAddress.Address")">
		<input class="hidden-customer-field" disabled="@(!isChecked)" data-address-id="@addressId" type="hidden"
		       name="EcomOrderCustomerAddress2"
		       value="@userAddress.GetString("UserManagement:User.UserAddress.Address2")">
		<input class="hidden-customer-field" disabled="@(!isChecked)" data-address-id="@addressId" type="hidden"
		       name="EcomOrderCustomerCity" value="@userAddress.GetString("UserManagement:User.UserAddress.City")">
		<input class="hidden-customer-field" disabled="@(!isChecked)" data-address-id="@addressId" type="hidden"
		       name="EcomOrderCustomerZip" value="@userAddress.GetString("UserManagement:User.UserAddress.Zip")">
		<input class="hidden-customer-field" disabled="@(!isChecked)" data-address-id="@addressId" type="hidden"
		       name="EcomOrderCustomerCountryCode"
		       value="@userAddress.GetString("UserManagement:User.UserAddress.CountryCode")">
		<input class="hidden-customer-field" disabled="@(!isChecked)" data-address-id="@addressId" type="hidden"
		       name="EcomOrderCustomerState" value="@userAddress.GetString("UserManagement:User.UserAddress.State")">
	</div>

	}

	<div class="row">
		<div class="col d-flex flex-row justify-content-start align-items-center py-2 radioContainer">
			<label class="custom-radio">
				<input class="form-check-input custom-radio-input" type="radio"
				       name="EcomOrderCustomerSelectedAddressId"
				       id="EcomOrderCustomerSelectedAddressId_@GetString("UserManagement:User.UserAddress.ID")"
				       value="@userId"
				       @(useBillingIsChecked ? "checked=\"checked\"" : "") onclick="useBillingAddress()">
				<span class="custom-radio-button"></span>
			</label>
			<input type="hidden" @disabledHiddenUser name="UserManagementUserSelectedAddress" value="@userId"/>
			<label class="form-check-label lh-1 px-3 pb-1 text-label-black" for="EcomOrderCustomerSelectedAddressId">
				@Translate("Add new")
			</label>
		</div>
	</div>


	@Include("TSD_OrderCustomerAddressInputFieldsComponent.cshtml")

</div>
}


<script>
	document.querySelectorAll('.radioContainer').forEach(container => {
		container.addEventListener('click', e => {
			if (e.target.type !== "radio") {
				let radioButton = container.querySelector('input[type="radio"]');
			}
		});
	});

	function useBillingAddress() {
		let container = document.getElementById("add-new-address-container")

		document.querySelectorAll("input[name^='EcomOrderCustomer']").forEach(function (field) {
			
				if (field.type !== 'radio') {

					field.setAttribute("type", "hidden");
					field.setAttribute("disabled", "true");
				}
			
			});
		
		container.style.display = 'block';
		
		container.querySelectorAll("input").forEach(function (field) {
			field.removeAttribute("disabled");
			field.setAttribute("type", "text");
			let initialValue = field.value;
			field.addEventListener('blur', async function () {
				if (field.value != initialValue) {
					console.log('Value has been changed');
					await FormSubmissionHelper.SubmitNonRefreshingFormUpdate();

					// Update initial value
					initialValue = field.value;
				}
			});
		});

	}

	async function useUserAddress(addressId) {
		let container = document.getElementById("add-new-address-container")
		container.style.display = 'none';
		let matchingElements = [];

		document.querySelectorAll("input[name^='EcomOrderCustomer']").forEach(function (field) {
			if (field.dataset.addressId === addressId) {
				field.setAttribute("disabled", "false");
				field.setAttribute("type", "text");
			} else {
				
				if (field.type !== 'radio') {
			
					field.setAttribute("type", "hidden");
					field.setAttribute("disabled", "true");
				}

			}


		});

	


		await FormSubmissionHelper.SubmitNonRefreshingFormUpdate()
	}


	(async () => {
		console.log('initial submit')
		// await FormSubmissionHelper.SubmitNonRefreshingFormUpdate()
	})();


</script>


<style>
	#add-new-address-container {
		display: none;

	}

	.container-no-padding {
		margin: 0;
		padding: 0;
		max-width: 100%;
	}

	h2 {
		font-size: 28px;
	}

</style>
