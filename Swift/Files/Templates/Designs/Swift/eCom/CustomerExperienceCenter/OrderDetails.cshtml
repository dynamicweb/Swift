@inherits ViewModelTemplate<OrderViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.Frontend
@using Dynamicweb.Ecommerce.Orders

@{ 
	string contentPadding = Pageview.CurrentParagraph.Item["ContentPadding"] != null ? Pageview.CurrentParagraph.Item["ContentPadding"].ToString() : "";
	contentPadding = contentPadding == "none" ? "px-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;
	var themeRaw = Pageview.CurrentParagraph.Item["Theme"]?.ToString();
	string theme = !string.IsNullOrEmpty(themeRaw) ? " h-100 theme " + themeRaw.Replace(" ", "").Trim().ToLower() : "";
	string ordersPageLink = Pageview.CurrentParagraph.Item["OrdersPage"] != null ? Pageview.CurrentParagraph.Item["OrdersPage"].ToString() : "";

	string showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
	bool neverShowVat = string.IsNullOrEmpty(showPricesWithVat);

	string badgeColor = "bg-dark text-white";

	if (Model.StateId == "OS2")
	{
		badgeColor = "bg-success text-white";
	}
	else if (Model.StateId == "OS3")
	{
		badgeColor = "bg-danger text-white";
	}
}

<div class="@(contentPadding)@(theme)">
	<header class="p-3 border-bottom">
		<div class="d-flex flex-row align-items-center gap-3">
			<h1 class="h6 m-0 flex-fill text-muted">@Translate("Your order")</h1>
			<button onclick="javascript:print()" class="btn btn-link p-0">Print</button>
		</div>
	</header>

	<table class="table d-print-table">
		@if (!string.IsNullOrEmpty(Model.Id))
		{
			<tr>
				<td class="">@Translate("Order number")</td>
				<td class="text-end">
					@if (!string.IsNullOrEmpty(Model.IntegrationOrderId))
					{
						<text>@Model.IntegrationOrderId (@Model.Id)</text>
					}
					else
					{
						@Model.Id
					}
				</td>
			</tr>
		}

		@if (!string.IsNullOrEmpty(Model.CompletedDate.ToString()))
		{
			<tr>
				<td>@Translate("Order date")</td>
				<td class="text-end">@Model.CompletedDate.ToString()</td>
			</tr>
		}

		@if (!string.IsNullOrEmpty(Model.StateName))
		{
			<tr>
				<td>@Translate("Order state")</td>
				<td class="text-end">
					<div class="badge opacity-75 @badgeColor">@Model.StateName</div>
				</td>
			</tr>
		}

		<tr>
			<td>@Translate("Delivery address")</td>
			<td class="text-end">
				@if (!string.IsNullOrEmpty(Model.DeliveryName))
				{
					<div>@Model.DeliveryName</div>
				}
				@if (!string.IsNullOrEmpty(Model.DeliveryAddress))
				{
					<div>@Model.DeliveryAddress</div>
				}
				@if (!string.IsNullOrEmpty(Model.DeliveryAddress2))
				{
					<div>@Model.DeliveryAddress2</div>
				}

				<div>
					@if (!string.IsNullOrEmpty(Model.DeliveryZip))
					{
						<span>@Model.DeliveryZip</span>
					}
					@if (!string.IsNullOrEmpty(Model.DeliveryCity))
					{
						<span>@Model.DeliveryCity</span>
					}
				</div>

				<div>
					@if (!string.IsNullOrEmpty(Model.DeliveryRegion))
					{
						<span>@Model.DeliveryRegion</span>
					}
					@if (!string.IsNullOrEmpty(Model.DeliveryCountry))
					{
						<span>@Model.DeliveryCountry</span>
					}
				</div>

				@if (!string.IsNullOrEmpty(Model.DeliveryEmail))
				{
					<div>@Model.DeliveryEmail</div>
				}
				@if (!string.IsNullOrEmpty(Model.DeliveryPhone))
				{
					<div>@Model.DeliveryPhone</div>
				}
			</td>
		</tr>

		<tr>
			<td>@Translate("Billing address")</td>
			<td class="text-end">
				@if (!string.IsNullOrEmpty(Model.CustomerName))
				{
					<div>@Model.CustomerName</div>
				}
				@if (!string.IsNullOrEmpty(Model.CustomerAddress))
				{
					<div>@Model.CustomerAddress</div>
				}
				@if (!string.IsNullOrEmpty(Model.CustomerAddress2))
				{
					<div>@Model.CustomerAddress2</div>
				}

				<div>
					@if (!string.IsNullOrEmpty(Model.CustomerZip))
					{
						<span>@Model.CustomerZip</span>
					}
					@if (!string.IsNullOrEmpty(Model.CustomerCity))
					{
						<span>@Model.CustomerCity</span>
					}
				</div>

				<div>
					@if (!string.IsNullOrEmpty(Model.CustomerRegion))
					{
						<span>@Model.CustomerRegion</span>
					}
					@if (!string.IsNullOrEmpty(Model.CustomerCountry))
					{
						<span>@Model.CustomerCountry</span>
					}
				</div>

				@if (!string.IsNullOrEmpty(Model.CustomerEmail))
				{
					<div>@Model.CustomerEmail</div>
				}
				@if (!string.IsNullOrEmpty(Model.CustomerPhone))
				{
					<div>@Model.CustomerPhone</div>
				}
			</td>
		</tr>

		@if (Model.ShippingMethod != null)
		{
			<tr>
				<td>@Translate("Delivery method")</td>
				<td class="text-end">
					@if (!string.IsNullOrEmpty(Model.ShippingMethod.Name))
					{
						@Model.ShippingMethod.Name
					}
				</td>
			</tr>
		}

		@if (Model.ShippingDate != null)
		{
			<tr>
				<td>@Translate("Delivery date")</td>
				<td class="text-end">
					@if (Model.ShippingDate.HasValue)
					{
						@Model.ShippingDate.Value.ToShortDateString()
					}
				</td>
			</tr>
		}

		@if (Model.PaymentMethod != null)
		{
			<tr>
				<td>@Translate("Payment method")</td>
				<td class="text-end">
					@if (!string.IsNullOrEmpty(Model.PaymentMethod.Name))
					{
						<span>@Model.PaymentMethod.Name</span>
						if (!string.IsNullOrEmpty(Model.TransactionCardType))
						{
							<span>@Model.TransactionNumber</span>
						}
					}
				</td>
			</tr>
		}

		@if (!string.IsNullOrEmpty(Model.CustomerComment))
		{
			<tr>
				<td colspan="2">
					<div class="mb-2">@Translate("Comments")</div>
					<div>@Model.CustomerComment</div>
				</td>
			</tr>
		}

		@if (!string.IsNullOrEmpty(Model.Reference))
		{
			<tr>
				<td>@Translate("Order reference")</td>
				<td class="text-end">
					@Model.Reference
				</td>
			</tr>
		}

		@if (!string.IsNullOrEmpty(Model.VoucherCode))
		{
			<tr>
				<td>@Translate("Voucher code")</td>
				<td class="text-end">
					@Model.VoucherCode
				</td>
			</tr>
		}

		@if (!string.IsNullOrEmpty(Model.TrackAndTraceNumber) || !string.IsNullOrEmpty(Model.TrackAndTraceURL))
		{
			string label = Model.TrackAndTraceName;
			label += !string.IsNullOrEmpty(Model.TrackAndTraceNumber) ? ": " + Model.TrackAndTraceNumber : "";

			<tr>
				<td>@Translate("Track and trace")</td>
				<td class="text-end">
					@if (!string.IsNullOrEmpty(Model.TrackAndTraceURL))
					{
						<a href="@Model.TrackAndTraceURL" title="@Model.TrackAndTraceName">@label</a>
					}
					else
					{
						@label
					}
				</td>
			</tr>
		}
	</table>

	<section class="p-3 mt-3 d-flex flex-column gap-3">
		@foreach (OrderLineViewModel orderline in Model.OrderLines)
		{
			string productName = orderline.ProductName + " " + orderline.ProductVariantId;
			string productImage = "/Admin/Public/GetImage.ashx?image=" + orderline.ProductImage + "&width=210&height=210&Format=WebP&Quality=100";
			string productPriceTotalWithDiscounts = orderline.Price.PriceFormatted;

			var orderlineQuantity = orderline.Quantity;
			var productId = orderline.ProductId;
			var variantId = orderline.ProductVariantId;

			string link = "Default.aspx?ID=" + GetPageIdByNavigationTag("Shop");
			link += $"&GroupID={orderline.PrimaryOrDefaultGroup.Id}";
			link += $"&ProductID={orderline.ProductId}";
			link += !string.IsNullOrEmpty(orderline.ProductVariantId) ? $"&VariantID={orderline.ProductVariantId}" : "";
			link = Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(link);

			OrderLineType orderlineType = orderline.OrderLineType;

			if (orderlineType == OrderLineType.Product || orderlineType == OrderLineType.GiftCard || orderlineType == OrderLineType.Fixed)
			{
				<article class="grid">
					<div class="g-col-3">
						<a href="@link" class="ratio ratio-1x1 d-block bg-light">
							<img src="@productImage" style="object-fit: contain;" alt="@productName" height="210" width="210">
						</a>
					</div>

					<div class="g-col-9">
						<div class="grid grid-9 h-100">

							<div class="g-col-9 g-col-md-5">
								<h2 class="h6 mb-3 fw-bold">
									<a href="@link" class="text-dark text-decoration-none">@productName</a>
								</h2>

								<ul class="list-unstyled text-muted mb-0">
									@if (!string.IsNullOrEmpty(orderline.ProductVariantName))
									{
										<li>
											<span>@orderline.ProductVariantName</span>
										</li>
									}
									<li>
										<span>@Translate("Price"):</span>
										@if (orderline.UnitPrice.Price != orderline.UnitPriceBeforeDiscount.Price && orderline.UnitPriceBeforeDiscount.Price != 0.0)
										{
											<span class="text-decoration-line-through text-muted">
												<span>@orderline.UnitPriceBeforeDiscount.PriceFormatted</span>
											</span>
										}
										<span>@orderline.UnitPrice.PriceFormatted</span>

									</li>
									<li>
										<span>@Translate("Quantity"):</span>
										<span>@orderlineQuantity</span>
									</li>
								</ul>
							</div>

							<div class="g-col-9 g-col-md-4 text-end">
								<h6 class="h6 fw-bold m-0">
									<span class="text-price">@productPriceTotalWithDiscounts</span>
								</h6>
								@if (!string.IsNullOrEmpty(productPriceTotalWithDiscounts) && orderline.TotalDiscount.Price != 0.0)
								{
									<small class="fs-7">
										@orderline.TotalDiscount.PriceFormatted
									</small>
								}
							</div>
						</div>
					</div>

				</article>
			}
		}

		@{
			double totalTaxes = Model.OrderLines.Where(o => o.OrderLineType == OrderLineType.Tax).Sum(o => o.Price.Price);
			double priceBeforeFeesDiscountAndTaxes = Model.PriceBeforeFees.Price - Model.TotalDiscount.Price - totalTaxes;
			string priceBeforeFeesDiscountAndTaxesFormatted = Dynamicweb.Ecommerce.Services.Currencies.Format(Dynamicweb.Ecommerce.Common.Context.Currency, priceBeforeFeesDiscountAndTaxes, true);
			string orderSubtotal = totalTaxes != 0 || Model.TotalDiscount.Price != 0 ? priceBeforeFeesDiscountAndTaxesFormatted : Model.PriceBeforeFees.PriceFormatted;
			string shippingFee = Model.ShippingFee.PriceFormatted;
			string orderTotalDiscount = Model.TotalDiscount.PriceFormatted;

			// Discounts
			bool orderHasDiscounts = false;
			if (!string.IsNullOrEmpty(orderTotalDiscount))
			{
				orderHasDiscounts = true;
			}

			<div class="cart-total grid mt-3">
				<div class="g-col-12">
					<dl class="m-0">

						<div class="d-flex my-1 pt-4 border-dark border-top">
						<dt class="flex-fill fw-bold">@Translate("Subtotal")</dt>
						<dd class="flex-fill mb-0 text-end">
							<span class="text-price fw-bold">@orderSubtotal</span>
							@if (!neverShowVat && showPricesWithVat == "false")
							{
								<span class="fs-7 fw-normal d-block">@Translate("Excl. VAT")</span>
							}
							@if (!neverShowVat && showPricesWithVat == "true")
							{
								<span class="fs-7 fw-normal d-block">@Translate("Incl. VAT")</span>
							}
						</dd>
				</div>

				@* Discounts (only order discounts) *@
				@foreach (OrderLineViewModel orderline in Model.OrderLines)
				{
					OrderLineType orderlineType = orderline.OrderLineType;

					if (orderlineType == OrderLineType.Discount)
					{
						<div class="d-flex my-1">
							<dt class="flex-fill fw-normal">@orderline.ProductName</dt>
							<dd class="flex-fill mb-0 text-end">
								@orderline.Price.PriceFormatted
							</dd>
						</div>
					}
				}

				@* Delivery *@
				@if (!string.IsNullOrEmpty(shippingFee) && Model.ShippingFee.Price != 0.0) 
				{
					<div class="d-flex my-1">
						<dt class="flex-fill fw-normal">@Translate("Delivery")</dt>
						<dd class="flex-fill mb-0 text-end">
							<span>@shippingFee</span>
						</dd>
					</div>
				}

				@* Payment *@
				@if (Model.PaymentFee.Price != 0.0)
				{
					<div class="d-flex my-1">
						<dt class="flex-fill fw-normal">@Translate("Payment")</dt>
						<dd class="flex-fill mb-0 text-end">
							<span>@Model.PaymentFee.PriceFormatted</span>
						</dd>
					</div>
				}
				
				@* Taxes *@
				@if (totalTaxes != 0.0)
                {
                    <div class="d-flex my-1">
                        <dt class="flex-fill fw-normal">@Translate("Sales tax")</dt>
                        <dd class="flex-fill mb-0 text-end">
                            <span>@Dynamicweb.Ecommerce.Services.Currencies.Format(Dynamicweb.Ecommerce.Common.Context.Currency, totalTaxes, true)</span>
                        </dd>
                    </div>
                }

				<div class="my-4 border-dark border-top"></div>

				<div class="d-flex my-1 h5 fw-bold">
					<dt class="flex-fill">@Translate("Total")</dt>
					<dd class="flex-fill mb-0 text-end">
						<span>@Model.Price.PriceFormatted</span>
						@if (!neverShowVat && showPricesWithVat == "false")
						{
							<span class="fs-7 fw-normal d-block">@Translate("Excl. VAT")</span>
						}
						@if (!neverShowVat && showPricesWithVat == "true")
						{
							<span class="fs-7 fw-normal d-block">@Translate("Incl. VAT")</span>
						}
					</dd>
				</div>

				@if (!neverShowVat && Model.Price.Vat != 0.0)
				{
					<div class="d-flex my-1">
						<dt class="flex-fill fw-normal">@Translate("VAT")</dt>
						<dd class="flex-fill mb-0 text-end">
							@if (!string.IsNullOrEmpty(Model.Price.VatFormatted))
							{
								<span>@Model.Price.VatFormatted</span>
							}
						</dd>
					</div>

					if (showPricesWithVat == "false")
					{
						<div class="d-flex my-1">
							<dt class="flex-fill fw-normal">@Translate("Total incl. VAT")</dt>
							<dd class="flex-fill mb-0 text-end">
								@if (!string.IsNullOrEmpty(Model.Price.PriceWithVatFormatted))
								{
									<span>@Model.Price.PriceWithVatFormatted</span>
								}
							</dd>
						</div>
					}
				}

				@if (orderHasDiscounts && Model.TotalDiscount.Price != 0.0)
				{
					<div class="d-flex my-1">
						<dt class="flex-fill fw-normal">@Translate("Discount")</dt>
						<dd class="flex-fill mb-0 text-end">
							<span>@orderTotalDiscount</span>
						</dd>
					</div>
				}
				</dl>
			</div>
		</div>
	}
	</section>
</div>
