@using Dynamicweb.Ecommerce.Frontend
@using System.Collections.Generic
@using System.Linq
@using System.Text
@using System.Text.RegularExpressions
@using Dynamicweb.Ecommerce.International


@functions {
	public string RenderCustomerAddress(OrderViewModel model)
	{
		List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(model?.CustomerCountryCode);
		string regionName = Dynamicweb.Ecommerce.Services.Countries.GetRegion(model?.CustomerCountryCode, model?.CustomerRegion)?.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) ?? string.Empty;

			var htmlContent = new StringBuilder();

		foreach (List<string> addressLine in addressFormat)
		{
			for (var i = 0; i < addressLine.Count; i++)
			{
				addressLine[i] = Regex.Replace(addressLine[i], "{name}", model?.CustomerName ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", model?.CustomerFirstName  ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", model?.CustomerSurname ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{company}", model?.CustomerCompany ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address}", model?.CustomerAddress ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address1}", model?.CustomerAddress ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address2}", model?.CustomerAddress2 ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{zip}", model?.CustomerZip ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{city}", model?.CustomerCity ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", model?.CustomerRegion ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{region}", regionName ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", model?.CustomerCountryCode ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{country}", model?.CustomerCountry ?? string.Empty, RegexOptions.IgnoreCase);

				// Remove any bad placeholders the user may have submitted
				addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
			}
			var completeLine = string.Join(string.Empty, addressLine.ToArray());
			if (!string.IsNullOrWhiteSpace(completeLine))
			{
				htmlContent.Append($"<div>{completeLine}</div>");
			}
		}

		return htmlContent.ToString();
	}

	public string RenderDeliveryAddress(OrderViewModel model)
	{
		List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(model?.DeliveryCountryCode);
		string regionName = Dynamicweb.Ecommerce.Services.Countries.GetRegion(model?.DeliveryCountryCode, model?.DeliveryRegion)?.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) ?? string.Empty;

		var result = new StringBuilder();

		foreach (List<string> addressLine in addressFormat)
		{
			for (var i = 0; i < addressLine.Count; i++)
			{
				addressLine[i] = Regex.Replace(addressLine[i], "{name}", model?.DeliveryName ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", model?.DeliveryFirstName ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", model?.DeliverySurname ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{company}", model?.DeliveryCompany ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address}", model?.DeliveryAddress ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address1}", model?.DeliveryAddress ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address2}", model?.DeliveryAddress2 ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{zip}", model?.DeliveryZip ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{city}", model?.DeliveryCity ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", model?.DeliveryRegion ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{region}", regionName ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", model?.DeliveryCountryCode ?? string.Empty, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{country}", model?.DeliveryCountry ?? string.Empty, RegexOptions.IgnoreCase);

				// Remove any bad placeholders the user may have submitted
				addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
			}
			var completeLine = string.Join(string.Empty, addressLine.ToArray());
			if (!string.IsNullOrWhiteSpace(completeLine))
			{
				result.Append($"<div>{completeLine}</div>");
			}
		}

		return result.ToString();
	}
}
