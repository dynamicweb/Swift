@inherits ViewModelTemplate<FavoriteListViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.Frontend
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.CustomerExperienceCenter.Favorites

@functions
{
	bool isLazyLoadingForProductInfoEnabled = Dynamicweb.Ecommerce.DynamicwebLiveIntegration.TemplatesHelper.IsLazyLoadingForProductInfoEnabled;
	string liveInfoClass = "";
	string productInfoFeed = "";
	string showPricesWithVat = "";
	bool neverShowVat = false;
}

@{
	var themeRaw = Pageview.CurrentParagraph.Item["Theme"]?.ToString();
	string theme = !string.IsNullOrEmpty(themeRaw) ? " h-100 theme " + themeRaw.Replace(" ", "").Trim().ToLower() : "";
	
	showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
	neverShowVat = string.IsNullOrEmpty(showPricesWithVat);

	if (isLazyLoadingForProductInfoEnabled)
	{
		string productIds = string.Join("&ProductIds=", Model.ProductList.Products.Select(p => p.Id));
		string priceFilledProperties = $"Price,PriceFormatted{(showPricesWithVat == "false" && !neverShowVat ? ",PriceWithVat,PriceWithVatFormatted" : "")}";
		productInfoFeed = $@"/dwapi/ecommerce/products/search?ProductIds={productIds}&PageSize={Model.ProductList.PageSize}
									&UserId={Dynamicweb.Core.Converter.ToString(Pageview.User?.ID)}
									&LanguageId={Pageview.Area.EcomLanguageId}&CurrencyCode={Pageview.Area.EcomCurrencyId}&CountryCode={Pageview.Area.EcomCountryCode}&ShopId={Pageview.Area.EcomShopId}
									&ProductSettings.FilledProperties=Id,Price,PriceBeforeDiscount,StockLevel,VariantInfo,NeverOutOfstock
									&ProductSettings.PriceSettings.ShowPricesWithVat={Pageview.Area.EcomPricesWithVat}
									&PriceSettings.FilledProperties={priceFilledProperties}
									&getproductinfo=true";
		productInfoFeed = $"data-product-info-feed=\"{productInfoFeed}\"";
		liveInfoClass = "js-live-info";
		
		<script type="module">
			swift.LiveProductInfo.init();
		</script>
	}
}

@if (theme != "") { 
	<div class="@(theme)" @productInfoFeed>
		@RenderContent()
	</div>
} else {
	<div @productInfoFeed>
		@RenderContent()
	</div>
}


@helper RenderContent() { 
	int favoriteListId = Model.Id;
	bool isErpConnectionDown = !Dynamicweb.Ecommerce.DynamicwebLiveIntegration.TemplatesHelper.IsWebServiceConnectionAvailable();
	bool hideAddToCart = Pageview.AreaSettings.GetBoolean("ErpDownHideAddToCart") && isErpConnectionDown;
	bool hidePrice = Pageview.AreaSettings.GetBoolean("ErpDownHidePrices") && isErpConnectionDown;
	string currentPageUrl = "/Default.aspx?ID=" + Pageview.Page.ID + "&FavoriteListId=" + favoriteListId;
	int listItemsCount = Model?.ProductList?.TotalProductsCount != null ? Model.ProductList.TotalProductsCount : 0;
	string productCountLabel = listItemsCount > 1 ? Translate("products") : Translate("product");
	int pageSize = Model?.ProductList?.PageSize != null ? Model.ProductList.PageSize : 0;
	int userId = Pageview.User.ID;
	string listName = !string.IsNullOrEmpty(Model.Name) ? Model.Name : Translate("Favorites");
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";

	string url = "/Default.aspx?ID=" + (GetPageIdByNavigationTag("CartService"));
	if (!url.Contains("LayoutTemplate"))
	{
		url += url.Contains("?") ? "&LayoutTemplate=Swift_MiniCart.cshtml" : "?LayoutTemplate=Swift_MiniCart.cshtml";
	}

	string priceMin = "";
	string priceMax = "";

	var favoriteParameters = new Dictionary<string, object>();
	int defaultFavoriteListId = 0;

	IEnumerable<FavoriteList> favoreiteLists = Pageview.User.GetFavoriteLists();
	if (favoreiteLists.Count() == 1)
	{
		foreach (FavoriteList list in favoreiteLists)
		{
			defaultFavoriteListId = list.ListId;
		}
	}

	favoriteParameters.Add("ListId", defaultFavoriteListId);

	<header class="p-3 border-bottom">
		<div class="d-flex flex-row align-items-center gap-3">
			<h1 class="h6 m-0 flex-fill opacity-75">
				@listName
			</h1>
			<span class="small text-end">@listItemsCount @productCountLabel <span class="d-none d-sm-inline">@Translate("in this list")</span></span>
		</div>
	</header>

	if (Model?.ProductList != null)
	{
		<div class="grid grid-2 grid-lg-3 grid-xxl-4 p-3">
			@foreach (var product in Model.ProductList.Products)
			{
				string link = "Default.aspx?ID=" + GetPageIdByNavigationTag("Shop");
				link += $"&GroupID={product.PrimaryOrDefaultGroup.Id}";
				link += $"&ProductID={product.Id}";
				link += !string.IsNullOrEmpty(product.VariantId) ? $"&VariantID={product.VariantId}" : "";
				link = Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(link);

				string priceId = "ProductPrice_" + product.Id + product.VariantId;

				string minQty = product.PurchaseMinimumQuantity != 1 ? "min=\"" + product.PurchaseMinimumQuantity.ToString() + "\"" : "min=\"1\"";
				string stepQty = product.PurchaseQuantityStep > 1 ? product.PurchaseQuantityStep.ToString() : "1";
				string valueQty = product.PurchaseMinimumQuantity > product.PurchaseQuantityStep ? product.PurchaseMinimumQuantity.ToString() : stepQty;
				string qtyValidCheck = stepQty != "1" ? "onkeyup=\"swift.Cart.QuantityValidate(event)\"" : "";

				string productImage = "/Admin/Public/GetImage.ashx?Image=" + @product.DefaultImage.Value + "&Format=webp&Width=450&Height=450";
				string productName = product.Name;
				productName += !string.IsNullOrEmpty(product.VariantName) ? " - " + product.VariantName : "";

				bool isDiscontinued = product.Discontinued;
				bool IsNeverOutOfStock = product.NeverOutOfstock;
				string disableAddToCart = (product.StockLevel <= 0) ? "disabled" : "";
				disableAddToCart = isDiscontinued ? "disabled" : disableAddToCart;
				disableAddToCart = IsNeverOutOfStock ? "" : disableAddToCart;

				<article class="position-relative d-flex flex-column gap-3 @liveInfoClass" data-product-id="@product.Id">
					<div class="image">
						<div class="ratio ratio-1x1">
							@if (product.DefaultImage.Value != "")
							{
								<a href="@link" class="d-flex justify-content-center align-items-center">
									<img src="@productImage"
										 loading="lazy"
										 decoding="async"
										 class="mw-100 mh-100 p-2 p-lg-3"
										 alt="@product.Name">
								</a>
							}
							else
							{
								<a href="@link" class="d-block h-100 w-100">
									<div class="d-block h-100 w-100" style="background-color: var(--bs-gray-200);"></div>
								</a>
							}
						</div>
					</div>

					<div class="name flex-fill">@productName</div>

					@if (!hidePrice)
					{
						<div>
							<div class="h4" itemprop="offers" itemscope itemtype="https://schema.org/Offer">
								<span itemprop="priceCurrency" content="@product.Price.CurrencyCode" class="d-none"></span>

								@if (showPricesWithVat == "false" && !neverShowVat)
								{
									if (isLazyLoadingForProductInfoEnabled)
									{
										<span itemprop="price" content="" class="d-none"></span>
										<span class="text-decoration-line-through opacity-75 me-3 text-price js-text-price d-none" data-show-if="LiveProductInfo.product.Price.Price != LiveProductInfo.product.PriceBeforeDiscount.Price"></span>
									}
									else
									{
										string beforePrice = product.PriceBeforeDiscount.PriceWithoutVatFormatted;

										<span itemprop="price" content="@product.Price.PriceWithoutVat" class="d-none"></span>
										if (product.Price.Price != product.PriceBeforeDiscount.Price)
										{
											<span class="text-decoration-line-through opacity-75 me-3">@beforePrice</span>
										}
									}
								}
								else
								{
									if (isLazyLoadingForProductInfoEnabled)
									{
										<span itemprop="price" content="" class="d-none"></span>
										<span class="text-decoration-line-through opacity-75 me-3 text-price js-text-price d-none" data-show-if="LiveProductInfo.product.Price.Price != LiveProductInfo.product.PriceBeforeDiscount.Price"></span>
									}
									else
									{
										string beforePrice = product.PriceBeforeDiscount.PriceFormatted;

										<span itemprop="price" content="@product.Price.Price" class="d-none"></span>
										if (product.Price.Price != product.PriceBeforeDiscount.Price)
										{
											<span class="text-decoration-line-through opacity-75 me-3">@beforePrice</span>
										}
									}
								}

								@if (showPricesWithVat == "false" && !neverShowVat)
								{
									if (isLazyLoadingForProductInfoEnabled)
									{
										<span class="text-price js-text-price"><div class="spinner-border" role="status"></div></span>
									}
									else
									{
										string price = product.Price.PriceWithoutVatFormatted;
										if (product?.VariantInfo?.VariantInfo != null)
										{
											priceMin = product?.VariantInfo?.PriceMin?.PriceWithoutVatFormatted != null ? product.VariantInfo.PriceMin.PriceWithoutVatFormatted : "";
											priceMax = product?.VariantInfo?.PriceMax?.PriceWithoutVatFormatted != null ? product.VariantInfo.PriceMax.PriceWithoutVatFormatted : "";
										}
										if (priceMin != priceMax)
										{
											price = priceMin + " - " + priceMax;
										}
										<span class="text-price">@price</span>
									}
								}
								else
								{
									if (isLazyLoadingForProductInfoEnabled)
									{
										<span class="text-price js-text-price"><div class="spinner-border" role="status"></div></span>
									}
									else
									{
										string price = product.Price.PriceFormatted;
										if (product?.VariantInfo?.VariantInfo != null)
										{
											priceMin = product?.VariantInfo?.PriceMin?.PriceFormatted != null ? product.VariantInfo.PriceMin.PriceFormatted : "";
											priceMax = product?.VariantInfo?.PriceMax?.PriceFormatted != null ? product.VariantInfo.PriceMax.PriceFormatted : "";
										}
										if (priceMin != priceMax)
										{
											price = priceMin + " - " + priceMax;
										}
										<span class="text-price">@price</span>
									}
								}
							</div>
							@if (showPricesWithVat == "false" && !neverShowVat)
							{
								if (isLazyLoadingForProductInfoEnabled)
								{
									<small class="opacity-85 fst-normal js-text-price-with-vat d-none" data-suffix="@Translate("Incl. VAT")"></small>
								}
								else
								{
									string price = product.Price.PriceWithVatFormatted;
									if (product?.VariantInfo?.VariantInfo != null)
									{
										priceMin = product?.VariantInfo?.PriceMin?.PriceWithVatFormatted != null ? product.VariantInfo.PriceMin.PriceWithVatFormatted : "";
										priceMax = product?.VariantInfo?.PriceMax?.PriceWithVatFormatted != null ? product.VariantInfo.PriceMax.PriceWithVatFormatted : "";
									}
									if (priceMin != priceMax)
									{
										price = priceMin + " - " + priceMax;
									}
									<small class="opacity-85 fst-normal">@price @Translate("Incl. VAT")</small>
								}
							}
						</div>
					}

					<div class="d-flex align-items-center gap-3 gap-md-2">
						@if (!hideAddToCart)
						{
							<form method="post" action="@url" class="flex-sm-fill">
								<div class="d-flex flex-row">
									<input type="hidden" name="redirect" value="false"/>
									<input type="hidden" name="ProductId" value="@product.Id"/>
									<input type="hidden" name="cartcmd" value="add"/>

									<div class="js-input-group flex-sm-fill">
										@if (!string.IsNullOrEmpty(product.VariantId))
										{
											<input type="hidden" name="VariantId" value="@product.VariantId"/>
										}
										<input id="Quantity_@product.Id" name="Quantity" value="@valueQty" type="hidden">
										<button type="button" onclick="swift.Cart.Update(event)" class="d-none d-sm-block btn btn-primary w-100 js-add-to-cart-button @disableAddToCart" title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)" @disableAddToCart>@Translate("Add to cart")</button>
										<button type="button" onclick="swift.Cart.Update(event)" class="d-sm-none btn btn-primary js-add-to-cart-button p-0 @disableAddToCart" title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)" @disableAddToCart>
											<span class="icon-2 p-3">
												@ReadFile(iconPath + "shopping-cart.svg")
											</span>
										</button>
									</div>
								</div>
							</form>
						}
						<div>
							@RenderPartial("Components/ToggleFavorite.cshtml", product, favoriteParameters)
						</div>
					</div>
				</article>
			}
		</div>

		if (listItemsCount > pageSize)
		{
			<div class="p-3">
				@RenderPagination(currentPageUrl, Model.ProductList.PageCount, Model.ProductList.CurrentPage, Model.ProductList.PageSize)
			</div>
		}
	}
}


@helper RenderPagination(string currentPageLink, int pageCount, int currentPage, int pageSize)
{
	<ul class="pagination m-0">
		@{string pageHrefTemplate = string.Format("<a class=\"page-link\" href=\"{0}&PageNum={{0}}&PageSize={{1}}\">{{0}}</a>", currentPageLink);}
		@for (int i = 1; i <= pageCount; i++)
		{
			var css = i == currentPage
				? "page-item active"
				: "page-item";
			<li class="@css">
				@string.Format(pageHrefTemplate, i, pageSize)
			</li>
		}
	</ul>
}
