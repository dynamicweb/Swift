@inherits ViewModelTemplate<ProductListViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog


@{ 
	string linkText = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("LinkText")) ? Dynamicweb.Context.Current.Request.QueryString.Get("LinkText") : "";

	string layout = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("Layout")) ? Dynamicweb.Context.Current.Request.QueryString.Get("Layout") : "";

	bool hideTitle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("HideTitle")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("HideTitle")) : false;
	bool hidePrice = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("HidePrice")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("HidePrice")) : true;
	
	string headingTitle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("HeadingTitle")) ? Dynamicweb.Context.Current.Request.QueryString.Get("HeadingTitle") : "";
	string headingSubtitle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("Subtitle")) ? Dynamicweb.Context.Current.Request.QueryString.Get("Subtitle") : "";

	string alignMiddle = headingTitle == "" && headingSubtitle == "" ? " justify-content-center" : "";
}

@if (layout == "" || layout == "text-top") {
	if (headingTitle != "" && !hideTitle) {
		<div class="pb-2 pb-lg-4 d-flex">
			<div class="flex-fill">
				@RenderHeader(headingTitle, headingSubtitle)
			</div>
			@RenderDesktopLinkButton(headingTitle, headingSubtitle)
		</div>
	}

	@RenderSlider(hidePrice)
	@RenderMobileLinkButton(headingTitle, headingSubtitle)
}

@if (layout == "text-left") {
	string sliderColSize = "col";

	<div class="row g-3" data-slider-layout="left">
		@if ((headingTitle != "" && hideTitle == false) || headingSubtitle != "" || linkText != "") {
			sliderColSize = "col-12 col-lg-8";

			<div class="col-12 col-lg-4">
				<div class="d-flex flex-row align-items-center@(alignMiddle) h-100">
					<div class="mb-5 mb-lg-0">
						@RenderHeader(headingTitle, headingSubtitle)
						@RenderDesktopLinkButton(headingTitle, headingSubtitle)
					</div>
				</div>
			</div>
		}
		<div class="@sliderColSize">
			@RenderSlider(hidePrice)
		</div>
	</div>

	@RenderMobileLinkButton(headingTitle, headingSubtitle)
}

@if (layout == "text-right") {
	string sliderColSize = "col";

	<div class="row g-3" data-slider-layout="right">
		@if ((headingTitle != "" && !hideTitle) || headingSubtitle != "" || linkText != "") {
			sliderColSize = "col-12 col-lg-8";

			<div class="col-12 col-lg-4 order-1 order-lg-2">
				<div class="d-flex flex-row align-items-center@(alignMiddle) h-100">
					<div class="mb-5 mb-lg-0">
						@RenderHeader(headingTitle, headingSubtitle)
						@RenderDesktopLinkButton(headingTitle, headingSubtitle)
					</div>
				</div>
			</div>
		}
		<div class="@sliderColSize order-2 order-lg-1">
			@RenderSlider(hidePrice)
		</div>
	</div>

	@RenderMobileLinkButton(headingTitle, headingSubtitle)
}

@helper RenderSlider (bool hidePrice) {
	string detailsPageLink = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ProductDetailsPage")) ? Dynamicweb.Context.Current.Request.QueryString.Get("ProductDetailsPage") : "#";

	string ratio = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ImageAspectRatio")) ? Dynamicweb.Context.Current.Request.QueryString.Get("ImageAspectRatio") : "";
	string ratioCssClass = ratio != "" ? "ratio" : "";
	string ratioVariable = ratio != "" ? "--bs-aspect-ratio: " + ratio : "";

	string generalTheme = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("GeneralTheme")) ? Dynamicweb.Context.Current.Request.QueryString.Get("GeneralTheme") : "";
	string theme = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("Theme")) ? Dynamicweb.Context.Current.Request.QueryString.Get("Theme") : "";
	string imageTheme = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ImageTheme")) ? Dynamicweb.Context.Current.Request.QueryString.Get("ImageTheme") : "";
	string contentPadding = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ContentPadding")) ? Dynamicweb.Context.Current.Request.QueryString.Get("ContentPadding") : "";
	string hideNavigationBar = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("HideNavigationBar")) ? Dynamicweb.Context.Current.Request.QueryString.Get("HideNavigationBar") : "false";
    	
	<div class="js-slider d-flex @generalTheme" data-hide-navigation-bar="@hideNavigationBar.ToLower()">
		@foreach (var product in Model.Products)
		{
			string link = "/Default.aspx?ID=" + detailsPageLink + "&amp;ProductID=" + product.Id;
			link += !string.IsNullOrEmpty(product.VariantId) ? "&amp;VariantID=" + product.VariantId : "";

			string imagePath = product?.DefaultImage.Value.ToString() ?? "";
			imagePath = "/Admin/Public/GetImage.ashx?image=" + imagePath + "&width=" + 350 + "&Format=WebP&Quality=70";

			string imagePadding = string.IsNullOrWhiteSpace(imageTheme) ? "" : " p-2";

			<article>
				<a href="@link" class="text-decoration-none d-block h-100 no-outline">
					<div class="@(theme) h-100 d-flex flex-column justify-content-between">
						<div class="@(ratioCssClass)@(imageTheme) mb-3" style="@ratioVariable">
							<img loading="lazy" decoding="async" src="@imagePath" class="h-100 w-100@(imagePadding)" style="object-fit: contain;" alt="@product.Name" />
						</div>
						<div class="@contentPadding flex-fill d-flex flex-column justify-content-between">
							<h3 class="h6 mb-0">@product.Manufacturer.Name <i>@product.ProductCategories["specification_bike"].Fields["Model_Name"].Value</i> @product.ProductCategories["specification_bike"].Fields["Model_Year"].Value @product.VariantId</h3>
							@*<h3 class="h6 opacity-85">@product.Name @product.VariantId</h3>*@
							@if (!hidePrice) { 
								<p class="h5 text-price">@product.Price.PriceFormatted</p>
							}
						</div>
					</div>
				</a>
			</article>
		}
	</div>
}

@helper RenderHeader(string headingTitle, string headingSubtitle) { 
	string titleFontSize = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("TitleFontSize")) ? Dynamicweb.Context.Current.Request.QueryString.Get("TitleFontSize") : "h3";
	string subtitleFontSize = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("SubtitleFontSize")) ? Dynamicweb.Context.Current.Request.QueryString.Get("SubtitleFontSize") : "fs-5";

	if (!string.IsNullOrEmpty(headingTitle))
	{
		<h2 class="@titleFontSize">@headingTitle</h2>
	}
	if (!string.IsNullOrEmpty(headingSubtitle))
	{
		<p class="@subtitleFontSize mb-2 mb-md-3 max-w-75ch">@headingSubtitle</p>
	}
}

@helper RenderDesktopLinkButton(string headingTitle, string headingSubtitle) { 
	string layout = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("Layout")) ? Dynamicweb.Context.Current.Request.QueryString.Get("Layout") : "";
	string buttonStyle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ButtonStyle")) ? Dynamicweb.Context.Current.Request.QueryString.Get("ButtonStyle") : "btn-primary";
	string link = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("Link")) ? Dynamicweb.Context.Current.Request.QueryString.Get("Link") : "";
	string linkText = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("LinkText")) ? Dynamicweb.Context.Current.Request.QueryString.Get("LinkText") : "";
	string marginTop = (headingTitle != "" || headingSubtitle != "") && layout != "" && layout != "text-top" ? " mt-4" : "";

	if (!string.IsNullOrEmpty(link) && !string.IsNullOrEmpty(linkText)) {
		<div class="d-none d-lg-block">
			<a href="@(link)" class="btn @(buttonStyle) @(marginTop) mb-4">@linkText</a>
		</div>
	}
}

@helper RenderMobileLinkButton(string headingTitle, string headingSubtitle) { 
	string buttonStyle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ButtonStyle")) ? Dynamicweb.Context.Current.Request.QueryString.Get("ButtonStyle") : "btn-primary";
	string link = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("Link")) ? Dynamicweb.Context.Current.Request.QueryString.Get("Link") : "";
	string linkText = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("LinkText")) ? Dynamicweb.Context.Current.Request.QueryString.Get("LinkText") : "";
	string marginTop = headingTitle != "" || headingSubtitle != "" ? " mt-4" : "";

	if (!string.IsNullOrEmpty(link) && !string.IsNullOrEmpty(linkText)) {
		<div class="d-block d-lg-none">
			<a href="@(link)" class="btn @(buttonStyle) @(marginTop) mb-4 w-100">@linkText</a>
		</div>
	}
}
