@inherits ViewModelTemplate<ProductListViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.CustomerExperienceCenter.Favorites

@functions {
	Dictionary<string, object> favoriteParameters { get; set; }
}

@{
	string linkText = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("LinkText")) ? Dynamicweb.Context.Current.Request.Form.Get("LinkText") : "";
	string layout = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Layout")) ? Dynamicweb.Context.Current.Request.Form.Get("Layout") : "";
	bool hideTitle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("HideTitle")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.Form.Get("HideTitle")) : false;

	string headingTitle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("HeadingTitle")) ? Dynamicweb.Context.Current.Request.Form.Get("HeadingTitle") : "";
	string headingSubtitle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Subtitle")) ? Dynamicweb.Context.Current.Request.Form.Get("Subtitle") : "";

	string generalTheme = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("GeneralTheme")) ? Dynamicweb.Context.Current.Request.Form.Get("GeneralTheme") : "";
	string ContentPadding = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ContentPadding")) ? Dynamicweb.Context.Current.Request.Form.Get("ContentPadding") : "";

	string anonymousUsersLimitations = Pageview.AreaSettings.GetRawValueString("AnonymousUsers", "");
	bool anonymousUser = Pageview.User == null;

	favoriteParameters = new Dictionary<string, object>();
	if (!anonymousUser)
	{
		int defaultFavoriteListId = 0;

		IEnumerable<FavoriteList> favoreiteLists = Pageview.User.GetFavoriteLists();
		int favoriteListsTotal = favoreiteLists.Count();

		if (favoreiteLists.Count() == 1) {
			foreach (FavoriteList list in favoreiteLists) {
				defaultFavoriteListId = list.ListId;
			}
		}
		
		favoriteParameters.Add("ListId", defaultFavoriteListId);
		favoriteParameters.Add("ListTotal", favoriteListsTotal);
	}
}

@*--- SLIDER: TEXT TOP ---*@
@if (layout == "" || layout == "text-top")
{
	<div class="h-100 @ContentPadding@(generalTheme)">
		@if (headingTitle != "" && !hideTitle)
		{
			<div class="pb-2 pb-lg-4 d-flex">
				<div class="flex-fill">
					@RenderHeader(headingTitle, headingSubtitle)
				</div>
				@RenderDesktopLinkButton(headingTitle, headingSubtitle)
			</div>
		}

		@RenderSlider()
		@RenderMobileLinkButton(headingTitle, headingSubtitle)
	</div>
}

@*--- SLIDER: TEXT LEFT ---*@
@if (layout == "text-left")
{
	string sliderColSize = "g-col";

	<div class="grid gap-0 gap-lg-5 h-100 @ContentPadding@(generalTheme)" data-slider-layout="left">
		@if ((headingTitle != "" && hideTitle == false) || headingSubtitle != "" || linkText != "")
		{
			sliderColSize = "g-col-12 g-col-lg-8";

			<div class="g-col-12 g-col-lg-4">
				<div class="d-flex flex-row h-100">
					<div class="mb-5 mb-lg-0">
						@RenderHeader(headingTitle, headingSubtitle)
						@RenderDesktopLinkButton(headingTitle, headingSubtitle)
					</div>
				</div>
			</div>
		}
		<div class="@sliderColSize">
			@RenderSlider()
		</div>
	</div>

	@RenderMobileLinkButton(headingTitle, headingSubtitle)
}

@*--- SLIDER: TEXT RIGHT ---*@
@if (layout == "text-right")
{
	string sliderColSize = "g-col";

	<div class="grid gap-0 gap-lg-5 h-100 @ContentPadding@(generalTheme)" data-slider-layout="right">
		@if ((headingTitle != "" && !hideTitle) || headingSubtitle != "" || linkText != "")
		{
			sliderColSize = "g-col-12 g-col-lg-8";

			<div class="g-col-12 g-col-lg-4 order-1 order-lg-2">
				<div class="d-flex flex-row align-items-center h-100">
					<div class="mb-5 mb-lg-0">
						@RenderHeader(headingTitle, headingSubtitle)
						@RenderDesktopLinkButton(headingTitle, headingSubtitle)
					</div>
				</div>
			</div>
		}
		<div class="@sliderColSize order-2 order-lg-1">
			@RenderSlider()
		</div>
	</div>

	@RenderMobileLinkButton(headingTitle, headingSubtitle)
}

@*--- GRID ---*@
@if (layout == "" || layout == "grid")
{
	int parentColumnSize = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ParentColumnSize")) ? Convert.ToInt32(Dynamicweb.Context.Current.Request.Form.Get("ParentColumnSize")) : 12;
	string columnSize = "g-col-lg-2";
	columnSize = parentColumnSize == 10 || parentColumnSize == 9 || parentColumnSize == 8 ? "g-col-lg-3" : columnSize;
	columnSize = parentColumnSize == 6 ? "g-col-lg-4" : columnSize;
	columnSize = parentColumnSize == 3 || parentColumnSize == 4 ? "g-col-lg-6" : columnSize;

	<div class="h-100 @ContentPadding@(generalTheme)">
		@if (headingTitle != "" && !hideTitle)
		{
			<div class="pb-2 pb-lg-4 d-flex">
				<div class="flex-fill">
					@RenderHeader(headingTitle, headingSubtitle)
				</div>
			</div>
		}

		@RenderGrid(columnSize)

		<div class="text-center">
			@RenderDesktopLinkButton(headingTitle, headingSubtitle)
		</div>

		@RenderMobileLinkButton(headingTitle, headingSubtitle)
	</div>
}

@helper RenderSlider() {
	<div class="js-slider d-flex">
		@foreach (ProductViewModel product in Model.Products)
		{
			<article class="position-relative">
				@RenderProduct(product)
			</article>
		}
	</div>
}

@helper RenderGrid(string columnSize) {
	<div class="grid gap-4">
		@foreach (ProductViewModel product in Model.Products)
		{
			<div class="g-col-6 @columnSize position-relative">
				@RenderProduct(product)
			</div>
		}
	</div>
}

@helper RenderProduct(ProductViewModel product) { 
	string anonymousUsersLimitations = Pageview.AreaSettings.GetRawValueString("AnonymousUsers", "");
	bool anonymousUser = Pageview.User == null;
	bool hidePrice = anonymousUsersLimitations.Contains("price") && anonymousUser;	

	string detailsPageLink = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ProductDetailsPage")) ? Dynamicweb.Context.Current.Request.Form.Get("ProductDetailsPage") : "#";

	string ratio = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ImageAspectRatio")) ? Dynamicweb.Context.Current.Request.Form.Get("ImageAspectRatio") : "";
	string ratioCssClass = ratio != "" ? "ratio" : "";
	string ratioVariable = ratio != "" ? "--bs-aspect-ratio: " + ratio : "";

	string theme = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Theme")) ? Dynamicweb.Context.Current.Request.Form.Get("Theme") : "";
	string imageTheme = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ImageTheme")) ? Dynamicweb.Context.Current.Request.Form.Get("ImageTheme") : "";
	string ContentPadding = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ContentPadding")) ? Dynamicweb.Context.Current.Request.Form.Get("ContentPadding") : "";

	string showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
	bool neverShowVat = string.IsNullOrEmpty(showPricesWithVat);
	
	var defaultGroupId = product.PrimaryOrDefaultGroup.Id;
	var productGroup = !string.IsNullOrEmpty(defaultGroupId) : Dynamicweb.Ecommerce.Services.ProductGroups.GetGroup(defaultGroupId) : null;
	var selectedDetailPage = productGroup?.Meta.PrimaryPage ?? "";

	string link = string.IsNullOrEmpty(selectedDetailPage) ? $"/Default.aspx?ID={detailsPageLink}&groupid={defaultGroupId}" : selectedDetailPage;
	link += "&productid=" + product.Id;
	link += !string.IsNullOrEmpty(product.VariantId) ? "&variantid=" + product.VariantId : "";

	string imagePath = product?.DefaultImage.Value.ToString() ?? "";
	imagePath = "/Admin/Public/GetImage.ashx?image=" + imagePath + "&width=" + 350 + "&Format=WebP&Quality=70";

		string saleBadgeType = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("SaleBadgeType")) ? Dynamicweb.Context.Current.Request.Form.Get("SaleBadgeType") : "";
	string saleBadgeCssClassName = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("SaleBadgeCssClassName")) ? Dynamicweb.Context.Current.Request.Form.Get("SaleBadgeCssClassName") : "";
	string newBadgeCssClassName = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("NewBadgeCssClassName")) ? Dynamicweb.Context.Current.Request.Form.Get("NewBadgeCssClassName") : "";
	int newPublicationDays = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("NewPublicationDays")) ? Convert.ToInt32(Dynamicweb.Context.Current.Request.Form.Get("NewPublicationDays")) : 0;
	string campaignBadgesValues = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("CampaignBadgesValues")) ? Dynamicweb.Context.Current.Request.Form.Get("CampaignBadgesValues") : "";
	
	var badgeParms = new Dictionary<string, object>();
	badgeParms.Add("saleBadgeType", saleBadgeType);
	badgeParms.Add("saleBadgeCssClassName", saleBadgeCssClassName);
	badgeParms.Add("newBadgeCssClassName", newBadgeCssClassName);
	badgeParms.Add("campaignBadgesValues", campaignBadgesValues);
	badgeParms.Add("newPublicationDays", newPublicationDays);

	bool saleBadgeEnabled = !string.IsNullOrWhiteSpace(saleBadgeCssClassName) && saleBadgeCssClassName != "none" ? true : false;
	bool newBadgeEnabled = !string.IsNullOrWhiteSpace(newBadgeCssClassName) && newBadgeCssClassName != "none" ? true : false;
	DateTime createdDate = product.Created.Value;
	bool showBadges = saleBadgeEnabled && product.Discount.Price != 0 ? true : false;
	showBadges = (newBadgeEnabled && newPublicationDays == 0) || (newBadgeEnabled && (createdDate.AddDays(newPublicationDays) > DateTime.Now)) ? true : showBadges;
	showBadges = !string.IsNullOrEmpty(campaignBadgesValues) ? true : showBadges;
	
	if (!anonymousUser && product.VariantInfo.VariantInfo == null) {
		<div class="position-absolute top-0 end-0 my-3" style="z-index: 2">
			@RenderPartial("Components/ToggleFavorite.cshtml", product, favoriteParameters)
		</div>
	}

	<a href="@link" class="text-decoration-none d-block h-100 no-outline">
		<div class="h-100 d-flex flex-column justify-content-between gap-3@(theme)">
			<div class="@(ratioCssClass)@(imageTheme) position-relative" style="@ratioVariable">
				@if (showBadges) { 
					<div class="position-absolute top-0 left-0 p-1 p-lg-2" style="z-index: 2">
						@RenderPartial("Components/EcommerceBadge.cshtml", product, badgeParms)
					</div>
				}
				<img loading="lazy" decoding="async" src="@imagePath" class="h-100 w-100 @ContentPadding" style="object-fit: contain;" alt="@product.Name" />
			</div>
			<div class="@ContentPadding flex-fill d-flex flex-column justify-content-between">
				<h3 class="h6 opacity-85">@product.Name @product.VariantName</h3>

				@if (!hidePrice) {
					<div>
						<p class="h6 m-0">
							@if (showPricesWithVat == "false" && !neverShowVat) {
								if (product.Price.Price != product.PriceBeforeDiscount.Price) {
									<span class="text-decoration-line-through opacity-75 me-1">
										@product.PriceBeforeDiscount.PriceWithoutVatFormatted
									</span>
								}
							} else {
								if (product.Price.Price != product.PriceBeforeDiscount.Price) {
									<span class="text-decoration-line-through opacity-75 me-1">
										@product.PriceBeforeDiscount.PriceFormatted
									</span>
								}
							}

							@if (showPricesWithVat == "false" && !neverShowVat) {
								<span class="text-price fw-bold">@product.Price.PriceWithoutVatFormatted</span>
							} else {
								<span class="text-price fw-bold">@product.Price.PriceFormatted</span>
							}
						</p>
						@if (showPricesWithVat == "false" && !neverShowVat) {
							<small class="opacity-85 fst-normal">@product.Price.PriceWithVatFormatted @Translate("Incl. VAT")</small>
						}
					</div>
				}
			</div>
		</div>
	</a>
}

@helper RenderHeader(string headingTitle, string headingSubtitle)
{
	string titleFontSize = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("TitleFontSize")) ? Dynamicweb.Context.Current.Request.Form.Get("TitleFontSize") : "h3";
	string subtitleFontSize = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("SubtitleFontSize")) ? Dynamicweb.Context.Current.Request.Form.Get("SubtitleFontSize") : "fs-5";
	string maxWidth = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("TextReadability")) ? Dynamicweb.Context.Current.Request.Form.Get("TextReadability") : "";

	if (!string.IsNullOrEmpty(headingTitle))
	{
		<h2 class="@titleFontSize@(maxWidth)">@headingTitle</h2>
	}
	if (!string.IsNullOrEmpty(headingSubtitle))
	{
		<p class="@subtitleFontSize mb-2 mb-md-3@(maxWidth)">@headingSubtitle</p>
	}
}

@helper RenderDesktopLinkButton(string headingTitle, string headingSubtitle)
{
	int totalProducts = Model.TotalProductsCount;
	int pageSize = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("PageSize")) ? Convert.ToInt32(Dynamicweb.Context.Current.Request.Form.Get("PageSize")) : 12;

	string layout = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Layout")) ? Dynamicweb.Context.Current.Request.Form.Get("Layout") : "";
	string buttonStyle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ButtonStyle")) ? Dynamicweb.Context.Current.Request.Form.Get("ButtonStyle") : "btn-primary";
	string link = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Link")) ? Dynamicweb.Context.Current.Request.Form.Get("Link") : "";
	string linkText = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("LinkText")) ? Dynamicweb.Context.Current.Request.Form.Get("LinkText") : "";
	string marginTop = (headingTitle != "" || headingSubtitle != "") && layout != "" && layout != "text-top" ? " mt-4" : "";

	if (totalProducts > pageSize && !string.IsNullOrEmpty(link) && !string.IsNullOrEmpty(linkText))
	{
		<div class="d-none d-lg-block">
			<a href="@(link)" class="btn @(buttonStyle) @(marginTop) mb-4">@linkText</a>
		</div>
	}
}

@helper RenderMobileLinkButton(string headingTitle, string headingSubtitle)
{
	int totalProducts = Model.TotalProductsCount;
	int pageSize = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("PageSize")) ? Convert.ToInt32(Dynamicweb.Context.Current.Request.Form.Get("PageSize")) : 12;

	string buttonStyle = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("ButtonStyle")) ? Dynamicweb.Context.Current.Request.Form.Get("ButtonStyle") : "btn-primary";
	string link = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("Link")) ? Dynamicweb.Context.Current.Request.Form.Get("Link") : "";
	string linkText = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("LinkText")) ? Dynamicweb.Context.Current.Request.Form.Get("LinkText") : "";
	string marginTop = headingTitle != "" || headingSubtitle != "" ? " mt-4" : "";

	if (totalProducts > pageSize && !string.IsNullOrEmpty(link) && !string.IsNullOrEmpty(linkText))
	{
		<div class="d-block d-lg-none">
			<a href="@(link)" class="btn @(buttonStyle) @(marginTop) mb-4 w-100">@linkText</a>
		</div>
	}
}
