@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@inherits ViewModelTemplate<ProductListViewModel>

@{
    string groupIdQueryParameter = string.IsNullOrEmpty(Dynamicweb.Context.Current.Request["GroupID"])
        ? string.Empty
        : "&amp;GroupID=" + Dynamicweb.Context.Current.Request["GroupID"];
    string currentPageLink = "/Default.aspx?ID=" + Pageview.Page.ID + groupIdQueryParameter;
}

<h1>Product list</h1>

@if (Model.FacetGroups != null)
{
	<H2>Filters (@Model.FacetGroups.Count())</H2>
	@RenderFacets(Pageview.Page.ID, groupIdQueryParameter, Model);
}
else
{
	<H2>No facets</H2>
}
@RenderPagination(currentPageLink, Model)
@if (Model.Products != null)
{
    <div class="products">
        @foreach (var product in Model.Products)
        {
            string productLink = currentPageLink + "&amp;ProductID=" + product.Id;

            <h3>
                <a href="@productLink">@product.Name</a>
            </h3>
            <div>@product.Number</div>
            <small>@product.Id</small>
            <div>@product.VariantId</div>
            <div>@product.LanguageId</div>
            <div>@product.ShortDescription</div>
            if (product.Price != null)
            {
                <div>Price: @product.Price.Price</div>
            }
            @*<div class="variants">
				@foreach (var vc in product.Variants)
				{
					<div>@vc.Name</div>
				}
			</div>
			<div class="variantCombinations">
				@foreach (var vc in product.VariantCombinations)
				{
					<div>@vc.Name</div>
				}
			</div>*@
            <hr />
        }
    </div>
    @RenderPagination(currentPageLink, Model)
}

@helper RenderPagination(string currentPageLink, ProductListViewModel model)
{
    <ul class="pagination">
        @{string pageHrefTemplate = string.Format("<a class=\"page-link\" href=\"{0}&PageNum={{0}}&PageSize={{1}}\">{{0}}</a>", currentPageLink);}
        @for (int i = 1; i <= model.PageCount; i++)
        {
            var css = i == model.CurrentPage
                ? "page-item active"
                : "page-item";
            <li class="@css">
                @string.Format(pageHrefTemplate, i, model.PageSize)
            </li>
        }
    </ul>
}

@helper RenderFacets(int pageId, string groupId, ProductListViewModel model)
{
    var search = Dynamicweb.Context.Current.Request["Search"];

    <form method="get" action="/Default.aspx" id="facets">
        <input type="hidden" name="ID" value="@pageId" />
        <input type="hidden" name="GroupID" value="@groupId" />
        <input type="hidden" name="search" value="@search" />
		
        @foreach (var facetGroup in model.FacetGroups)
        {
            foreach (var facetItem in facetGroup.Facets)
            {
	            var facetOptionCount = facetItem.OptionCount;		
                var optionActiveCount = facetItem.OptionActiveCount;
                var facetOptionResultTotalCount = facetItem.OptionResultTotalCount;
                var queryParameter = facetItem.QueryParameter;
				var template = facetItem.RenderType;

                if (optionActiveCount > 0 && facetOptionResultTotalCount > 0)
                {
                    <div class="facets-group">
                        <h3 class="facets-show"><span>@facetItem.Name</span></h3>
                        <div class="facets-content">
                            @foreach (var facetOption in facetItem.Options)
                            {
								var label = facetOption.Label;
								var name = facetOption.Name;
								var value = facetOption.Value;
								var count = facetOption.Count;
								var selected = facetOption.Selected ? "checked" : "";
								var disabled = count <= 0 ? "disabled" : "";
								
								<label class="@disabled">
									<input name="@queryParameter" type="checkbox" class="checkbox-facet @selected" value="@value" @selected @disabled> @label (@(count))
								</label>
                            }
                        </div>
                    </div>
                }
            }
        }
		
        <button type="submit" class="btn btn--tag">@Translate("Apply filters")</button>
    </form>
}