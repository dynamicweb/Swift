@using Dynamicweb.Ecommerce.Frontend
@using System.Collections.Generic
@using System.Linq
@using System.Text
@using System.Text.RegularExpressions
@using Dynamicweb.Ecommerce.International


@functions {
	public string RenderCustomerAddress(OrderViewModel model)
	{
		List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(model.CustomerCountryCode);
		string regionName = Dynamicweb.Ecommerce.Services.Countries.GetRegion(model.CustomerCountryCode, model.CustomerRegion)?.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) ?? string.Empty;

		var htmlContent = new StringBuilder();

		foreach (List<string> addressLine in addressFormat)
		{
			for (var i = 0; i < addressLine.Count; i++)
			{
				addressLine[i] = Regex.Replace(addressLine[i], "{name}", model.CustomerName, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", model.CustomerFirstName, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", model.CustomerSurname, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{company}", model.CustomerCompany, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address}", model.CustomerAddress, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address1}", model.CustomerAddress, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address2}", model.CustomerAddress2, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{zip}", model.CustomerZip, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{city}", model.CustomerCity, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", model.CustomerRegion, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{region}", regionName, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", model.CustomerCountryCode, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{country}", model.CustomerCountry, RegexOptions.IgnoreCase);

				// Remove any bad placeholders the user may have submitted
				addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
			}
			var completeLine = string.Join(string.Empty, addressLine.ToArray());
			if (!string.IsNullOrWhiteSpace(completeLine))
			{
				htmlContent.Append($"<div>{completeLine}</div>");
			}
		}

		return htmlContent.ToString();
	}

	public string RenderDeliveryAddress(OrderViewModel model)
	{
		List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetDisplayAddress(model.DeliveryCountryCode);
		string regionName = Dynamicweb.Ecommerce.Services.Countries.GetRegion(model.DeliveryCountryCode, model.DeliveryRegion)?.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) ?? string.Empty;

		var result = new StringBuilder();

		foreach (List<string> addressLine in addressFormat)
		{
			for (var i = 0; i < addressLine.Count; i++)
			{
				addressLine[i] = Regex.Replace(addressLine[i], "{name}", model.DeliveryName, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{firstName}", model.DeliveryFirstName, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{lastName}", model.DeliverySurname, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{company}", model.DeliveryCompany, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address}", model.DeliveryAddress, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address1}", model.DeliveryAddress, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{address2}", model.DeliveryAddress2, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{zip}", model.DeliveryZip, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{city}", model.DeliveryCity, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{regionCode}", model.DeliveryRegion, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{region}", regionName, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{countryCode}", model.DeliveryCountryCode, RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{country}", model.DeliveryCountry, RegexOptions.IgnoreCase);

				// Remove any bad placeholders the user may have submitted
				addressLine[i] = Regex.Replace(addressLine[i], "{phone}", "", RegexOptions.IgnoreCase);
				addressLine[i] = Regex.Replace(addressLine[i], "{email}", "", RegexOptions.IgnoreCase);
			}
			var completeLine = string.Join(string.Empty, addressLine.ToArray());
			if (!string.IsNullOrWhiteSpace(completeLine))
			{
				result.Append($"<div>{completeLine}</div>");
			}
		}

		return result.ToString();
	}
}
