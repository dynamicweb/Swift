@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@{
	string apiKey = !string.IsNullOrEmpty(Pageview.AreaSettings.GetString("Google_APIKey")) ? Pageview.AreaSettings.GetString("Google_APIKey") : "";

	string userCheckoutPage = Pageview.CurrentParagraph.Item["CheckoutUserPageLink"] != null ? Pageview.CurrentParagraph.Item["CheckoutUserPageLink"].ToString().Replace("Default.aspx?Id=", "") : "";
	string signInPage = Pageview.CurrentParagraph.Item["SignInPageLink"] != null ? Pageview.CurrentParagraph.Item["SignInPageLink"].ToString() + "&GoBackToPage=" + userCheckoutPage : "";
	bool enableAdditionalAddress = Pageview.CurrentParagraph.Item["EnableAdditionalAddress"] != null ? (Boolean)Pageview.CurrentParagraph.Item["EnableAdditionalAddress"] : false;
	bool enableFindLocation = Pageview.CurrentParagraph.Item["EnableFindLocation"] != null ? (Boolean)Pageview.CurrentParagraph.Item["EnableFindLocation"] : false;

	string currentCountry = Pageview.Area?.EcomCountryCode != null ? Pageview.Area.EcomCountryCode : "dk";
	foreach (LoopItem country in GetLoop("Countries"))
	{
		if (country.GetString("Ecom:Country.IsDeliveryCountryOrDefault") == "true")
		{
			currentCountry = country.GetString("Ecom:Country.Code2");
		}
	}

	string countrySelectorColumnSize = "g-col-6";
	string deliveryRegionLabel = "State";

	bool isStandardSwiftTemplates = Pageview.AreaSettings.GetString("AddressFieldsBasedOn", "swift") == "swift";
}


<input type="hidden" name="EcomUserCreateNew" id="EcomUserCreateNew" value="true" disabled>

<div class="mb-0">
	<div class="d-flex">
		<div class="flex-grow-1">
			<h3 class="fs-6 fw-normal mb-3">@Translate("Contact information")</h3>
		</div>
		@if (Pageview.CurrentParagraph.Item["SignInPageLink"].ToString() != string.Empty)
		{ 
			<div class="text-end d-none d-md-block">
				<a href="@signInPage" class="h6 fw-normal mb-3 d-block">@Translate("Already have account?") @Translate("Log in")</a>
			</div>	
		}

	</div>
</div>

<div class="mb-4">
	<div class="grid">
		<div class="g-col-12">
			<div class="form-floating">
				<input type="email" class="form-control" name="EcomOrderCustomerEmail" id="EcomOrderCustomerEmail" value="@GetString("Ecom:Order.Customer.Email")" placeholder="@Translate("Email Address")">
				<label for="EcomOrderCustomerEmail">@Translate("Email Address")</label>
			</div>
		</div>
		@if (Pageview.CurrentParagraph.Item["SignInPageLink"].ToString() != string.Empty)
		{ 
			<div class="g-col-12 d-md-none">
				<a href="@signInPage">@Translate("Already have account?") @Translate("Log in")</a>
			</div>
		}
		@* Use newsletter *@
		@if (GetString("Ecom:Cart.UseNewsletterSubscription") == "True")
		{
			bool? isChecked = null;
			if (GetString("Ecom:Order.Customer.NewsletterSubscribe") == "true")
			{
				isChecked = true;
			}

			<div class="g-col-12">
				<div class="form-check">
					<input class="form-check-input" type="checkbox" name="EcomOrderSubscribeToNewsletter" id="EcomOrderSubscribeToNewsletter" checked="@isChecked" onchange="toggleCreateUser(event);">
					<label class="form-check-label lh-1" for="EcomOrderSubscribeToNewsletter">
						<span>@Translate("Keep me updated with deals, news and offers")</span>
					</label>
				</div>
			</div>
		}
	</div>
</div>

<div class="mt-4">

	<h3 class="fs-6 fw-normal mb-3">@Translate("Delivery address")</h3>

	<div class="grid gap-3">
		@{
			if (isStandardSwiftTemplates)
			{
				<div class="g-col-12">
					<div class="form-floating">
						<input type="text" class="form-control" name="EcomOrderDeliveryCompany" id="EcomOrderDeliveryCompany" value="@GetString("Ecom:Order.Delivery.Company")" placeholder="@Translate("Company")">
						<label for="EcomOrderDeliveryCompany">@Translate("Company (Optional)")</label>
					</div>
				</div>

				<div class="g-col-12">
					<div class="form-floating">
						<input type="text" class="form-control" name="EcomOrderDeliveryName" id="EcomOrderDeliveryName" value="@GetString("Ecom:Order.Delivery.Name")" placeholder="@Translate("Name")">
						<label for="EcomOrderDeliveryName">@Translate("Name")</label>
					</div>
				</div>

				<div class="g-col-12">
					<div class="form-floating">
						<input type="text" class="form-control" name="EcomOrderDeliveryAddress" id="EcomOrderDeliveryAddress" value="@GetString("Ecom:Order.Delivery.Address")" placeholder="@Translate("Street & Number")">
						<label for="EcomOrderDeliveryAddress">@Translate("Street & Number")</label>
					</div>
				</div>

				if (enableAdditionalAddress)
				{
					<div class="g-col-12">
						<div class="form-floating">
							<input type="text" class="form-control" name="EcomOrderDeliveryAddress2" id="EcomOrderDeliveryAddress2" value="@GetString("Ecom:Order.Delivery.Address2")" placeholder="@Translate("Additional address")">
							<label for="EcomOrderDeliveryAddress">@Translate("Additional address")</label>
						</div>
					</div>
				}

				<div class="g-col-12">
					<div class="grid">

						<div class="g-col-6 g-col-md-3">
							<div class="form-floating">
								<input type="text" class="form-control" name="EcomOrderDeliveryZip" id="EcomOrderDeliveryZip" value="@GetString("Ecom:Order.Delivery.Zip")" placeholder="@Translate("Zip code")">
								<label for="EcomOrderDeliveryZip">@Translate("Zip code")</label>
							</div>
						</div>

						@if (GetLoop("DeliveryRegions").Count > 0)
						{
							countrySelectorColumnSize = "g-col-3";
						}

						<div class="@countrySelectorColumnSize">
							<div class="form-floating">
								<input type="text" class="form-control" name="EcomOrderDeliveryCity" id="EcomOrderDeliveryCity" value="@GetString("Ecom:Order.Delivery.City")" placeholder="@Translate("Town / City")">
								<label for="EcomOrderDeliveryCity">@Translate("Town / City")</label>
							</div>
						</div>

						@if (GetLoop("DeliveryRegions").Count > 0)
						{
							if (currentCountry == "CA")
							{
								deliveryRegionLabel = Translate("Province");
							}
							else if (currentCountry == "GB")
							{
								deliveryRegionLabel = Translate("Region");
							}
							else if (currentCountry == "US")
							{
								deliveryRegionLabel = Translate("State");
							}

							<div class="g-col-3">
								<div class="form-floating">
									<select class="form-select" name="EcomOrderDeliveryRegion" id="EcomOrderDeliveryRegion" onchange="submitForm()">
										@foreach (LoopItem region in GetLoop("DeliveryRegions"))
										{
											if (region.GetString("Ecom:DeliveryRegion.IsDeliveryRegion") == "true")
											{
												<option value="@region.GetString("Ecom:DeliveryRegion.RegionCode")" selected>@region.GetString("Ecom:DeliveryRegion.Name")</option>
											}
											else
											{
												<option value="@region.GetString("Ecom:DeliveryRegion.RegionCode")">@region.GetString("Ecom:DeliveryRegion.Name")</option>
											}
										}
									</select>
									<label for="EcomOrderDeliveryRegion">@deliveryRegionLabel</label>
								</div>
							</div>
						}

						<div class="g-col-12 g-col-md-3">
							<div class="form-floating">

								<select class="form-select" name="EcomOrderDeliveryCountry" id="EcomOrderDeliveryCountry" onchange="submitForm()">
									@foreach (LoopItem country in GetLoop("Countries"))
									{
										if (country.GetString("Ecom:Country.IsDeliveryCountryOrDefault") == "true")
										{
											<option value="@country.GetString("Ecom:Country.Code2")" selected>@country.GetString("Ecom:Country.Name")</option>
										}
										else
										{
											<option value="@country.GetString("Ecom:Country.Code2")">@country.GetString("Ecom:Country.Name")</option>
										}
									}
								</select>
								<label for="EcomOrderDeliveryCountry">@Translate("Country")</label>
							</div>
						</div>

					</div>
				</div>
			}
			else
			{
				<text>
				@RenderDeliveryAddressEdit(enableAdditionalAddress)
				</text>
			}

			<div class="g-col-12">
				<div class="form-floating">
					<input type="tel" class="form-control" name="EcomOrderDeliveryPhone" id="EcomOrderDeliveryPhone" value="@GetString("Ecom:Order.Delivery.Phone")" placeholder="@Translate("Phone number")">
					<label for="EcomOrderDeliveryPhone">@Translate("Phone number")</label>
				</div>
			</div>
		}

		@* Create user *@
		@if (GetBoolean("Ecom:Cart.CreateUserInCheckout"))
		{
			<div class="g-col-12">
				<div class="form-check">
					<input class="form-check-input" type="checkbox" id="EcomUserCreateNewToggle" value="true" onchange="toggleCreateUser(event);">
					<label class="form-check-label lh-1" for="EcomUserCreateNewToggle">
						<span>@Translate("Create an account for easier checkout next time")</span>
					</label>
				</div>
			</div>

			<div class="d-none g-col-12 grid" id="PasswordFields">
				<div class="g-col-12">
					<div class="form-floating">
						<input type="password" disabled class="form-control" name="EcomUserCreatePassword" id="EcomUserCreatePassword" placeholder="@Translate("Password")">
						<label for="EcomUserCreatePassword">@Translate("Password")</label>
					</div>
				</div>

				<div class="g-col-12">
					<div class="form-floating">
						<input type="password" disabled class="form-control" name="EcomUserCreateConfirmPassword" id="EcomUserCreateConfirmPassword" placeholder="@Translate("Confirm password")">
						<label for="EcomUserCreateConfirmPassword">@Translate("Confirm password")</label>
					</div>
				</div>
			</div>

			<script>
				toggleCreateUser = function (event) {
					var newsletterSubscribeCheckbox = document.querySelector("#EcomOrderSubscribeToNewsletter");
					var createUserToggleCheckbox = document.querySelector("#EcomUserCreateNewToggle");
					var createUserCheckbox = document.querySelector("#EcomUserCreateNew");

					if (newsletterSubscribeCheckbox.checked == true || createUserToggleCheckbox.checked == true) {
						createUserCheckbox.disabled = false;
					} else {
						createUserCheckbox.disabled = true;
					}

					if (createUserToggleCheckbox.checked == true) {
						document.querySelector("#EcomUserCreatePassword").disabled = false;
						document.querySelector("#EcomUserCreateConfirmPassword").disabled = false;
						document.querySelector('#PasswordFields').classList.remove('d-none');
					} else {
						document.querySelector("#EcomUserCreatePassword").disabled = true;
						document.querySelector("#EcomUserCreateConfirmPassword").disabled = true;
						document.querySelector('#PasswordFields').classList.add('d-none');
					}
				}
			</script>
		}
	</div>

</div>

@if (enableFindLocation && !string.IsNullOrEmpty(apiKey)) { 
	<script type="module">
		const assetLink = 'https://maps.googleapis.com/maps/api/js?key=@(apiKey)&libraries=places';

		let assetFound = false;
		document.head.querySelectorAll('script').forEach(element => {
			if (assetLink == element.src) {
				assetFound = true;
			}
		});

		swift.AssetLoader.Load(assetLink, 'js');

		if (!assetFound) {
			document.addEventListener('load.swift.assetloader', function() {
				var mapSettings = { currentCountry: "@currentCountry" };
				swift.Places.init(mapSettings);
			});
		} else if (typeof google !== 'undefined') {
			var mapSettings = { currentCountry: "@currentCountry" };
			swift.Places.init(mapSettings);
		}
	</script>
}
