@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using Dynamicweb

@{
	var themeRaw = Pageview.CurrentParagraph.Item["Theme"]?.ToString();
	string theme = !string.IsNullOrEmpty(themeRaw) ? " theme " + themeRaw.Replace(" ", "").Trim().ToLower() : "";
	string stepsIconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
	
	List<string> userAddressString = new List<string>();
	if (!string.IsNullOrEmpty(GetString("UserManagement:User.Address")))
	{
		userAddressString.Add(GetString("UserManagement:User.Address"));
	}
	if (!string.IsNullOrEmpty(GetString("UserManagement:User.Address2")))
	{
		userAddressString.Add(GetString("UserManagement:User.Address2"));
	}
	if (!string.IsNullOrEmpty(GetString("UserManagement:User.Zip")))
	{
		userAddressString.Add(GetString("UserManagement:User.Zip"));
	}
	if (!string.IsNullOrEmpty(GetString("UserManagement:User.City")))
	{
		userAddressString.Add(GetString("UserManagement:User.City"));
	}
	if (!string.IsNullOrEmpty(GetString("UserManagement:User.State")))
	{
		var countryCode = !string.IsNullOrEmpty(GetString("UserManagement:User.CountryCode")) ? GetString("UserManagement:User.CountryCode") : Pageview.Area.EcomCountryCode;
		string stateName = Dynamicweb.Ecommerce.Services.Countries.GetRegion(countryCode, GetString("UserManagement:User.UserAddress.State"))?.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) ?? string.Empty;

		userAddressString.Add(stateName);
	}
	if (!string.IsNullOrEmpty(GetString("UserManagement:User.Country")))
	{
		userAddressString.Add(GetString("UserManagement:User.Country"));
	}

	string userAddressStringCommaSeparated = (string.Join(", ", userAddressString.Select(x => x.ToString()).ToArray()));
}

<div class="h-100" id="DeliveryUser">
	<div class=" checkout-grid order-last order-lg-first@(theme)">
		@Include("Helpers/TSDSummarySidebar.cshtml")

				<form name="ordersubmit" id="ordersubmit" method="post" autocomplete="off" >
							@Include("Helpers/TSDDeliverySidebar.cshtml")
		<div class="billing-details">
			<h2>Billing Address</h2>
			<div class="billing-address">
				<input type="radio" id="billingAddress" name="billingAddress" value="billingAddress">
				<strong><label for="billingAddress">@userAddressStringCommaSeparated</label></strong>
			</div>
			<div class="billing-address">
				<input type="radio" id="billingAddress" name="billingAddress" value="billingAddress">
				<strong><label for="billingAddress">New Address</label></strong>
			</div>
			<div class="breakpoint"></div>
			<h2>Please select payment method:</h2>
			<div class="payment-options">
				<label class="payment" for="cardPayment1">
					<input type="radio" id="cardPayment1" name="cardPayment1" value="cardPayment1">
					<div class="payment-icon">@ReadFile(stepsIconPath + "applepay.svg")</div>
				</label>
				<label class="payment" for="cardPayment1">
					<input type="radio" id="cardPayment1" name="cardPayment1" value="cardPayment1">
					<div class="payment-icon">@ReadFile(stepsIconPath + "googlepay.svg")</div>
				</label>
				<label class="payment" for="cardPayment1">
					<input type="radio" id="cardPayment1" name="cardPayment1" value="cardPayment1">
					<div class="payment-icons">
					<div>@ReadFile(stepsIconPath + "visacredit.svg")</div>
					<div>@ReadFile(stepsIconPath + "visadebit.svg")</div>
					<div>@ReadFile(stepsIconPath + "mastercard.svg")</div>
					<div>@ReadFile(stepsIconPath + "americanexpress.svg")</div>
					</div>
				</label>
				<label class="payment" for="cardPayment1">
					<input type="radio" id="cardPayment1" name="cardPayment1" value="cardPayment1">
					<div class="payment-icon">@ReadFile(stepsIconPath + "paypal.svg")</div>
				</label>
				<label class="payment" for="cardPayment1">
					<input type="radio" id="cardPayment1" name="cardPayment1" value="cardPayment1">
					<div class="payment-icon"><p>Account</p></div>
				</label>
				<label class="payment" for="cardPayment1">
					<input type="radio" id="cardPayment1" name="cardPayment1" value="cardPayment1">
					<div class="payment-icon"><p>Bank Transfer</p></div>
				</label>
				<label class="payment" for="cardPayment1">
					<div class="card-payment-container">
						<div class="payment-input">
						<strong>Pay by credit card</strong>
						<span>@ReadFile(stepsIconPath + "locktsd.svg")<strong>Enter your 16 digit card number, expiry & CVC</strong></span>
						<input type="text">
						</div>
						<div class="lock">@ReadFile(stepsIconPath + "locktsd.svg")</div>
					</div>
				</label>
			</div>
			<div class="breakpoint"></div>
					<!-- <button type="submit" class="next-step-button" id="GoToCheckoutButton">
		Pay by card</button> -->

<button type="submit" name="@GetString("CartV2.NextStepButtonName")" id="PayButton" class="next-step-button" >
			Pay by card
		</button>

			<input type="hidden" id="CurrentStep">
		</form>
		</div>
		<div class="column-step-container">
		<div class="column column-step">
			<div class="next-section">
			<h1 class="numberHeader">3</h1>
				<p class="section-text">@Translate("ORDER COMPLETE")</p>
			</div>
			<div class="arrow-grey">@ReadFile(stepsIconPath + "arrowgrey.svg")</div>
		</div>
		</div>
	</div>
</div>

<script>
	function submitForm() {
		document.querySelector("#CurrentStep").name = "@GetString("CartV2.CurrentStepButtonName")";
		swift.PageUpdater.Update(document.querySelector("#ordersubmit"));
	}
</script>

	<script>
		gtag("event", "add_shipping_info", {
			currency: "@GetString("Ecom:Order.CurrencyCode")",
			value: @GetString("Ecom:Order.Price.Price.Value").Replace(",", "."),
			items: [
				@foreach (LoopItem orderline in GetLoop("OrderLines")) {
					<text>
					{
						item_id: "@orderline.GetString("Ecom:Order:OrderLine.ProductID")",
						item_name: "@orderline.GetString("Ecom:Order:OrderLine.ProductName")",
						currency: "@orderline.GetString("Ecom:Order:OrderLine.UnitPrice.CurrencyCode")",
						price: @orderline.GetDouble("Ecom:Order:OrderLine.TotalPriceWithProductDiscounts.Price.Value").ToString("0.00", System.Globalization.CultureInfo.InvariantCulture),
						quantity: @orderline.GetDouble("Ecom:Order:OrderLine.Quantity").ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)
					},
					</text>
				}
			]
		});
	</script>

@* Address format helper methods *@
@Include("../Helpers/DeliveryAddressDisplayFormatted.cshtml")
@Include("../Helpers/UserAddressDisplayFormatted.cshtml")


<style>

.lock {
    display: flex;
    align-items: center;
}

.card-payment-container {
	display: flex;
    justify-content: space-between;
    width: 100%;
}

.payment-input {
	display: flex;
    flex-direction: column;
    gap: 10px;
}

.payment-input :nth-child(1) {
	color: #19C07A;
}

.payment-input span {
	display: flex;
    gap: 10px;
	align-items: center;
}

.payment-input span svg{
	height: 40px;
	width: 40px;
}

.payment-options label:last-of-type {
	border: 1px solid #19C07AB2;
    background-color: #19C07A1A;
}

.payment-options label:last-of-type svg {
	color: #19C07A;
}

.payment-icons {
	display: grid;
    grid-template-columns: 1fr 1fr;
    grid-column-gap: 10px;
    grid-row-gap: 10px;
}

.payment-icon, .payment-icons {
	margin: 0 auto;
}

.payment-icon {
    display: flex;
    align-items: center;
}

.arrow-grey {
  margin-bottom: 20px;
}

input[type="radio"]:checked + .payment {
	border-color: #007BFF; 
	background-color: #E0F0FF;
}

.payment {
	display: flex;
    padding: 20px;
    border: 1px solid #CED3DC;
	border-radius: 10px;
    gap: 20px;
	cursor: pointer;
	color: revert;
	text-transform: revert;
	font-weight: revert;
	font-size: revert;
}

.payment p {
	margin: 0px !important;
}

.payment-options {
	display: grid;
	grid-template-columns: 1fr 1fr 1fr;
	grid-template-rows: 1fr 1fr 1fr;
	grid-column-gap: 20px;
	grid-row-gap: 20px;
	background-color: transparent;
}

.payment-options .payment:last-of-type {
	grid-column: 1 / span 3;
    display: flex;
    align-items: center;
    gap: 20px;
}



.billing-address {
	display: flex;
	gap: 20px;
}

.billing-details {
	padding: 20px;
	background-color: white;
}

.next-step-button {
	background-color: #04AA6D;
    border: none;
    color: white;
    padding: 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    border-radius: 12px;
	text-transform: uppercase;
    font-weight: bold;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
	width: 100%;
    margin-top: 20px;
}

.breakpoint {
	width: 100%;
	border: solid 1px #CED3DC;
	margin-top: 40px;
    margin-bottom: 40px !important;
}

input[type='radio'] {
    accent-color: #D5352D;
}


h2 {
	font-size: 28px;
	margin-bottom: 20px;
}

div, form, input, textarea {
	border-radius: 10px;
}

form {
	background-color: white;
	padding: 20px;
}

form label, .payment-icon p{
	color: #D5352D;
	text-transform: uppercase;
	font-weight: 600;
	font-size: 14px;
}

form input, textarea {
	padding: 14px;
	border: 1px solid #9599A0;
}

.checkout-grid {
	display: grid;
	grid-template-columns: 1fr 3fr 1fr;
	grid-template-rows: 1fr;
	grid-column-gap: 20px;
	grid-row-gap: 0px;
	background-color: transparent;
}

.column-step .next-section {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-direction: column;
    padding-top: 20px;
    height: 180px;
}

.column-step .next-section .section-text {
    color: #D5352D;
    font-weight: 600;
    line-height: 15px;
    transform: rotate(270deg);
}

  .column-step {
    flex-grow: 0 !important;
    border-radius: 10px;
    min-width: 29%;
	background-color: white !important;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.column-step-container {
  display: grid;
  grid-column: 3;
  gap: 20px;
  padding-right: 0px !important;
}
@@media (max-width: 768px) {
.card-payment-container {
    display: flex;
    width: 100%;
    flex-direction: column;
    align-items: center;
    gap: 20px;
}

.payment-input :nth-child(1) {
    text-align: center;
}

}
@@media (max-width: 998px) {
.checkout-grid {
	display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 2fr 1fr;
    grid-column-gap: 20px;
    grid-row-gap: 20px;
    background-color: transparent;
}

.billing-details, form {
    grid-column: 1 / span 3;
    grid-row: 1;
}

.column-step {
	align-items: center;
	justify-content: revert;
}

.section-text {
	width: 20px;
}

.column-step-container {
grid-column: 2;
display: grid;
}

#deliverySummarySidebar {
grid-column: 2 / span 1;
}

#summarySidebar {
grid-column: 1;
}

.payment-options .payment:last-of-type {
    display: flex;
    grid-column: span 2;
    grid-row: 4;
    align-items: center;
    gap: 20px;
}

.payment-options {
grid-template-columns: 1fr 1fr;
}

}
</style>