@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend

@functions {

	private Dynamicweb.Frontend.LinkViewModel GetLink(ItemViewModel item)
	{
		string linkType = item.GetRawValueString("LinkType", "page");

		if (linkType == "page" && item.GetLink("ButtonLink") is LinkViewModel buttonLink)
		{
			return buttonLink;
		}
		else if (linkType == "product-group")
		{
			IList<ProductGroupViewModel> selectedGroups = item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
			IList<string> groupIds = new List<string> { };

			if (selectedGroups != null)
			{
				foreach (var fromGroup in selectedGroups)
				{
					groupIds.Add(fromGroup.Id);
				}
			}

			return new Dynamicweb.Frontend.LinkViewModel()
			{
				Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
				IsExternal = false
			};
		}
		else if (linkType == "product")
		{
			ProductListViewModel products = item.GetValue<ProductListViewModel>("ProductLink");
			IList<string> productIds = new List<string> { };

			if (products != null && products.Products.Any())
			{
				foreach (var product in products.Products)
				{
					productIds.Add(product.Id);
				}
				string productLink;
				if (productIds.Count != 1)
				{
					productLink = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&MainProductId=" + string.Join(",", productIds).Trim();
				}
				else
				{
					productLink = products.Products?.FirstOrDefault()?.GetProductLink(GetPageIdByNavigationTag("Shop"), false);
				}

				return new Dynamicweb.Frontend.LinkViewModel()
				{
					Url = productLink,
					IsExternal = false
				};
			}
		}

		return new Dynamicweb.Frontend.LinkViewModel();
	}

	private string RenderButton(ItemViewModel item, string buttonSize)
	{
		var link = GetLink(item);
		string stretchedLink = item.GetRawValueString("StretchedLink", string.Empty);
		stretchedLink = stretchedLink == "not-clickable" ? string.Empty : stretchedLink;
		stretchedLink = stretchedLink == "clickable" ? "stretched-link" : stretchedLink;

		if (link != null && !string.IsNullOrEmpty(item.GetString("ButtonLabel")))
		{
			string target = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "target=\"_blank\"" : "";
			string rel = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "rel=\"noopener\"" : "";

			string buttonStyle = item.GetRawValueString("ButtonStyle", "primary");
			buttonStyle = buttonStyle == "primary" ? "btn-primary" : buttonStyle;
			buttonStyle = buttonStyle == "secondary" ? "btn-secondary" : buttonStyle;
			buttonStyle = buttonStyle == "link" ? "btn-link" : buttonStyle;

			return $"<div class=\"m-0\"><a href=\"{link.Url}\" class=\"btn {buttonStyle}{buttonSize} {stretchedLink}\" {target} {rel}>{item.GetString("ButtonLabel")}</a></div>";
		}
		else if (link != null && !string.IsNullOrEmpty(link.Url))
		{
			string target = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "target=\"_blank\"" : "";
			string rel = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "rel=\"noopener\"" : "";

			return $"<a href=\"{link.Url}\" class=\"{stretchedLink}\" {target} {rel}><span class=\"visually-hidden\">{item.GetString("Title")}</span></a>";
		}

		return string.Empty;
	}

	private string RenderCustomCSS(IEnumerable<string> decorations)
	{
		var cssClasses = new List<string>();

		foreach (var itemId in decorations)
		{
			var item = Dynamicweb.Content.Services.Items.GetItem("Swift_Css", itemId);
			item.TryGetValue("Class", out object classes);

			if (classes is null)
			{
				continue;
			}

			var cssString = (string)classes;

			if (cssString.StartsWith("["))
			{
				var cssArray = Dynamicweb.Core.Converter.Deserialize<string[]>(cssString);
				cssClasses.AddRange(cssArray);
			}
			else
			{
				cssClasses.Add(cssString.Replace(",", " "));
			}
		}

		return string.Join(" ", cssClasses).Trim();
	}
}

@{
	bool movePageBehind = false;
	bool isFirstPoster = false;
	string movePageBehindClass = string.Empty;
	if (Pageview.Page.PropertyItem != null)
	{
		string headerCssClass = Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"] != null ? Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
		movePageBehind = headerCssClass == "fixed-top" && !Pageview.IsVisualEditorMode ? true : false;
		if (movePageBehind)
		{
			movePageBehindClass = " poster-behind";
			if (!Dynamicweb.Context.Current.Items.Contains("firstPosterIsRendered"))
			{
				isFirstPoster = true;
				Dynamicweb.Context.Current.Items.Add("firstPosterIsRendered", true);
			}
		}
	}

	string title = Model.Item.GetString("Title");
	var sliderItems = Model.Item?.GetItems("Slider_Items") ?? Enumerable.Empty<Dynamicweb.Frontend.ItemViewModel>().ToList();

	// Style
	string buttonSize = Model.Item.GetRawValueString("buttonSize", "regular");
	buttonSize = buttonSize == "small" ? " btn-sm" : buttonSize;
	buttonSize = buttonSize == "regular" ? "" : buttonSize;
	buttonSize = buttonSize == "large" ? " btn-lg" : buttonSize;
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", string.Empty);
	switch (contentPadding)
	{
		case "small":
			contentPadding = " p-3";
			break;
		case "large":
			contentPadding = " p-4";
			break;
	}
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-1");
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? "theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	var decorations = Model.Item?.GetList("CssDecorations")?.GetRawValue().OfType<string>() ?? Enumerable.Empty<string>();
	string css = RenderCustomCSS(decorations);

	// Navgation
	string slidesPerPage = $"slider-item-show{Model.Item.GetRawValueString("SlidesPerPage", "1")}";
	string sliderRatio = Model.Item.GetRawValueString("SliderRatio", "original") != "original" ? $"slider-item-ratio {Model.Item.GetRawValueString("SliderRatio", string.Empty)}" : string.Empty;
	string navigationStyle = $"{Model.Item.GetRawValueString("NavigationStyle", "slider-nav-round")}";
	string navigationPlacement = $"{Model.Item.GetRawValueString("NavigationPlacement", "slider-nav-on-slides")}";
	string indicatorStyle = $"{Model.Item.GetRawValueString("IndicatorStyle", string.Empty)}";
	string revealSlides = Model.Item.GetRawValueString("RevealSlides", "no-reveal") == "reveal" ? "slider-item-reveal" : string.Empty;
	string sliderItemsGap = Model.Item.GetRawValueString("SliderItemsGap", "slider-item-gap") == "slider-item-nogap" ? "slider-item-nogap" : string.Empty;
	string navigationAlwaysVisible = (Model.Item.GetBoolean("NavigationAlwaysVisible")) ? "slider-nav-visible" : string.Empty;
	string navigationVisibleOnTouch = (Model.Item.GetBoolean("NavigationVisibleOnTouch")) ? "slider-nav-touch" : string.Empty;
	string navigationShowScrollbar = (Model.Item.GetBoolean("NavigationShowScrollbar")) ? "slider-nav-scrollbar" : string.Empty;
	string scrollBarForceMobile = (Model.Item.GetBoolean("NavigationShowScrollbar")) ? "--swiffy-slider-track-height:0.5rem !important;" : string.Empty;
	string navigationSmall = (Model.Item.GetBoolean("NavigationSmall")) ? "slider-nav-sm" : string.Empty;
	string navigationInvertColors = (Model.Item.GetBoolean("NavigationInvertColors")) ? "slider-nav-dark" : string.Empty;
	string navigationSlideEntirePage = (Model.Item.GetBoolean("NavigationSlideEntirePage")) ? "slider-nav-page" : string.Empty;
	string navigationNoLoop = (Model.Item.GetBoolean("NavigationNoLoop")) ? "slider-nav-noloop" : string.Empty;
	string indicatorsOutsideSlider = (Model.Item.GetBoolean("IndicatorsOutsideSlider") && indicatorStyle != string.Empty) ? "slider-indicators-outside" : string.Empty;
	string indicatorsHighlightActive = (Model.Item.GetBoolean("IndicatorsHighlightActive")) ? "slider-indicators-highlight" : string.Empty;
	string indicatorsInvertColors = (Model.Item.GetBoolean("IndicatorsInvertedColors")) ? "slider-indicators-dark" : string.Empty;
	string indicatorsVisibleOnSmallDevices = (Model.Item.GetBoolean("IndicatorsVisibleOnSmallDevices")) ? "slider-indicators-sm" : string.Empty;
	string animation = Model.Item.GetRawValueString("Animation", string.Empty) != string.Empty ? $"slider-nav-animation {Model.Item.GetRawValueString("Animation")}" : string.Empty;
	string autoplay = (Model.Item.GetBoolean("Autoplay")) ? "slider-nav-autoplay" : string.Empty;
	string autoplayInterval = Model.Item.GetRawValueString("AutoplayInterval", string.Empty);
	bool hideSliderNavigation = false;

	var parms = new Dictionary<string, object>();
	parms.Add("cssClass", "h-100 w-100");
	parms.Add("columns", Model.GridRowColumnCount);

	if (navigationStyle == "slider-nav-none")
	{
		hideSliderNavigation = true;
	}
}
<div class="h-100 grid gap-0">
	<div class="g-col-12 @(css) item_@(Model.Item.SystemName.ToLower())">
		<div id="@Model.ID" class="user-select-none" style="scroll-margin-top:var(--header-height,150px)"></div>
		<div id="Slider_@Model.ID" class="swiffy-slider @(sliderRatio) @(slidesPerPage) @(navigationStyle) @(revealSlides) @(navigationPlacement) @(navigationAlwaysVisible) @(navigationVisibleOnTouch) @(sliderItemsGap) @(indicatorStyle) @(navigationShowScrollbar) @(navigationSmall) @(navigationInvertColors) @(indicatorsOutsideSlider) @(navigationNoLoop) @(indicatorsHighlightActive) @(indicatorsInvertColors) @(indicatorsVisibleOnSmallDevices) @(navigationSlideEntirePage) @(animation) @(autoplay) @(theme)@(contentPadding)" style="--swiffy-slider-nav-light:var(--swift-foreground-color);--swiffy-slider-nav-dark:var(--swift-background-color);visibility:hidden;opacity:0;@(scrollBarForceMobile)" data-slider-nav-autoplay-interval="@(autoplayInterval)">
			<ul class="slider-container">
				@{
					bool isFirst = true;
					parms.Add("alt", string.Empty);
				}

				@foreach (var item in sliderItems)
				{
					isFirst = false;

					string itemLayout = item.GetRawValueString("ItemLayout", "poster");
					string layout = item.GetRawValueString("Layout", "align-middle-center-text-center");
					string containerWidth = "container-xl";
					FileViewModel image = item.GetFile("Image");
					int xPos = image?.FocalPositionFromLeft ?? 50;
					int yPos = image?.FocalPositionFromTop ?? 50;
					string active = isFirst ? "active" : "";
					string alignment = string.Empty;
					string maxWidth = item.GetRawValueString("TextReadability", "max-width-on");
					maxWidth = maxWidth == "max-width-on" ? "style=\"grid-template-columns: minmax(auto,75ch);\"" : maxWidth;
					maxWidth = maxWidth == "max-width-off" ? string.Empty : maxWidth;
					string titleColor = item.GetString("TitleColor", "text-inherit");
					string titleOpacity = item.GetString("TitleOpacity", "opacity-100");
					string subtitleColor = item.GetString("SubtitleColor", "text-inherit");
					string subtitleOpacity = item.GetString("SubtitleOpacity", "opacity-100");
					string textColor = item.GetString("TextColor", "text-inherit");
					string textOpacity = item.GetString("TextOpacity", "opacity-100");
					theme = !string.IsNullOrWhiteSpace(item.GetRawValueString("Theme")) && item.GetRawValueString("Theme") != "none" ? " theme " + item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : theme;
					parms["alt"] = !string.IsNullOrEmpty(item.GetString("ImageAlt")) ? item.GetString("ImageAlt") : item.GetString("Title", string.Empty);

					switch (layout)
					{
						case "align-top-left-text-left":
							alignment = "text-start justify-content-start align-items-start";
							break;
						case "align-top-center-text-center":
							alignment = "text-center justify-content-center align-items-start";
							break;
						case "align-top-right-text-right":
							alignment = "text-end justify-content-end align-items-start";
							break;
						case "align-middle-left-text-left":
							alignment = "text-start justify-content-start align-items-center";
							break;
						case "align-middle-center-text-center":
							alignment = "text-center justify-content-center align-items-center";
							break;
						case "align-middle-right-text-right":
							alignment = "text-end justify-content-end align-items-center";
							break;
						case "align-bottom-left-text-left":
							alignment = "text-start justify-content-start align-items-end";
							break;
						case "align-bottom-center-text-center":
							alignment = "text-center justify-content-center align-items-end";
							break;
						case "align-bottom-right-text-right":
							alignment = "text-end justify-content-end align-items-end";
							break;
					}

					switch (itemLayout)
					{
						case "poster":

							<li class="@(theme)">
								@RenderPartial("Components/Image.cshtml", image ?? new Dynamicweb.Frontend.FileViewModel(), parms)

								@{string position = image is object ? "position-absolute top-0 bottom-0 start-0 end-0 " : string.Empty;}

								<div class="@(position)h-100 grid grid-1 p-3 px-xl-3 py-xl-4 @(containerWidth) @(alignment)" @(maxWidth)>
									<div class="grid grid-1 gap-3">
										@if (!string.IsNullOrEmpty(item.GetString("Title")) && !item.GetBoolean("HideTitle"))
										{
											<h2 class="@titleFontSize @titleColor @titleOpacity m-0">@item.GetString("Title")</h2>
										}
										@if (!string.IsNullOrEmpty(item.GetString("Subtitle")))
										{
											<p class="@subtitleFontSize @subtitleColor @subtitleOpacity lead m-0">@item.GetString("Subtitle")</p>
										}
										@if (!string.IsNullOrEmpty(item.GetString("Text")))
										{
											<div class="mb-0-last-child @textColor @textOpacity">@item.GetString("Text")</div>
										}
										@RenderButton(item, buttonSize)
									</div>
								</div>
							</li>

							break;

						case "story-image-left":

							<li class="@(theme)">
								<div class="row g-0 h-100">
									<div class="col-12 col-lg-6 col-xl-7 mh-100">
										<div class="overflow-hidden h-100 w-100">
											@RenderPartial("Components/Image.cshtml", image ?? new Dynamicweb.Frontend.FileViewModel(), parms)
										</div>
									</div>
									<div class="col-12 col-lg-6 col-xl-5 mh-100 grid grid-1 p-3 px-xl-3 py-xl-4 @(containerWidth) @(alignment)" @(maxWidth)>
										<div class="grid grid-1 gap-3">
											@if (!string.IsNullOrEmpty(item.GetString("Subtitle")))
											{
												<p class="@subtitleFontSize @subtitleColor @subtitleOpacity lead m-0">@item.GetString("Subtitle")</p>
											}
											@if (!string.IsNullOrEmpty(item.GetString("Title")) && !item.GetBoolean("HideTitle"))
											{
												<h2 class="@titleFontSize @titleColor @titleOpacity m-0">@item.GetString("Title")</h2>
											}
											@if (!string.IsNullOrEmpty(item.GetString("Text")))
											{
												<div class="mb-0-last-child @textColor @textOpacity">@item.GetString("Text")</div>
											}
											@RenderButton(item, buttonSize)
										</div>
									</div>
								</div>
							</li>

							break;

						case "story-image-right":

							<li class="@(theme)">
								<div class="row g-0 h-100">
									<div class="col-12 col-lg-6 col-xl-5 mh-100 grid grid-1 p-3 px-xl-3 py-xl-4 @(containerWidth) @(alignment)" @(maxWidth)>
										<div class="grid grid-1 gap-3">

											@if (!string.IsNullOrEmpty(item.GetString("Subtitle")))
											{
												<p class="@subtitleFontSize @subtitleColor @subtitleOpacity lead m-0">@item.GetString("Subtitle")</p>
											}
											@if (!string.IsNullOrEmpty(item.GetString("Title")) && !item.GetBoolean("HideTitle"))
											{
												<h2 class="@titleFontSize @titleColor @titleOpacity m-0">@item.GetString("Title")</h2>
											}
											@if (!string.IsNullOrEmpty(item.GetString("Text")))
											{
												<div class="mb-0-last-child @textColor @textOpacity">@item.GetString("Text")</div>
											}
											@RenderButton(item, buttonSize)
										</div>
									</div>
									<div class="col-12 col-lg-6 col-xl-7 mh-100">
										@RenderPartial("Components/Image.cshtml", image ?? new Dynamicweb.Frontend.FileViewModel(), parms)
									</div>
								</div>
							</li>

							break;

						case "logo":

							<li class="@(theme)">
								@if (image is object)
								{
									var link = GetLink(item);

									if (link is object && !string.IsNullOrEmpty(link.Url))
									{
										string target = link.IsExternal ? "target=\"_blank\"" : string.Empty;
										<a href="@link.Url" class="d-flex h-100 text-center" @(target)>
											<img src="@image.Path" class="mw-100 mh-100 m-auto" alt="@(!string.IsNullOrEmpty(item.GetString("ImageAlt")) ? item.GetString("ImageAlt") : item.GetString("Title", string.Empty))" loading="lazy" style="object-fit: contain;">
										</a>
									}
									else
									{
										<div class="d-flex h-100 text-center">
											<img src="@image.Path" class="mw-100 mh-100 m-auto" alt="@(!string.IsNullOrEmpty(item.GetString("ImageAlt")) ? item.GetString("ImageAlt") : item.GetString("Title", string.Empty))" loading="lazy" style="object-fit: contain;">
										</div>
									}
								}
							</li>

							break;
					}
				}
			</ul>

			@if (!hideSliderNavigation)
			{
				<button type="button" title="@Translate("Previous slide")" class="slider-nav" style="z-index:1;">
					<span class="visually-hidden">@Translate("Previous slide")</span>
				</button>
				<button type="button" title="@Translate("Next slide")" class="slider-nav slider-nav-next" style="z-index:1;">
					<span class="visually-hidden">@Translate("Next slide")</span>
				</button>
			}

			@if (indicatorStyle != "slider-indicators-hidden")
			{
				<div class="slider-indicators" style="z-index:1;">
					@{
						string isActive = "active";
						int slideCount = 1;
					}

					@foreach (var item in sliderItems)
					{
						<button class="@isActive" type="button" title='@Translate("Go to slide") @slideCount'>
							<span class="visually-hidden">@Translate("Go to slide") @slideCount</span>
						</button>

						slideCount++;
						isActive = null;
					}
				</div>
			}
		</div>

		<script type="module" src="/Files/Templates/Designs/Swift/Assets/js/swiffy-slider.js"></script>
		<script>
			window.addEventListener("load", () => {
				swift.AssetLoader.Load('/Files/Templates/Designs/Swift/Assets/css/swiffy-slider.min.css', 'css');
				window.swiffyslider.initSlider(document.querySelector('#Slider_@Model.ID'));
				document.querySelector('#Slider_@Model.ID').style.opacity = 1;
				document.querySelector('#Slider_@Model.ID').style.visibility = "visible";
			});
		</script>
	</div>
</div>

@if (movePageBehind && isFirstPoster)
{
	<script>
		['resize', 'load'].forEach(function (e) {
			window.addEventListener(e, () => swift.Scroll.setContentPosition());
		});
	</script>
}
