@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	var pageItem = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page).Item;
	var parms = new Dictionary<string, object>();
	parms.Add("cssClass", "h-100 w-100");
	parms.Add("columns", Model.GridRowColumnCount);
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string layout = Model.Item.GetRawValueString("Layout", "CardCenterBottom");
	bool hideCoverImage = Model.Item?.GetBoolean("HideCoverImage") ?? false;
	bool hideTitle = Model.Item?.GetBoolean("HideTitle") ?? false;
	bool hideSummary = Model.Item?.GetBoolean("HideSummary") ?? false;
	bool hidePublishedDate = Model.Item?.GetBoolean("HidePublishedDate") ?? false;
	bool hideAuthor = Model.Item?.GetBoolean("HideAuthor") ?? false;
	var pageTitle = !string.IsNullOrEmpty(pageItem.GetString("Title")) && !hideTitle ? pageItem.GetString("Title") : string.Empty;
	var pageSummary = !string.IsNullOrEmpty(pageItem.GetString("Summary")) && !hideSummary ? pageItem.GetString("Summary") : string.Empty;
	var pageCoverImage = pageItem.GetFile("CoverImage") is object && !hideCoverImage ? pageItem.GetFile("CoverImage") : null;
	var pageAuthor = pageItem?.GetUsers("Author")?.FirstOrDefault() ?? null;
	var pagePublishedDate = !string.IsNullOrEmpty(pageItem.GetString("PublishedDate")) && !hidePublishedDate ? pageItem.GetDateTime("PublishedDate").ToShortDateString() : string.Empty;
	var pagePublishedDateDatetime = !string.IsNullOrEmpty(pagePublishedDate) ? pageItem.GetDateTime("PublishedDate").ToString("yyyy-MM-dd") : string.Empty;
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
	string authorImagePath = pageAuthor is object && pageAuthor?.Image is object ? $"/Admin/Public/GetImage.ashx?image={pageAuthor?.Image}&width=48&height=48&Crop=0&format=webp" : string.Empty;
	string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
	string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} m-0\" itemprop=\"headline\">";
	string headingLevelStop = $"</{headingLevel}>";
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", string.Empty);
	string order = layout == "InfoTopAlignedLeftImageBottom" || layout == "InfoTopAlignedCenterImageBottom" ? " order-first" : string.Empty;
	string textAlignment = layout == "InfoTopAlignedCenterImageBottom" ? " text-center" : string.Empty;
	string wrapperAlignment = layout == "InfoTopAlignedCenterImageBottom" || layout == "InfoCardAboveImageAlignedBottom" ? " justify-content-center" : string.Empty;
	string infoCardBackground = string.IsNullOrEmpty(theme) ? "background-color:var(--swift-background-color); " : string.Empty;

	switch (contentPadding){
		case "none":
			contentPadding = string.Empty;
			break;
		case "small":
			contentPadding = " p-3";
			break;
		case "large":
			contentPadding = " p-5";
			break;
		}
}

@switch(layout){
	case "InfoAboveImageAlignedCenter":
		if ((pageCoverImage != null || !string.IsNullOrEmpty(pageTitle) || !string.IsNullOrEmpty(pageSummary)) || (pageAuthor != null && !hideAuthor || !string.IsNullOrEmpty(pagePublishedDate)))
		{
			<div class="item_@(Model.Item.SystemName.ToLower())">
				@{
					if (pageCoverImage != null || !string.IsNullOrEmpty(pageTitle) || !string.IsNullOrEmpty(pageSummary)){
						<div class="position-relative@(theme)" style="aspect-ratio: 32/9">
							@if (pageCoverImage != null){
								<div style="aspect-ratio: 32/9">
									@RenderPartial("Components/Image.cshtml", pageCoverImage ?? new Dynamicweb.Frontend.FileViewModel(), parms)
								</div>
							}
							@if (!string.IsNullOrEmpty(pageTitle) || !string.IsNullOrEmpty(pageSummary))
							{
								<div class="container-xl d-flex flex-column gap-3 align-items-center justify-content-center text-center position-absolute top-0 bottom-0 end-0 start-0@(contentPadding)">
									@if (!string.IsNullOrEmpty(pageTitle))
									{
										@headingLevelStart
										@pageTitle
										@headingLevelStop
									}
									@if (!string.IsNullOrEmpty(pageSummary))
									{
										<h5 class="@subtitleFontSize m-0">@pageSummary</h5>
									}
								</div>
							}
						</div>
					}
					if (pageAuthor != null && !hideAuthor || !string.IsNullOrEmpty(pagePublishedDate)){
						<div class="d-flex align-items-center justify-content-center gap-3@(theme)@(contentPadding)">
							@if (pageAuthor != null && !hideAuthor)
							{
								<div class="d-flex align-items-center gap-3">
									@if (pageAuthor != null && !hideAuthor)
									{
										<div class="d-flex align-items-center gap-2">
											@if (!string.IsNullOrEmpty(pageAuthor.Image))
											{
												<img class="img-fluid rounded-circle" src="@authorImagePath" loading="lazy" width="32" height="32">
											}
											else
											{
												<div class="rounded-circle icon-1 p-2" style="background-color: var(--swift-foreground-color);color:var(--swift-background-color)">
													@ReadFile(iconPath + "user.svg")
												</div>
											}
											@if (!string.IsNullOrEmpty(pageAuthor.Name))
											{
												<div class="fs-7 opacity-85" itemprop="author">@pageAuthor.Name</div>
											}
										</div>
									}
									@if (!string.IsNullOrEmpty(pagePublishedDate))
									{
										<time class="fs-7 opacity-85" datetime="@pagePublishedDateDatetime" itemprop="datePublished">@pagePublishedDate</time>
									}
								</div>			
							}
						</div>
					}
				}
			</div>
		}
	break;
	case "InfoCardAboveImageAlignedBottom":
		if (pageCoverImage != null || (!string.IsNullOrEmpty(pageTitle) || !string.IsNullOrEmpty(pageSummary) || pageAuthor != null && !hideAuthor || !string.IsNullOrEmpty(pagePublishedDate)))
		{
			<div class="item_@(Model.Item.SystemName.ToLower())">
				@{
					if (pageCoverImage != null)
					{
						<div class="mb-n5" style="aspect-ratio: 32/9">
							@{ @RenderPartial("Components/Image.cshtml", pageCoverImage ?? new Dynamicweb.Frontend.FileViewModel(), parms) }
						</div>        
					}
					if (!string.IsNullOrEmpty(pageTitle) || !string.IsNullOrEmpty(pageSummary) || pageAuthor != null && !hideAuthor || !string.IsNullOrEmpty(pagePublishedDate)){
						<div class="position-relative d-flex flex-column align-items-center mx-3">
							<div class="d-flex flex-column gap-3 shadow text-center w-100@(theme)" style="@(infoCardBackground)max-width:40rem;">
								@if (!string.IsNullOrEmpty(pageTitle) || !string.IsNullOrEmpty(pageSummary) || pageAuthor != null && !hideAuthor || !string.IsNullOrEmpty(pagePublishedDate))
								{
									<div class="grid grid-1@(textAlignment)@(contentPadding)">
										@if (!string.IsNullOrEmpty(pageTitle))
										{
											@headingLevelStart
											@pageTitle
											@headingLevelStop
										}
										@if (!string.IsNullOrEmpty(pageSummary))
										{
											<h5 class="@subtitleFontSize m-0">@pageSummary</h5>
										}
										@if (pageAuthor != null && !hideAuthor || !string.IsNullOrEmpty(pagePublishedDate))
										{
											<div class="d-flex align-items-center gap-3@(wrapperAlignment)">
												@if (pageAuthor != null && !hideAuthor)
												{
													<div class="d-flex align-items-center gap-2">
														@if (!string.IsNullOrEmpty(pageAuthor.Image))
														{
															<img class="img-fluid rounded-circle" src="@authorImagePath" loading="lazy" width="32" height="32">
														}
														else
														{
															<div class="rounded-circle icon-1 p-2" style="background-color: var(--swift-foreground-color);color:var(--swift-background-color)">
																@ReadFile(iconPath + "user.svg")
															</div>
														}
														@if (!string.IsNullOrEmpty(pageAuthor.Name))
														{
															<div class="fs-7 opacity-85" itemprop="author">@pageAuthor.Name</div>
														}
													</div>
												}
												@if (!string.IsNullOrEmpty(pagePublishedDate))
												{
													<time class="fs-7 opacity-85" datetime="@pagePublishedDateDatetime" itemprop="datePublished">@pagePublishedDate</time>
												}
											</div>
										}
									</div>
								}
							</div>
						</div>
					}
				}
			</div>
		}
	break;
	case "InfoBottomAlignedLeftImageTop":
	case "InfoTopAlignedLeftImageBottom":
	case "InfoTopAlignedCenterImageBottom":
		if (pageCoverImage != null && !hideCoverImage || !string.IsNullOrEmpty(pageTitle) || !string.IsNullOrEmpty(pageSummary) || pageAuthor != null && !hideAuthor || !string.IsNullOrEmpty(pagePublishedDate)){
			<div class="grid grid-1 gap-0@(theme) item_@(Model.Item.SystemName.ToLower())">
				@if (pageCoverImage != null)
				{
					<div style="aspect-ratio: 32/9">
						@{ @RenderPartial("Components/Image.cshtml", pageCoverImage ?? new Dynamicweb.Frontend.FileViewModel(), parms) }
					</div>        
				}
				@if (!string.IsNullOrEmpty(pageTitle) || !string.IsNullOrEmpty(pageSummary) || pageAuthor != null && !hideAuthor || !string.IsNullOrEmpty(pagePublishedDate))
				{
					<div class="grid grid-1@(order)@(textAlignment)@(contentPadding)">
						@if (!string.IsNullOrEmpty(pageTitle))
						{
							@headingLevelStart
							@pageTitle
							@headingLevelStop
						}
						@if (!string.IsNullOrEmpty(pageSummary))
						{
							<h5 class="@subtitleFontSize m-0">@pageSummary</h5>
						}
						@if (pageAuthor != null && !hideAuthor || !string.IsNullOrEmpty(pagePublishedDate))
						{
							<div class="d-flex align-items-center gap-3@(wrapperAlignment)">
								@if (pageAuthor != null && !hideAuthor)
								{
									<div class="d-flex align-items-center gap-2">
										@if (!string.IsNullOrEmpty(pageAuthor.Image))
										{
											<img class="img-fluid rounded-circle" src="@authorImagePath" loading="lazy" width="32" height="32">
										}
										else
										{
											<div class="rounded-circle icon-1 p-2" style="background-color: var(--swift-foreground-color);color:var(--swift-background-color)">
												@ReadFile(iconPath + "user.svg")
											</div>
										}
										@if (!string.IsNullOrEmpty(pageAuthor.Name))
										{
											<div class="fs-7 opacity-85" itemprop="author">@pageAuthor.Name</div>
										}
									</div>
								}
								@if (!string.IsNullOrEmpty(pagePublishedDate))
								{
									<time class="fs-7 opacity-85" datetime="@pagePublishedDateDatetime" itemprop="datePublished">@pagePublishedDate</time>
								}
							</div>
						}
					</div>
				}
			</div>
		}
	break;
}


@if (Pageview.IsVisualEditorMode && hideCoverImage && hideTitle && hideSummary && hideAuthor && hidePublishedDate) {
    <div class="alert alert-info mt-3" role="alert">
        <span>@Translate("Article header: Edit this column to configure")</span>
    </div>
}
