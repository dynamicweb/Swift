@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string buttonAlignment = Model.Item.GetRawValueString("ButtonAlignment", "start");
	string buttonAlignmentClass = string.Empty;
	string buttonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
	string buttonSizeClass = string.Empty;

	switch (buttonAlignment)
	{
		case "start":
			buttonAlignmentClass = " justify-content-start";
			break;
		case "center":
			buttonAlignmentClass = " justify-content-center";
			break;
		case "end":
			buttonAlignmentClass = " justify-content-end";
			break;
	}

	switch (buttonSize)
	{
		case "small":
			buttonSizeClass = " btn-sm";
			break;
		case "large":
			buttonSizeClass = " btn-lg";
			break;
	}

	@* Button 1 *@
Dynamicweb.Frontend.LinkViewModel link1 = new Dynamicweb.Frontend.LinkViewModel();
string linkType1 = Model.Item.GetRawValueString("LinkType1", "page1");
string buttonLabel1 = Model.Item.GetString("ButtonLabel1", string.Empty);
string buttonStyle1 = Model.Item.GetRawValueString("ButtonStyle1", "Primary");
string buttonStyle1Class = string.Empty;

switch (buttonStyle1)
{
	case "primary":
		buttonStyle1Class = " btn-primary";
		break;
	case "secondary":
		buttonStyle1Class = " btn-secondary";
		break;
	case "link":
		buttonStyle1Class = " btn-link";
		break;
}

if (linkType1 == "page1" && Model.Item.GetLink("ButtonLink1") != null)
{
	link1 = Model.Item.GetLink("ButtonLink1");
}

if (linkType1 == "product-group1")
{
	IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink1");
	IList<string> groupIds = new List<string> { };

	if (selectedGroups != null)
	{
		foreach (var fromGroup in selectedGroups)
		{
			groupIds.Add(fromGroup.Id);
		}
	}
	link1 = new Dynamicweb.Frontend.LinkViewModel()
	{
		Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
		IsExternal = false
	};
}

if (linkType1 == "product1")
{
	ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink1");
	IList<string> productIds = new List<string> { };

	if (products != null && products.Products.Any())
	{
		foreach (var product in products.Products)
		{
			productIds.Add(product.Id);
		}
		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string productLink = products.Products?.FirstOrDefault()?.GetProductLink(GetPageIdByNavigationTag("Shop"), false);
		productLink = productIds.Count != 1 ? "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&" + productParameter + "=" + string.Join(",", productIds).Trim() : productLink;

		link1 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = productLink,
			IsExternal = false
		};
	}


}

	@* Button 2 *@
Dynamicweb.Frontend.LinkViewModel link2 = new Dynamicweb.Frontend.LinkViewModel();
string linkType2 = Model.Item.GetRawValueString("LinkType2", "page2");
string buttonLabel2 = Model.Item.GetString("ButtonLabel2", string.Empty);
string buttonStyle2 = Model.Item.GetRawValueString("ButtonStyle2", "Secondary");
string buttonStyle2Class = string.Empty;

switch (buttonStyle2)
{
	case "primary":
		buttonStyle2Class = " btn-primary";
		break;
	case "secondary":
		buttonStyle2Class = " btn-secondary";
		break;
	case "link":
		buttonStyle2Class = " btn-link bg-transparent";
		break;
}

if (linkType2 == "page2" && Model.Item.GetLink("ButtonLink2") != null)
{
	link2 = Model.Item.GetLink("ButtonLink2");
}

if (linkType2 == "product-group2")
{
	IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink2");
	IList<string> groupIds = new List<string> { };

	if (selectedGroups != null)
	{
		foreach (var fromGroup in selectedGroups)
		{
			groupIds.Add(fromGroup.Id);
		}
	}
	link2 = new Dynamicweb.Frontend.LinkViewModel()
	{
		Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
		IsExternal = false
	};
}

if (linkType2 == "product2")
{
	ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink2");
	IList<string> productIds = new List<string> { };

	if (products != null && products.Products.Any())
	{
		foreach (var product in products.Products)
		{
			productIds.Add(product.Id);
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string productLink = products.Products?.FirstOrDefault()?.GetProductLink(GetPageIdByNavigationTag("Shop"), false);
		productLink = productIds.Count != 1 ? "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&" + productParameter + "=" + string.Join(",", productIds).Trim() : productLink;

		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = productLink,
			IsExternal = false
		};
	}
}

}

@if (link1 != null && !string.IsNullOrEmpty(link1.Url) || !string.IsNullOrEmpty(buttonLabel1) || link2 != null && !string.IsNullOrEmpty(link2.Url) || !string.IsNullOrEmpty(buttonLabel2))
{
	<div id="@Model.ID" class="user-select-none" style="scroll-margin-top:var(--header-height,150px)"></div>
	<div class="d-flex@(buttonAlignmentClass)">
		<div class="d-flex gap-3">

			@if (link1 != null && !string.IsNullOrEmpty(link1.Url) || !string.IsNullOrEmpty(buttonLabel1))
			{
				string targetButtonLink1 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link1.IsExternal ? "target=\"_blank\"" : string.Empty;
				string relButtonLink1 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link1.IsExternal ? "rel=\"noopener\"" : string.Empty;

				<a href="@link1.Url" @targetButtonLink1 @relButtonLink1 class="text-nowrap btn@(buttonSizeClass)@(buttonStyle1Class)@(theme)">@buttonLabel1</a>
			}
			
			@if (link2 != null && !string.IsNullOrEmpty(link2.Url) || !string.IsNullOrEmpty(buttonLabel2))
			{
				string targetButtonLink2 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link2.IsExternal ? "target=\"_blank\"" : string.Empty;
				string relButtonLink2 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link2.IsExternal ? "rel=\"noopener\"" : string.Empty;

				<a href="@link2.Url" @targetButtonLink2 @relButtonLink2 class="text-nowrap btn@(buttonSizeClass)@(buttonStyle2Class)@(theme)">@buttonLabel2</a>
			}
		</div>
	</div>
}
