@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using System.IO

@functions
{
	private string RenderCustomCSS(IEnumerable<string> decorations)
	{
		var cssClasses = new List<string>();

		foreach (var itemId in decorations)
		{
			var item = Dynamicweb.Content.Services.Items.GetItem("Swift_Css", itemId);
			item.TryGetValue("Class", out object classes);

			if (classes is null)
			{
				continue;
			}

			var cssString = (string)classes;

			if (cssString.StartsWith("["))
			{
				var cssArray = Dynamicweb.Core.Converter.Deserialize<string[]>(cssString);
				cssClasses.AddRange(cssArray);
			}
			else
			{
				cssClasses.Add(cssString.Replace(",", " "));
			}
		}

		return string.Join(" ", cssClasses).Trim();
	}
}

@{
	string layout = Model.Item.GetRawValueString("Layout", "icon-top");
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", string.Empty);
	contentPadding = contentPadding == "none" ? "" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-3 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-5 p-md-5" : contentPadding;
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	var decorations = Model.Item?.GetList("CssDecorations")?.GetRawValue().OfType<string>() ?? Enumerable.Empty<string>();
	string css = RenderCustomCSS(decorations);

	string target = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && Model.Item.GetString("Link").Contains("http") ? "target=\"_blank\"" : string.Empty;
	string rel = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && Model.Item.GetString("Link").Contains("http") ? "rel=\"noopener\"" : string.Empty;
	string alignment = (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle")) && !string.IsNullOrEmpty(Model.Item.GetString("Text")) ? "align-items-stretch" : "align-items-center";

	string iconColor = Model.Item.GetString("iconColor", "text-inherit");
	string iconOpacity = Model.Item.GetString("IconOpacity", "opacity-100");

	string iconSize = Model.Item.GetRawValueString("IconSize", "2");
	string imageSrc = !string.IsNullOrEmpty(Model.Item.GetString("Image")) ? Model.Item.GetFile("Image").Path : string.Empty;
	string flexGrowClass = string.Empty;

	switch (layout)
	{
		case "icon-left":
		case "icon-right":
			flexGrowClass = "flex-grow-0";
			break;
	}

	string imagePath = imageSrc != string.Empty ? imageSrc : Model.Item.GetRawValueString("Icon", string.Empty);
	imagePath = Path.GetExtension(imagePath).ToLower() != ".svg" ? "/Admin/Public/GetImage.ashx?image=" + imagePath + "&height=" + iconSize + "&width=" + iconSize + "&Crop=0&format=webp" : imagePath;
	string imgAltText = Model.Item.GetRawValueString("FeatureAltText", string.Empty);

	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h4");
	string titleColor = Model.Item.GetString("TitleColor", "text-inherit");
	string titleOpacity = Model.Item.GetString("TitleOpacity", "opacity-100");
	string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
	string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} {titleColor} {titleOpacity} m-0\">";
	string headingLevelStop = $"</{headingLevel}>";

	string textColor = Model.Item.GetString("TextColor", "text-inherit");
	string textOpacity = Model.Item.GetString("TextOpacity", "opacity-100");
}

<div class="h-100 @(contentPadding)@(theme) @(css) item_@Model.Item.SystemName.ToLower()">
	<div id="@Model.ID" class="user-select-none" style="scroll-margin-top:var(--header-height,150px)"></div>
	@if (!string.IsNullOrEmpty(Model.Item.GetString("Link")))
	{
		@:<a href="@Model.Item.GetString("Link")" class="text-decoration-none d-block h-100" @target @rel>
		}

	@switch (layout)
	{
		case "icon-top":
			<div class="d-flex flex-column gap-3 text-center mb-0-last-child">
				@if (!string.IsNullOrEmpty(Model.Item.GetString("Image")) || !imagePath.ToLower().Contains("none") && imagePath != string.Empty)
				{<div class="@flexGrowClass">
						@if (Path.GetExtension(imagePath).ToLower() == ".svg")
						{
							<div class="icon-auto @iconColor @iconOpacity" style="height: @(iconSize)px; width: @(iconSize)px;">@ReadFile(imagePath)</div>
						}
						else
						{
							<img loading="lazy" src="@imagePath" alt="@imgAltText" title="@Model.Item.GetString("Title")" style="height: @(iconSize)px; width: @(iconSize)px;">
						}
					</div>
				}

				@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle") || !string.IsNullOrEmpty(Model.Item.GetString("Text")))
				{
					<div class="mb-0-last-child">
						@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
						{
							@headingLevelStart
							@Model.Item.GetString("Title")
							@headingLevelStop
						}

						@if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
						{
							<p class="@textColor @textOpacity m-0">@Model.Item.GetString("Text")</p>
						}
					</div>
				}
			</div>
			break;
		case "icon-left":
			<div class="d-flex flex-row gap-3 h-100 text-start @alignment">
				@if (!string.IsNullOrEmpty(Model.Item.GetString("Image")) || !imagePath.ToLower().Contains("none") && imagePath != string.Empty)
				{<div class="@flexGrowClass">
						@if (Path.GetExtension(imagePath).ToLower() == ".svg")
						{
							<div class="icon-auto @iconColor @iconOpacity" style="height: @(iconSize)px; width: @(iconSize)px;">@ReadFile(imagePath)</div>
						}
						else
						{
							<img loading="lazy" src="@imagePath" alt="@imgAltText" title="@Model.Item.GetString("Title")" style="height: @(iconSize)px; width: @(iconSize)px;">
						}
					</div>
				}

				@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle") || !string.IsNullOrEmpty(Model.Item.GetString("Text")))
				{
					<div class="d-flex flex-column flex-grow-1">
						@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
						{
							@headingLevelStart
							@Model.Item.GetString("Title")
							@headingLevelStop
						}

						@if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
						{
							<p class="@textColor @textOpacity m-0">@Model.Item.GetString("Text")</p>
						}
					</div>
				}

			</div>
			break;
		case "icon-right":
			<div class="d-flex flex-row gap-3 h-100 text-end @alignment">
				@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle") || !string.IsNullOrEmpty(Model.Item.GetString("Text")))
				{
					<div class="d-flex flex-column flex-grow-1">
						@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
						{
							@headingLevelStart
							@Model.Item.GetString("Title")
							@headingLevelStop
						}

						@if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
						{
							<p class="@textColor @textOpacity m-0">@Model.Item.GetString("Text")</p>
						}
					</div>
				}

				@if (!string.IsNullOrEmpty(Model.Item.GetString("Image")) || !imagePath.ToLower().Contains("none") && imagePath != string.Empty)
				{<div class="@flexGrowClass">
						@if (Path.GetExtension(imagePath).ToLower() == ".svg")
						{
							<div class="icon-auto @iconColor @iconOpacity" style="height: @(iconSize)px; width: @(iconSize)px;">@ReadFile(imagePath)</div>
						}
						else
						{
							<img loading="lazy" src="@imagePath" alt="@imgAltText" title="@Model.Item.GetString("Title")" style="height: @(iconSize)px; width: @(iconSize)px;">
						}
					</div>
				}
			</div>
			break;
	}

	@if (!string.IsNullOrEmpty(Model.Item.GetString("Link")))
	{
	@:</a>
}
</div>
