@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@functions {

	private string RenderHeader()
	{
		var header = string.Empty;

		if(!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
		{
			string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
			string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
			string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} mb-3\">";
			string headingLevelStop = $"</{headingLevel}>";

			header += @headingLevelStart;
			header += Model.Item.GetString("Title");
			header += @headingLevelStop;
		}

		return header;
	}

}

@{
	var style = Model.Item?.GetRawValueString("Style", "dropdown");
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? $"theme {Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower()} " : string.Empty;
	var alignment = Model.Item?.GetRawValueString("Alignment", "left");
	var buttonStyle = Model.Item?.GetRawValueString("ButtonStyle", "btn-primary");
	var buttonSize = Model.Item?.GetRawValueString("ButtonSize", "btn-md");

	switch (alignment)
	{
		case "left":
			alignment = "align-items-start";
			break;
		case "center":
			alignment = "align-items-center";
			break;
		case "right":
			alignment = "align-items-end";
			break;
	}
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "none");
	switch (contentPadding)
	{
		case "none":
			contentPadding = "p-0";
			break;
		case "small":
			contentPadding = "p-3 p-md-3";
			break;
		case "large":
			contentPadding = "p-5 p-md-5";
			break;
	}
}

<div class="d-flex flex-column @(theme)@(contentPadding) @(alignment)">

	@{
		int groupId = !string.IsNullOrEmpty(Model.Item.GetRawValueString("TagGroup")) ? Model.Item.GetInt32("TagGroup") : 0;
		var group = groupId > 0 ? Dynamicweb.Content.Services.Pages?.GetPage(groupId) : null;
		var groupName = group != null ? Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(group)?.Item?.GetString("Title") : string.Empty;
		var tags = groupId > 0 ? Dynamicweb.Content.Services.Paragraphs?.GetParagraphsByPageId(groupId) : null;
		var tagGroupQuery = new string[] { };
		tagGroupQuery = Dynamicweb.Context.Current.Request.QueryString.Get("Tags") != null ? Dynamicweb.Context.Current.Request.QueryString.Get("Tags")?.Split(',') : tagGroupQuery;

		if (tags != null)
		{
			if (tags.Any())
			{
				switch (style)
				{
					case "dropdown":

					@RenderHeader()

					<label>@(groupName)</label>
					<select class="form-select" name="Tags">

						<option label="@Translate("All")"></option>

						@{
							foreach (var tag in tags)
							{
								var tagItem = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(tag)?.Item;
								var selected = string.Empty;
								if (tagGroupQuery.Any() && tagGroupQuery.Contains($"{tag.ItemId}"))
								{
									selected = "selected";
								}
											<option value="@tag.ItemId" label="@tagItem.GetString("Title")" @(selected)>@tagItem.GetString("Title")</option>
							}
						}
					</select>

					break;

				case "dropdownbutton":

					@RenderHeader()

					var facetTitle = tagGroupQuery.Any() ? Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(tags.FirstOrDefault(x => x.ItemId == tagGroupQuery.FirstOrDefault(t => t.Equals(x.ItemId))))?.Item.GetString("Title") : groupName;
					
					<div class="dropdown w-100">
						<button class="btn @(buttonStyle) @(buttonSize) dropdown-toggle w-100" type="button" id="facet-dropdown-@(Model.ID)" data-bs-toggle="dropdown" aria-expanded="false">
							@(facetTitle = !string.IsNullOrEmpty(facetTitle) ? facetTitle : groupName)
						</button>
						<div class="dropdown-menu w-100" aria-labelledby="facet-dropdown-@(Model.ID)">
							
							<select class="visually-hidden" id="select_@Model.ID" name="Tags">
								<option label="@Translate("All")"></option>
								
								@foreach (var tag in tags)
								{
									var tagItem = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(tag)?.Item;
									var selected = string.Empty;
									if (tagGroupQuery.Any() && tagGroupQuery.Contains($"{tag.ItemId}"))
									{
										selected = "selected";
									}
									<option value="@tag.ItemId" label="@tagItem.GetString("Title")" @selected>@tagItem.GetString("Title")</option>
								}
								
							</select>
							
							<button class="dropdown-item" type="button" onclick="this.closest('.dropdown-menu').querySelector('select').selectedIndex=0; this.dispatchEvent(new window.Event('change', { bubbles: true }))">@Translate("All")</button>
							@{
								var index = 1;
								foreach (var tag in tags)
								{
									var tagItem = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(tag)?.Item;
									var active = string.Empty;
									if (tagGroupQuery.Any() && tagGroupQuery.Contains($"{tag.ItemId}"))
									{
										active = "active";
									}
									<button class="dropdown-item @active" type="button" onclick="this.closest('.dropdown-menu').querySelector('select').selectedIndex=@index; this.dispatchEvent(new window.Event('change', { bubbles: true }));">@tagItem.GetString("Title")</button>
									index++;
								}
							}

						</div>
					</div>

					break;
				}
			}
		}
	}
</div>
