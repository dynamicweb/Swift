@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.CustomerExperienceCenter.Favorites
@using Dynamicweb.Core
@using System.Linq

@functions
{
	bool isLazyLoadingForProductInfoEnabled = Dynamicweb.Core.Converter.ToBoolean(Dynamicweb.Context.Current.Items["IsLazyLoadingForProductInfoEnabled"]);
	string liveInfoClass = string.Empty;
	string productInfoFeed = string.Empty;

	bool isDetailPage = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ProductID"));

	ProductListViewModel productList = new ProductListViewModel();
}

@{
	if (Dynamicweb.Context.Current.Items.Contains("ProductList"))
	{
		productList = (ProductListViewModel)Dynamicweb.Context.Current.Items["ProductList"];
	}

	if (isLazyLoadingForProductInfoEnabled)
	{
		if (Dynamicweb.Context.Current.Items.Contains("ProductInfoFeed"))
		{
			productInfoFeed = Dynamicweb.Context.Current.Items["ProductInfoFeed"]?.ToString();
			if (!string.IsNullOrEmpty(productInfoFeed))
			{
				productInfoFeed = $"data-product-info-feed=\"{productInfoFeed}\"";
			}
		}
		liveInfoClass = "js-live-info";
	}

	string anonymousUsersLimitations = Pageview.AreaSettings.GetRawValueString("AnonymousUsers", string.Empty);
	bool anonymousUser = Pageview.User == null;
	bool hideProductNumber = !string.IsNullOrEmpty(Model.Item.GetString("HideProductNumber")) ? Model.Item.GetBoolean("HideProductNumber") : false;
	bool isErpConnectionDown = !Dynamicweb.Core.Converter.ToBoolean(Dynamicweb.Context.Current.Items["IsWebServiceConnectionAvailable"]);
	bool hideStock = Model.Item.GetBoolean("HideStockState") || (Pageview.AreaSettings.GetBoolean("ErpDownHideStock") && isErpConnectionDown);
	bool hidePrice = anonymousUsersLimitations.Contains("price") && anonymousUser || Pageview.AreaSettings.GetBoolean("ErpDownHidePrices") && isErpConnectionDown;
	bool hideAddToCart = !string.IsNullOrEmpty(Model.Item.GetString("HideAddToCart")) ? Model.Item.GetBoolean("HideAddToCart") : false;
	hideAddToCart = anonymousUsersLimitations.Contains("cart") && anonymousUser || Pageview.AreaSettings.GetBoolean("ErpDownHideAddToCart") && isErpConnectionDown ? true : hideAddToCart;
	bool hideFavoritesSelector = !string.IsNullOrEmpty(Model.Item.GetString("HideFavoritesSelector")) ? Model.Item.GetBoolean("HideFavoritesSelector") : false;

	string productTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ProductTheme")) ? "theme " + Model.Item.GetRawValueString("ProductTheme").Replace(" ", string.Empty).Trim().ToLower() : string.Empty;
	string modalTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ModalTheme")) ? " theme " + Model.Item.GetRawValueString("ModalTheme").Replace(" ", string.Empty).Trim().ToLower() : "theme light";
	string textPadding = !string.IsNullOrEmpty(Model.Item.GetString("ContentPadding")) ? Model.Item.GetRawValueString("ContentPadding") : "none";
	textPadding = textPadding == "none" ? string.Empty : textPadding;
	textPadding = textPadding == "small" ? " p-2 p-lg-3" : textPadding;
	textPadding = textPadding == "large" ? " p-3 p-lg-4" : textPadding;

	string groupId = productList?.Group?.Id != null ? productList.Group.Id : string.Empty;
	string url = Dynamicweb.Context.Current.Request.RawUrl;

	var badgeParms = new Dictionary<string, object>();
	badgeParms.Add("saleBadgeType", Model.Item.GetRawValue("SaleBadgeType"));
	badgeParms.Add("saleBadgeCssClassName", Model.Item.GetRawValue("SaleBadgeDesign"));
	badgeParms.Add("newBadgeCssClassName", Model.Item.GetRawValue("NewBadgeDesign"));
	badgeParms.Add("newPublicationDays", Model.Item.GetInt32("NewPublicationDays"));
	badgeParms.Add("campaignBadgesValues", Model.Item.GetList("CampaignBadges")?.GetRawValue().OfType<string>().ToList());

	bool saleBadgeEnabled = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("SaleBadgeDesign")) && Model.Item.GetRawValueString("SaleBadgeDesign") != "none" ? true : false;
	bool newBadgeEnabled = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("NewBadgeDesign")) && Model.Item.GetRawValueString("NewBadgeDesign") != "none" ? true : false;

	var favoriteParameters = new Dictionary<string, object>();
	if (!anonymousUser && !hideFavoritesSelector)
	{
		int defaultFavoriteListId = 0;

		IEnumerable<FavoriteList> favoreiteLists = Pageview.User.GetFavoriteLists();
		if (favoreiteLists.Count() == 1)
		{
			foreach (FavoriteList list in favoreiteLists)
			{
				defaultFavoriteListId = list.ListId;
			}
		}

		favoriteParameters.Add("ListId", defaultFavoriteListId);
	}

	string iconPath = "/Files/icons/";
	string miniCartUrl = "/Default.aspx?ID=" + (GetPageIdByNavigationTag("CartService"));
	if (!miniCartUrl.Contains("LayoutTemplate"))
	{
		miniCartUrl += miniCartUrl.Contains("?") ? "&LayoutTemplate=Swift_MiniCart.cshtml" : "?LayoutTemplate=Swift_MiniCart.cshtml";
	}

	bool quantitySelector = !string.IsNullOrEmpty(Model.Item.GetString("QuantitySelector")) ? Model.Item.GetBoolean("QuantitySelector") : false;
	string featuresColumnCss = !@Model.Item.GetBoolean("HideShortDescription") ? " g-col-lg-4" : string.Empty;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", string.Empty).Trim().ToLower() : string.Empty;
}

@if (!isDetailPage)
{
	<div class="h-100@(theme) item_@Model.Item.SystemName.ToLower()" @productInfoFeed>
		@if (productList.TotalProductsCount > 0)
		{
			int pageSizeSetting = Converter.ToInt32(Dynamicweb.Context.Current.Request.QueryString.Get("OriginalPageSize")) > 0 ? Converter.ToInt32(Dynamicweb.Context.Current.Request.QueryString.Get("OriginalPageSize")) : productList.PageSize;
			int pageSize = productList.PageSize;
			pageSize += pageSizeSetting;

			int loadedProducts = productList.PageSize > productList.TotalProductsCount ? productList.TotalProductsCount : productList.PageSize;
			
			<script>
				gtag("event", "view_item_list", {
					item_list_id: "product_list_listview",
					item_list_name: "Product list (Listview)",
					items: [
						@foreach (ProductViewModel product in productList.Products)
						{
							<text>{
								item_id: "@product.Number",
								item_name: "@Dynamicweb.Core.Encoders.HtmlEncoder.JavaScriptStringEncode(product.Name)",
								currency: "@product.Price.CurrencyCode",
								price: @PriceViewModelExtensions.ToStringInvariant(product.Price)
							},</text>
						}
					]
				});
			</script>

			foreach (ProductViewModel product in productList.Products)
			{
				string link = product.GetProductLink(GetPageIdByNavigationTag("Shop"), false);
				
				string imagePath = product?.DefaultImage?.Value ?? string.Empty;
				imagePath = Dynamicweb.Context.Current.Server.UrlEncode(imagePath);
				imagePath = "/Admin/Public/GetImage.ashx?width=" + 80 + "&image=" + imagePath + "&format=webp";

				string ratio = Model.Item.GetRawValueString("ImageAspectRatio", string.Empty);
				ratio = ratio != "0" ? ratio : string.Empty;
				string ratioCssClass = ratio != string.Empty ? " ratio" : string.Empty;
				string ratioVariable = ratio != string.Empty ? "--bs-aspect-ratio: " + ratio : string.Empty;

				string imageTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("ImageTheme")) ? " theme " + Model.Item.GetRawValueString("ImageTheme").Replace(" ", string.Empty).Trim().ToLower() : string.Empty;
				string imageId = "ProductImage_" + product.Id + product.VariantId.Replace(".", "_");

				@* Alternative image *@
				var supportedImageFormats = new string[] { ".jpg", ".webp", ".png", ".gif" };
				string defaultImage = product.DefaultImage != null ? product.DefaultImage.Value : string.Empty;
				var selectedAssetCategories = Model.Item.GetRawValueString("AlternativeImageAssets");
				IEnumerable<MediaViewModel> alternativeImagesList = product.AssetCategories.Where(x => selectedAssetCategories.Contains(x.SystemName)).SelectMany(x => x.Assets);

				if (alternativeImagesList.FirstOrDefault() != null)
				{
					alternativeImagesList = alternativeImagesList.OrderByDescending(x => x.Value.Equals(defaultImage));

					if (alternativeImagesList.First().Value == defaultImage)
					{
						alternativeImagesList = alternativeImagesList.Skip(1);
					}
				}

				@* Badges *@
				DateTime createdDate = product.Created.Value;
				bool showBadges = saleBadgeEnabled && product.Discount.Price != 0 ? true : false;
				showBadges = (newBadgeEnabled && Model.Item.GetInt32("NewPublicationDays") == 0) || (newBadgeEnabled && (createdDate.AddDays(Model.Item.GetInt32("NewPublicationDays")) > DateTime.Now)) ? true : showBadges;
				showBadges = !string.IsNullOrEmpty(Model.Item.GetRawValueString("CampaignBadges")) ? true : showBadges;

				string alternativeImage = alternativeImagesList.FirstOrDefault() != null ? alternativeImagesList.FirstOrDefault().Value : string.Empty;
				alternativeImage = !string.IsNullOrEmpty(alternativeImage) ? "/Admin/Public/GetImage.ashx?width=" + 80 + "&image=" + alternativeImage + "&format=webp" : string.Empty;

				@* Main features *@
				IEnumerable<string> selectedDisplayGroups = Model.Item.GetList("MainFeatures")?.GetRawValue().OfType<string>().ToList();
				List<CategoryFieldViewModel> mainFeatures = new List<CategoryFieldViewModel>();

				foreach (var selection in selectedDisplayGroups)
				{
					foreach (CategoryFieldViewModel group in product.FieldDisplayGroups.Values)
					{
						if (selection == group.Id)
						{
							mainFeatures.Add(group);
						}
					}
				}

				string clickProductLink = "onclick=\"return clickProductLink('" + @product.Id + "', '" + @Dynamicweb.Core.Encoders.HtmlEncoder.JavaScriptStringEncode(product.Name) + "', '" + @Dynamicweb.Core.Encoders.HtmlEncoder.JavaScriptStringEncode(product.VariantName) + "', '" + @PriceViewModelExtensions.ToStringInvariant(product.Price) + "')\"";

				<article class="grid align-items-baseline gap-2 mb-3 @productTheme @textPadding @liveInfoClass" data-product-id="@product.Id" data-variant-id="@product.VariantId">
					<a href="@link" class="g-col-12 g-col-lg-9 d-flex gap-2 align-items-baseline text-decoration-none mb-2 mb-lg-0" @clickProductLink>
		
						<script>
							function clickProductLink(productId, productName, productVariant, productCurrency, productPrice) {
								if (typeof gtag !== "undefined") {
									gtag("event", "select_item", {
										item_list_id: "product_list_listview",
										item_list_name: "Product list (Listview)",
										items: [
											{
												item_id: productId,
												item_name: productName,
												currency: productCurrency,
												item_list_id: "product_list_listview",
												item_list_name: "Product list (Listview)",
												item_variant: productVariant,
												price: productPrice
											}
										]
									});
								}
							}
						</script>
						
						@if (!Model.Item.GetBoolean("HideImage"))
						{
							<div class="align-self-start" style="min-width: 80px">
								<div class="@ratioCssClass m-0" style="@(ratioVariable)">
									<figure class="m-0">
										<div class="d-flex justify-content-center align-items-center h-100 w-100">
											@if (string.IsNullOrEmpty(alternativeImage))
											{
												<img src="@imagePath" alt="@product.Name" class="mw-100 mh-100" loading="lazy" style="object-fit: cover;">
											}
											else
											{
												<img src="@imagePath" onmouseover="this.src='@alternativeImage'" onmouseout="this.src='@imagePath'" alt="@product.Name" class="mw-100 mh-100" loading="lazy" style="object-fit: cover;">
											}
										</div>
									</figure>
								</div>
							</div>
						}

						<div class="flex-grow-1">
							<div class="d-flex flex-column flex-lg-row gap-1 gap-lg-3 align-items-baseline">
								<h3 class="h6 mb-0">
									@product.Name @if (!string.IsNullOrEmpty(product.VariantName))
									{<text>(@product.VariantName)</text>}
								</h3>

								<div class="d-flex flex-wrap gap-2">
									@if (showBadges)
									{
										@RenderPartial("Components/EcommerceBadge.cshtml", product, badgeParms)
									}
								</div>

							</div>

							@if (!hideProductNumber)
							{
								<div class="fs-7 opacity-75">@product.Number</div>
							}

							@if (!hideStock)
							{
								var stockParms = new Dictionary<string, object>();
								stockParms.Add("HideInventory", Model.Item.GetBoolean("HideInventory"));

								<div class="g-col-12 fs-7 d-block d-lg-none">
									@RenderPartial("Components/Stock.cshtml", product, stockParms)
								</div>
							}

							<div class="grid">
								@if (!Model.Item.GetBoolean("HideShortDescription"))
								{
									<div class="g-col-12 g-col-lg-8 fs-7 fs-7 d-none d-lg-block short-description mb-0-last-child">
										@product.ShortDescription
									</div>
								}
								<div class="g-col-12@(featuresColumnCss)">
									@if (mainFeatures.Count > 0)
									{
										string featuresLayout = Model.Item.GetRawValueString("FeaturesLayout", "bullets");

										if (featuresLayout == "bullets")
										{
											<ul class="m-0 p-0 lh-1 fs-7 opacity-75" style="list-style-position: inside">
												@foreach (CategoryFieldViewModel mainFeatureGroup in mainFeatures)
												{
													foreach (var field in mainFeatureGroup.Fields)
													{
														string fieldValue = field.Value.Value != null ? field.Value.ToString() : string.Empty;

														if (fieldValue != string.Empty)
														{
															fieldValue = fieldValue == "False" ? Translate("No") : fieldValue;
															fieldValue = fieldValue == "True" ? Translate("Yes") : fieldValue;

															if (field.Value.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>))
															{
																fieldValue = string.Empty;
																List<string> options = new List<string>();

																foreach (FieldOptionValueViewModel option in field.Value.Value as System.Collections.Generic.List<FieldOptionValueViewModel>)
																{
																	if (!string.IsNullOrWhiteSpace(option.Value))
																	{
																		if (option.Value.ToString().Contains("#") || option.Value.StartsWith("/Files/", StringComparison.OrdinalIgnoreCase) && (Translate(field.Value.Name) == Translate("Color") || Translate(field.Value.Name) == Translate("Colour")))
																		{
																			string colorSpan = "<span class=\"colorbox-sm border\" style=\"background-color: " + option.Value + "\"></span>";
																			if (option.Value.StartsWith("/Files/", StringComparison.OrdinalIgnoreCase))
																			{
																				colorSpan = $"<img src=\"/Admin/Public/GetImage.ashx?width=16&height=16&image={option.Value}\">";
																			}
																			options.Add(colorSpan);
																		}
																		else
																		{
																			options.Add(option.Name);
																		}
																	}
																}
																string optionsString = (string.Join(", ", options.Select(x => x.ToString()).ToArray()));
																if ((Translate(field.Value.Name) == Translate("Color") || Translate(field.Value.Name) == Translate("Colour")))
																{
																	optionsString = (string.Join(" ", options.Select(x => x.ToString()).ToArray()));
																}

																fieldValue = optionsString;
															}

															if (!string.IsNullOrEmpty(fieldValue))
															{
																<li>@(field.Value.Name): @fieldValue</li>
															}
														}
													}
												}
											</ul>
										}
										else
										{
											List<string> featuresList = new List<string>();
											foreach (CategoryFieldViewModel mainFeatureGroup in mainFeatures)
											{
												foreach (var field in mainFeatureGroup.Fields)
												{
													if (field.Value.Value.GetType() == typeof(System.Collections.Generic.List<FieldOptionValueViewModel>))
													{
														List<string> options = new List<string>();
														foreach (FieldOptionValueViewModel option in field.Value.Value as System.Collections.Generic.List<FieldOptionValueViewModel>)
														{
															if (!string.IsNullOrWhiteSpace(option.Value))
															{
																if (option.Value.ToString().Contains("#") || option.Value.StartsWith("/Files/", StringComparison.OrdinalIgnoreCase) && (Translate(field.Value.Name) == Translate("Color") || Translate(field.Value.Name) == Translate("Colour")))
																{
																	string colorSpan = "<span class=\"colorbox-sm border\" style=\"background-color: " + option.Value + "\"></span>";
																	if (option.Value.StartsWith("/Files/", StringComparison.OrdinalIgnoreCase))
																	{
																		colorSpan = $"<img src=\"/Admin/Public/GetImage.ashx?width=16&height=16&image={option.Value}\">";
																	}
																	options.Add(colorSpan);
																}
																else
																{
																	options.Add(option.Value);
																}
															}
														}
														string optionsString = (string.Join(", ", options.Select(x => x.ToString()).ToArray()));
														if ((Translate(field.Value.Name) == Translate("Color") || Translate(field.Value.Name) == Translate("Colour")))
														{
															optionsString = (string.Join(" ", options.Select(x => x.ToString()).ToArray()));
														}
														featuresList.Add(field.Value.Name + ": " + optionsString);
													}
													else
													{
														if (!string.IsNullOrWhiteSpace(field.Value.Value.ToString()))
														{
															if (field.Value.Value.ToString().Contains("#") && (Translate(field.Value.Name) == Translate("Color") || Translate(field.Value.Name) == Translate("Colour")))
															{
																string colorSpan = "<span class=\"colorbox-sm border\" style=\"background-color: " + field.Value.Value + "\"></span>";
																featuresList.Add(field.Value.Name + ": " + colorSpan);
															}
															else
															{
																featuresList.Add(field.Value.Name + ": " + field.Value.Value.ToString());
															}
														}
													}
												}
											}
											string featuresString = (string.Join(", ", featuresList.Select(x => x.ToString()).ToArray()));

											<div class="opacity-75 fs-7">@featuresString</div>
										}
									}
								</div>
							</div>
						</div>
					</a>

					<div class="g-col-12 g-col-lg-3 d-flex flex-column gap-2">
						<div class="d-flex flex-column flex-sm-row gap-2 align-items-sm-center align-items-lg-baseline justify-content-end">
							@if (!hidePrice)
							{
								<div class="text-end lh-1 d-block d-lg-none">
									<div class="text-end lh-1">
										@RenderPartial("Components/Price.cshtml", product)
									</div>
								</div>
							}
							<div class="d-flex flex-wrap flex-lg-nowrap gap-3 justify-content-end">
								@if (!anonymousUser)
								{
									if (!hideFavoritesSelector)
									{
										<div>
											@RenderPartial("Components/ToggleFavorite.cshtml", product, favoriteParameters)
										</div>
									}
								}
								@if (!hideAddToCart)
								{
									if (product.VariantInfo.VariantInfo == null)
									{
										

										string disableAddToCart = null;
										double? stepQty = product.PurchaseQuantityStep > 0 ? product.PurchaseQuantityStep : 1;
										double? minQty = product.PurchaseMinimumQuantity > 0 ? product.PurchaseMinimumQuantity : 1;
										double? maxQty = null;
										double? valueQty = minQty > stepQty ? minQty : stepQty;
										bool isStockType = product.ProductType == Dynamicweb.Ecommerce.Products.ProductType.Stock;
										
										if (isStockType) { 
											if (product.NeverOutOfstock) { 
												disableAddToCart = !isLazyLoadingForProductInfoEnabled ? "disabled" : disableAddToCart;
											} else { 
												disableAddToCart = (product.StockLevel <= 0) || product.Discontinued ? "disabled" : disableAddToCart;
												maxQty = product.StockLevel;
											}	
										}
										
										<form method="post" action="@miniCartUrl">
											<input type="hidden" name="redirect" value="false">
											<input type="hidden" name="ProductId" value="@product.Id">
											<input type="hidden" name="ProductName" value="@product.Name">
											<input type="hidden" name="ProductCurrency" value="@Dynamicweb.Ecommerce.Common.Context.Currency.Code">
											<input type="hidden" name="ProductReferer" value="product_list_listview">
											<input type="hidden" name="ProductPrice" value="@PriceViewModelExtensions.ToStringInvariant(product.Price)">
											<input type="hidden" name="cartcmd" value="add">

											@if (!string.IsNullOrEmpty(product.VariantId))
											{
												<input type="hidden" name="VariantId" value="@product.VariantId">
											}

												<template class="js-step-quantity-warning">
													<div class="modal-header">
														<h1 class="modal-title fs-5">@Translate("The quantity is not valid")</h1>
														<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
													</div>
													<div class="modal-body">
														@Translate("Please select a quantity that is dividable by") @stepQty
													</div>
												</template>
												<template class="js-min-quantity-warning">
													<div class="modal-header">
														<h1 class="modal-title fs-5">@Translate("The product could not be added to the cart")</h1>
														<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
													</div>
													<div class="modal-body">
														@Translate("The quantity is not valid. You must buy at least") @minQty
													</div>
												</template>

											@if (quantitySelector)
											{
												<div class="input-group input-primary-button-group">
													<input id="Quantity_@(product.Id)_@product.VariantId.Replace(".", "_")" name="Quantity" value="@valueQty" step="@stepQty" min="@minQty" max="@maxQty" class="form-control js-quantity swift_quantity-field" style="max-width: 100px" type="number" onchange="swift.Cart.UpdateOnEnterKey(event)" onkeyup="swift.Cart.UpdateOnEnterKey(event)" @disableAddToCart>
													<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary flex-fill js-add-to-cart-button" @disableAddToCart title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)"><span class="icon-2">@ReadFile(iconPath + "shopping-cart.svg")</span></button>
												</div>
												<label for="Quantity_@(product.Id)_@product.VariantId.Replace(".", "_")" class="visually-hidden">@Translate("Quantity")</label>
											}
											else
											{
												<input id="Quantity_@(product.Id)_@product.VariantId.Replace(".", "_")" class="swift_quantity_field" name="Quantity" value="@valueQty" type="hidden" @disableAddToCart>
												<button type="button" onclick="swift.Cart.Update(event)" class="btn btn-primary js-add-to-cart-button" @disableAddToCart title="@Translate("Add to cart")" id="AddToCartButton@(product.Id)"><span class="icon-2">@ReadFile(iconPath + "shopping-cart.svg")</span></button>
											}
										</form>
									}
									else
									{
										string buttonWidth = quantitySelector ? "calc(var(--swift-button-primary-padding-x) * 2 + 1rem + 7rem)" : "calc(var(--swift-button-primary-padding-x) * 2 + 1rem)"; @* Set the width of the container to: button-primary-padding-x × 2 + 1rem for the icon + 7rem for the quantity input *@

										string buttonText = quantitySelector ? Translate("Select") : "<span class=\"icon-2\">" + @ReadFile(iconPath + "shopping-cart.svg") + "</span>";

										string variantSelectorServicePageId = !string.IsNullOrEmpty(Model.Item.GetString("VariantSelectorServicePageId")) ? Model.Item.GetLink("VariantSelectorServicePageId").PageId.ToString() : string.Empty;
										variantSelectorServicePageId = variantSelectorServicePageId != string.Empty ? variantSelectorServicePageId : GetPageIdByNavigationTag("VariantSelectorService").ToString();

										string disableVariantSelector = isLazyLoadingForProductInfoEnabled ? "disabled" : string.Empty;

										<form action="/Default.aspx?ID=@variantSelectorServicePageId" data-response-target-element="DynamicModalContent" data-preloader="inline" class="d-inline-block">
											<input type="hidden" name="ProductID" value="@product.Id">
											<input type="hidden" name="QuantitySelector" value="@quantitySelector.ToString()">
											<input type="hidden" name="HideInventory" value="@Model.Item.GetBoolean("HideInventory").ToString()">
											<input type="hidden" name="HideStockState" value="@Model.Item.GetBoolean("HideStockState").ToString()">
											<input type="hidden" name="VariantSelectorServicePage" value="@variantSelectorServicePageId">
											<input type="hidden" name="ViewType" value="ModalContent">
											@if (isLazyLoadingForProductInfoEnabled)
											{
												@* If lazy loading is enabled, bypass it because we're loading a modal window, so render everything as if it was server-side *@
												<input type="hidden" name="getproductinfo" value="true">
											}
											<button type="button" onclick="swift.PageUpdater.Update(event)" class="btn btn-primary" style="width: @buttonWidth" @disableVariantSelector title="@Translate("Select")" data-bs-toggle="modal" data-bs-target="#DynamicModal" id="OpenVariantSelectorModal@(product.Id)_@Pageview.CurrentParagraph.ID">@buttonText</button>
										</form>
									}
								}
							</div>
						</div>
						@if (!hideStock)
						{
							<div class="text-end align-self-end d-none d-lg-block">
								@RenderPartial("Components/Stock.cshtml", product)
							</div>
						}

						@if (!hidePrice)
						{
							<div class="text-end align-self-end d-none d-lg-block">
								<div class="text-end lh-1">
									@RenderPartial("Components/Price.cshtml", product)
								</div>
							</div>
						}
					</div>
				</article>

			}

			<div class="my-3" id="LoadMoreButton">
				<div class="text-center d-flex flex-column gap-3">
					<div class="opacity-85">@loadedProducts @Translate("out of") @productList.TotalProductsCount @Translate("products")</div>
					@if (productList.PageCount != 1)
					{
						string sortBySelection = Dynamicweb.Context.Current.Request?.Form["SortBy"] ?? string.Empty;
						sortBySelection = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("SortBy")) ? Dynamicweb.Context.Current.Request.QueryString.Get("SortBy") : sortBySelection;
						string mainProductId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("MainProductID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("MainProductID") : string.Empty;

						string searchQuery = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("q")) ? Dynamicweb.Context.Current.Request.QueryString.Get("q") : string.Empty;
						searchQuery = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("q")) ? Dynamicweb.Context.Current.Request.Form.Get("q") : searchQuery;
						string searchLayout = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("SearchLayout")) ? Dynamicweb.Context.Current.Request.QueryString.Get("SearchLayout") : string.Empty;

						<form method="get" action="@url" data-response-target-element="content" class="w-100">
							@foreach (FacetGroupViewModel facetGroup in productList.FacetGroups)
							{
								foreach (FacetViewModel facetItem in facetGroup.Facets)
								{
									foreach (FacetOptionViewModel facetOption in facetItem.Options)
									{
										if (facetOption.Selected)
										{
											<input type="hidden" name="@facetItem.QueryParameter" value="[@facetOption.Value]">
										}
									}
								}
							}

							@if (productList?.Group?.Id != null)
							{
								<input type="hidden" name="GroupId" value="@productList.Group.Id">
							}

							<input type="hidden" name="OriginalPageSize" value="@pageSizeSetting">
							<input type="hidden" name="PageSize" value="@pageSize">
							<input type="hidden" name="SortBy" value="@sortBySelection">
							<input type="hidden" name="RequestType" value="UpdateList">

							@if (!string.IsNullOrEmpty(searchQuery))
							{
								<input type="hidden" name="q" value="@searchQuery">
								<input type="hidden" name="SearchLayout" value="@searchLayout">
							}

							@if (!string.IsNullOrEmpty(mainProductId))
							{
								<input type="hidden" name="MainProductID" value="@mainProductId">
							}

							@{
								string nextPageLink = "/Default.aspx?ID=" + Pageview.Page.ID + "&PageSize=" + pageSize + "&SortBy=" + sortBySelection;

								foreach (FacetGroupViewModel facetGroup in productList.FacetGroups)
								{
									foreach (FacetViewModel facetItem in facetGroup.Facets)
									{
										foreach (FacetOptionViewModel facetOption in facetItem.Options)
										{
											if (facetOption.Selected)
											{
												nextPageLink += "&" + facetItem.QueryParameter + "=[" + facetOption.Value + "]";
											}
										}
									}
								}

								nextPageLink += productList?.Group?.Id != null ? "&GroupID=" + productList.Group.Id : string.Empty;
								nextPageLink += !string.IsNullOrEmpty(searchQuery) ? "&q=" + searchQuery : string.Empty;
								string disableLoadMore = isLazyLoadingForProductInfoEnabled ? "d-none" : string.Empty;
							}

							<a href="@nextPageLink" class="btn btn-primary swift_load_more_button @disableLoadMore" onclick="swift.ProductList.Update(event)" id="LoadMoreButton_@Model.ID">@Translate("Load more products")</a>
						</form>
					}
				</div>
			</div>
		}
		else
		{
			if (!Pageview.IsVisualEditorMode)
			{
				<div class="alert alert-dark m-0">
					@Translate("We did not find anything matching your search result")
				</div>
			}
			else
			{
				<div class="alert alert-dark m-0" role="alert">
					<span>@Translate("Product list: The list will be shown here, if any")</span>
				</div>
			}
		}
	</div>
}
