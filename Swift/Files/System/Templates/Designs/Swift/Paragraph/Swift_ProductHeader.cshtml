@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	ProductViewModel product = null;
	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}
	else if (Pageview.Page.Item["DummyProduct"] != null && Pageview.IsVisualEditorMode)
	{
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel productList = pageViewModel.Item.GetValue("DummyProduct") != null ? pageViewModel.Item.GetValue("DummyProduct") as ProductListViewModel : new ProductListViewModel();

		if (productList?.Products is object)
		{
			product = productList.Products[0];
		}
	}
}

@if (product is object)
{
	string titleFontSize = Model.Item.GetRawValueString("FontSize", "fs-6");
	string horizontalAlign = Model.Item.GetRawValueString("HorizontalAlignment", "");
	horizontalAlign = horizontalAlign == "center" ? "text-center" : horizontalAlign;
	horizontalAlign = horizontalAlign == "end" ? "text-end" : horizontalAlign;

	string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
	string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} {horizontalAlign} m-0 item_{Model.Item.SystemName.ToLower()}\" itemprop=\"name\">";
	string headingLevelStop = $"</{headingLevel}>";

	@headingLevelStart
	@product.Name
	@headingLevelStop
}
else if (Pageview.IsVisualEditorMode)
{
	<div class="alert alert-dark m-0">@Translate("No products available")</div>
}
