@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@functions
{
	private string RenderCustomCSS(IEnumerable<string> decorations)
	{
		var cssClasses = new List<string>();

		foreach (var itemId in decorations)
		{
			var item = Dynamicweb.Content.Services.Items.GetItem("Swift_Css", itemId);
			item.TryGetValue("Class", out object classes);

			if (classes is null)
			{
				continue;
			}

			var cssString = (string)classes;

			if (cssString.StartsWith("["))
			{
				var cssArray = Dynamicweb.Core.Converter.Deserialize<string[]>(cssString);
				cssClasses.AddRange(cssArray);
			}
			else
			{
				cssClasses.Add(cssString.Replace(",", " "));
			}
		}

		return string.Join(" ", cssClasses).Trim();
	}
}

@{
	string link = Model.Item.GetString("Link");

	string layout = Model.Item.GetRawValueString("Layout", "text-start");
	layout = layout == "alignLeft" ? "text-start" : layout;
	layout = layout == "alignCenter" ? "text-center" : layout;
	layout = layout == "alignRight" ? "text-end" : layout;

	string textScaling = Model.Item.GetRawValueString("TextScaling", "");
	textScaling = textScaling == "small" ? "fs-7 " : textScaling;
	textScaling = textScaling == "medium" ? "" : textScaling;
	textScaling = textScaling == "large" ? "fs-5 " : textScaling;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	var decorations = Model.Item?.GetList("CssDecorations")?.GetRawValue().OfType<string>() ?? Enumerable.Empty<string>();
	string css = RenderCustomCSS(decorations);
}

@if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
{
	<div class="py-2 @(textScaling)@(layout)@(theme) @(css) item_@Model.Item.SystemName.ToLower()">
		<div id="@Model.ID" class="user-select-none" style="scroll-margin-top:var(--header-height,150px)"></div>
		@if (!string.IsNullOrEmpty(@link))
		{
			<a href="@(link)" class="text-decoration-none text-decoration-underline-hover">
				@Model.Item.GetString("Text")
			</a>
		}
		else
		{
			@Model.Item.GetString("Text")
		}
	</div>
}
