@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@functions {

	private List<Dynamicweb.Frontend.ItemViewModel> GetSelectedTags()
	{
		var selectedTags = Model.Item?.GetList("Tags")?.GetRawValue().OfType<string>();
		var tags = new List<Dynamicweb.Frontend.ItemViewModel>();

		if (selectedTags.Any())
		{
			foreach (var tag in selectedTags)
			{
				var paragraph = Dynamicweb.Content.Services.Paragraphs?.GetParagraph(Dynamicweb.Core.Converter.ToInt32(tag)) ?? null;
				var viewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(paragraph)?.Item ?? null;

				if (viewModel != null)
				{
					tags.Add(viewModel);
				}
			}
		}

		return tags;
	}

	private string RenderHeader()
	{
		var header = string.Empty;

		if(!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
		{
			string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");
			string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
			string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} mb-3\">";
			string headingLevelStop = $"</{headingLevel}>";

			header += @headingLevelStart;
			header += Model.Item.GetString("Title");
			header += @headingLevelStop;
		}

		return header;
	}

}

@{
	var query = Dynamicweb.Context.Current.Request.QueryString?.Get("list");
	var facet = Model.Item?.GetRawValueString("Facet", "facet");
	var type = Model.Item?.GetRawValueString("Type", "list");
	var style = Model.Item?.GetRawValueString("Style", "dropdown");
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? $"theme {Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower()} " : string.Empty;
	var alignment = Model.Item?.GetRawValueString("Alignment", "left");
	var buttonType = Model.Item?.GetRawValueString("ButtonType", "btn-primary");
	var buttonSize = Model.Item?.GetRawValueString("ButtonSize", "btn-md");

	switch (alignment)
	{
		case "left":
			alignment = "align-items-start";
			break;
		case "center":
			alignment = "align-items-center";
			break;
		case "right":
			alignment = "align-items-end";
			break;
	}
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "none");
	switch (contentPadding)
	{
		case "none":
			contentPadding = "p-0";
			break;
		case "small":
			contentPadding = "p-3 p-md-3";
			break;
		case "large":
			contentPadding = "p-5 p-md-5";
			break;
	}
}

<div class="d-flex flex-column @(theme)@(contentPadding) @(alignment)">

	@{
		var tagQuery = new string[] { };
		tagQuery = Dynamicweb.Context.Current.Request.QueryString.Get("Tags") != null ? Dynamicweb.Context.Current.Request.QueryString.Get("Tags")?.Split(',') : tagQuery;
				
		@RenderHeader()

		<div class="d-flex flex-wrap gap-2">
			<input class="btn-check" type="radio" id="tag_all" checked name="Tags" value />
			<label class="btn @(buttonType) @(buttonSize)" for="tag_all">@Translate("All")</label>
			
			@foreach (var tag in GetSelectedTags())
			{
				var active = string.Empty;
				var selected = string.Empty;
				if (tagQuery.Any() && tagQuery.Contains($"{tag.Id}"))
				{
					active = " active";
					selected = "checked";
				}
				<input class="btn-check" type="radio" id="tag_@tag.Id" name="Tags" value="@tag.Id" @(selected)>
				<label class="btn @(buttonType) @(buttonSize)" for="tag_@tag.Id">@tag.GetString("Title")</label>
			}

		</div>
	}
</div>
