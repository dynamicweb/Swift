@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>

<style>
	.swift-checkered {
		background-image: linear-gradient(45deg, #a7a9ac 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #a7a9ac 75%), linear-gradient(45deg, transparent 75%, #a7a9ac 75%), linear-gradient(45deg, #a7a9ac 25%, #bcbec0 25%);
		background-size: 20px 20px;
		background-position: 0 0, 0 0, -10px -10px, 10px 10px;
	}
	.theme-option {
		border-radius: 2px;
		padding: 0.5em;
	}
</style>

@{
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
	bool hasUsageData = Dynamicweb.Core.Converter.ToBoolean(Dynamicweb.Context.Current.Request["auditUsages"]);
	string buttonLabel = hasUsageData ? "Refresh theme usages" : "Analyze usage of all themes";
	string urlPath = Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(Model.ID) + "?auditUsages=true";
}

@MasterPageFile("Swift_MasterNoLayout.cshtml")

<div class="container my-5">
	<div class="grid gap-3 mb-3 pb-3 text-center border-bottom">
		<div class="g-col-12">
			<h1 class="h1">@Translate("Themes") </h1>
			<div class="lead">@Translate("Take full control of all the colors")</div>
		</div>
	</div>
	<div class="d-grid gap-2">
		<a href="@urlPath" class="btn btn-primary" role="button">
			@ReadFile(iconPath + "search.svg")
            @buttonLabel
		</a>
    </div>
	<div class="grid gap-3">
		@Model.Placeholder("content", "content", "default:true;sort:1")
	</div>
</div>

<script>
	function fallbackCopyTextToClipboard(text) {
		var textArea = document.createElement("textarea");
		textArea.value = text;

		// Avoid scrolling to bottom
		textArea.style.top = "0";
		textArea.style.left = "0";
		textArea.style.position = "fixed";

		document.body.appendChild(textArea);
		textArea.focus();
		textArea.select();

		try {
			var successful = document.execCommand('copy');
			var msg = successful ? 'successful' : 'unsuccessful';
			console.log('Fallback: Copying text command was ' + msg);
		} catch (err) {
			console.error('Fallback: Oops, unable to copy', err);
		}

		document.body.removeChild(textArea);
	}
	function copyTextToClipboard(text) {
		if (!navigator.clipboard) {
			fallbackCopyTextToClipboard(text);
			return;
		}
		navigator.clipboard.writeText(text).then(function () {
			console.log('Async: Copying to clipboard was successful!');
		}, function (err) {
			console.error('Async: Could not copy text: ', err);
		});
	}
</script>
@{
	string tmpPath = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_theme_styles_{Model.Area.ID}.tmp");

	string cssPathEcommerceBadges = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_ecommerce_badge_styles_{Model.Area.ID}.css");
	string cssPathTheme = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_theme_styles_{Model.Area.ID}.css");
	string cssPathFont = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_font_styles_{Model.Area.ID}.css");
	string cssPathBranding = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_branding_styles_{Model.Area.ID}.css");
	string cssPathCss = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_css_styles_{Model.Area.ID}.css");
	string cssPathCombined = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_styles_{Model.Area.ID}.min.css");

	Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(tmpPath), cssPathTheme, false);
	System.IO.File.Delete(tmpPath);

	string combinedCss = Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathBranding);
	combinedCss += Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathTheme);
	combinedCss += Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathFont);
	combinedCss += Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathEcommerceBadges);
	combinedCss += Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathCss);
	combinedCss = System.Text.RegularExpressions.Regex.Replace(combinedCss, @"\{([\s\S]*?)\}", match =>
	{
		string content = match.Groups[1].Value;
		content = System.Text.RegularExpressions.Regex.Replace(content, @"\s+", " "); // Collapse multiple spaces to a single space
		return "{" + content.Trim() + "}";
	});
	combinedCss = System.Text.RegularExpressions.Regex.Replace(combinedCss, @"\t|\n|\r", "");
	combinedCss = combinedCss.Replace("\00a0", " "); //Re-insert spaces for content text
	Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(combinedCss, cssPathCombined, false);
}
