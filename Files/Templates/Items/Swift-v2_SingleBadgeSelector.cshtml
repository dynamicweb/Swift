@inherits ViewModelTemplate<ListEditorViewModel<string>>
@using Dynamicweb.Rendering
@using Dynamicweb.Content
@using Dynamicweb.Content.Items
@using Dynamicweb.Content.Items.Rendering
@using Dynamicweb.Frontend

@{ 
	string editorId = Model.EditorId;
}

<style>
	.swift-badge-option {
		cursor: pointer;
		box-sizing: border-box;
		height: 100%;
		display: flex;
		flex-direction: column;
		padding: 0.35em 0.65em;
		font-size: .75em;
		font-weight: 700;
		line-height: 1;
		color: #fff;
		background-color: #333;
		text-align: center;
		white-space: nowrap;
		vertical-align: baseline;
		border-radius: 0.25rem;
	}

	.swift-badge-label {
		display: block;
		background-color: #F7F7F7;
		height: 100%;
	}

	.swift-badge-label .swift-badge-option {
		border: 4px solid #F7F7F7;
	}

	.swift-badge-input:checked ~ .swift-badge-label .swift-badge-option {
		border: 4px solid #0085CA;
	}
</style>

<div style="display: flex; display: -webkit-flex; gap: 0.25rem; width: calc(100% - 40px)">
	@if (Model.Items is object) {
		foreach (var option in Model.Items)
		{
			string foregroundColor = option.GetColor("ForegroundColor") != null ? option.GetColor("ForegroundColor").Hex : "#333";
			string backgroundColor = option.GetColor("BackgroundColor") != null ? option.GetColor("BackgroundColor").Hex : "#fff";

			string badgeId = option.GetString("CssClassName") != null ? option.GetString("CssClassName").Trim().ToLower() : "";

			<div>
				<input class="swift-badge-input" type="radio" id="@(editorId)_@badgeId" name="@editorId"  value="@badgeId" @(Model.SelectedValue == badgeId ? "checked" : "")  style="display: none">
				<label class="swift-badge-label" for="@(editorId)_@badgeId">
					<div class="swift-badge-option" style="color: @foregroundColor; background-color: @backgroundColor">
						@option.GetString("BadgeText") 
					</div>
				</label>
			</div>
		}
	} else { 
		<div class="swift-alert">@Translate("No badges found")</div>
	}
</div>
