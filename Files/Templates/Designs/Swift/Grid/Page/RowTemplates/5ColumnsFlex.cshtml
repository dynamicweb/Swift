@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>

@{ 
	string containerClass = "container-xl";

	string width = Model.Item.GetRawValueString("Width", string.Empty).ToLower();
	if (width == "stretch")
	{
		containerClass = "container-fluid";
	}
	if (width == "none")
	{
		containerClass = "container-fluid px-0";
	}

	string rowClass = "gap-3";
	string spaceBetweenColumns = Model.Item.GetRawValueString("SpaceBetweenColumns", "").ToLower();

	if (spaceBetweenColumns == "stick")
	{
		rowClass = "gap-0";
	}
	if (spaceBetweenColumns == "spacing-large")
	{
		rowClass = "gap-3 gap-md-4 gap-lg-5";
	}

	string columnPosition = Model.Item.GetRawValueString("columnPosition", "align-items-center").ToLower();
	if (columnPosition == "top")
	{
		columnPosition = "align-items-start";
	}
	if (columnPosition == "center")
	{
		columnPosition = "align-items-center";
	}
	if (columnPosition == "bottom")
	{
		columnPosition = "align-items-end";
	}

	string rowHeight = Model.Item.GetRawValueString("RowHeight", "0").ToLower();
	rowHeight = "py-" + rowHeight;

	string column1width = Model.Item.GetRawValueString("Column_1Width", string.Empty).ToLower();
	column1width = column1width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string column2width = Model.Item.GetRawValueString("Column_2Width", string.Empty).ToLower();
	column2width = column2width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string column3width = Model.Item.GetRawValueString("Column_3Width", string.Empty).ToLower();
	column3width = column3width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string column4width = Model.Item.GetRawValueString("Column_4Width", string.Empty).ToLower();
	column4width = column4width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string column5width = Model.Item.GetRawValueString("Column_4Width", string.Empty).ToLower();
	column5width = column5width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string hideOnScroll = Model.Item.GetRawValueString("HideOnScroll", string.Empty).ToLower();
	hideOnScroll = hideOnScroll == "hide" ? " js-hide-on-scroll" : string.Empty;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string alternativeTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("AlternativeTheme")) ? " theme " + Model.Item.GetRawValueString("AlternativeTheme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string mainTheme = theme;

	string headerCssClass = "sticky-top";
	if (Pageview.Page.PropertyItem != null) {
		headerCssClass = Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"] != null ? Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
	}
	headerCssClass = headerCssClass == string.Empty ? "sticky-top" : headerCssClass;
	headerCssClass = Pageview.IsVisualEditorMode ? string.Empty : headerCssClass;

	string themeSwitchers = string.Empty;
	string themeAnimated = string.Empty;
	if (headerCssClass == "fixed-top") {
		theme = alternativeTheme;
		themeSwitchers = "data-main-theme=\"" + mainTheme + "\" data-alternative-theme=\"" + alternativeTheme + "\"";
		themeAnimated = "theme-animated ";
	}

	var decorations = Model.Item?.GetList("CssDecorations")?.GetRawValue().OfType<string>() ?? Enumerable.Empty<string>();
	var css = string.Empty;
	var cssClasses = new List<string> { };

	foreach (var itemId in decorations)
	{
		var item = Dynamicweb.Content.Services.Items.GetItem("Swift_Css", itemId);
		item.TryGetValue("Class", out object classes);
		if (classes is null)
		{
			continue;
		}

		var cssString = (string)classes;
		if (cssString.StartsWith("["))
		{
			var cssArray = Dynamicweb.Core.Converter.Deserialize<string[]>(cssString);
			cssClasses.AddRange(cssArray);
		}
		else
		{
			cssClasses.Add(cssString.Replace(",", " "));
		}
	}
	css = string.Join(" ", cssClasses).Trim();

	var columnContent1 = Model.Column(1).Output();
	var columnContent2 = Model.Column(2).Output();
	var columnContent3 = Model.Column(3).Output();
	var columnContent4 = Model.Column(4).Output();
	var columnContent5 = Model.Column(5).Output();

	if (Pageview.IsVisualEditorMode || !string.IsNullOrWhiteSpace(columnContent1) || !string.IsNullOrWhiteSpace(columnContent2) || !string.IsNullOrWhiteSpace(columnContent3) || !string.IsNullOrWhiteSpace(columnContent4) || !string.IsNullOrWhiteSpace(columnContent5))
	{
		<div class="@rowHeight @(themeAnimated)@(theme)@(hideOnScroll) @(css) item_@Model.Item.SystemName.ToLower()" @themeSwitchers data-swift-gridrow>
			<div class="@containerClass">
				<div class="d-flex flex-row @rowClass @columnPosition">
					<div class="col @column1width">
						@columnContent1
					</div>
					<div class="col @column2width">
						@columnContent2
					</div>
					<div class="col @column3width">
						@columnContent3
					</div>
					<div class="col @column4width">
						@columnContent4
					</div>
					<div class="col @column5width">
						@columnContent5
					</div>
				</div>
			</div>
		</div>
	}
}
