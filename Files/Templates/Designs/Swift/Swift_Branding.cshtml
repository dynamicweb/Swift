@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Dynamicweb.Frontend
@using System.Text.RegularExpressions
@MasterPageFile("Swift_MasterNoLayout.cshtml")

@functions {

	private GoogleFontViewModel GetViewModelValue(object value)
	{
		Dynamicweb.Content.Items.Editors.GoogleFont font = default;

		if (value is object)
		{
			font = Dynamicweb.Core.Converter.Deserialize<Dynamicweb.Content.Items.Editors.GoogleFont>(value.ToString());

			if (string.IsNullOrWhiteSpace(font?.Family))
			{
				font = default;
			}
		}

		return CreateGoogleFontViewModel(font);
	}

	private GoogleFontViewModel CreateGoogleFontViewModel(Dynamicweb.Content.Items.Editors.GoogleFont font)
	{
		GoogleFontViewModel model = null;
		if (font is object)
		{
			model = new GoogleFontViewModel
			{
				Family = font.Family,
				Version = font.Version,
				Weight = font.SelectedVariant,
				File = font.Files[font.SelectedVariant]
			};
		}

		return model;
	}

	private ItemViewModel GetCustomFont(string fieldName)
	{ 
		var id = Dynamicweb.Core.Converter.ToInt32(Model.Item.GetRawValueString(fieldName));
		var font = id > 0 ? Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(Dynamicweb.Content.Services.Paragraphs.GetParagraph(id))?.Item : null;
		return font;
	}
	
	private string GetFontType(string fieldName) 
	{ 
		var fontType = Model.Item.GetRawValueString(fieldName);
		return fontType;
	}

	private string GetFontValue(string regex, string value)
	{ 
		var fontValue = string.Empty;
		fontValue = System.Text.RegularExpressions.Regex.Replace(value, regex, string.Empty);
		return fontValue;
	}
}

@{
	List<string> fontList = new List<string>();

	GoogleFontViewModel headerFont = null;
	ItemViewModel headerFontCustom = null;
	string headerFontFamily = "Roboto";
	string headerFontWeight = "normal";
	string headerFontStyle = "normal";
	string headerCasing = "inherit";
	string headerLineHeight = "1.2";
	string headerLetterSpacing = "0";
	GoogleFontViewModel displayFont = null;
	ItemViewModel displayFontCustom = null;
	string displayFontFamily = "Roboto";
	string displayFontWeight = "normal";
	string displayFontStyle = "normal";
	string displayCasing = "inherit";
	string displayLineHeight = "1.2";
	string displayLetterSpacing = "0";
	GoogleFontViewModel bodyFont = null;
	ItemViewModel bodyFontCustom = null;
	string bodyFontFamily = "Roboto";
	string bodyFontWeight = "normal";
	string bodyFontStyle = "normal";
	string bodyLineHeight = "1.5";
	string bodyLetterSpacing = "0";

	string primaryButtonFontWeight = "normal";
	string primaryButtonCasing = "inherit";
	string primaryButtonShape = "0";
	string primaryButtonXpadding = "0.75";
	string primaryButtonYpadding = "0.375";

	string secondaryButtonFontWeight = "normal";
	string secondaryButtonCasing = "inherit";
	string secondaryButtonShape = "0";
	string secondaryButtonXpadding = "0.75";
	string secondaryButtonYpadding = "0.375";

	string linkButtonFontWeight = "inherit";
	string linkButtonCasing = "inherit";

	if (Model.Item != null)
	{
		@* HEADER font*@
		headerFont = Model.Item.GetGoogleFont("HeaderFont");
		headerFont = GetViewModelValue(Model.Item.GetRawValueString("HeaderFont"));
		headerFontCustom = GetCustomFont("HeaderFontCustom");
		if (GetFontType("HeaderFontType") == "custom" && headerFontCustom is object)
        {
			headerFontFamily = headerFontCustom.GetString("FontFamilyName");
			headerFontWeight = headerFontCustom.GetRawValueString("FontWeight");
			headerFontStyle = headerFontCustom.GetRawValueString("FontStyle");
        }

		if (GetFontType("HeaderFontType") != "custom" && headerFont != null)
		{
			headerFontFamily = headerFont.Family;
			headerFontWeight = !string.IsNullOrEmpty(GetFontValue("([^0-9])", headerFont.Weight)) ? GetFontValue("([^0-9])", headerFont.Weight) : headerFontWeight;
			headerFontStyle = !string.IsNullOrEmpty(GetFontValue("([0-9])", headerFont.Weight)) ? GetFontValue("([0-9])", headerFont.Weight) : headerFontStyle;
			
			fontList.Add(System.Net.WebUtility.UrlEncode(headerFontFamily) + ":ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900");
		}

		headerCasing = Model.Item.GetRawValueString("HeaderCasing");
		headerLineHeight = Model.Item.GetDouble("HeaderLineHeight").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
		headerLetterSpacing = Model.Item.GetDouble("HeaderLetterSpacing").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));

		@* DISPLAY font*@
		displayFont = Model.Item.GetGoogleFont("DisplayFont");
		displayFont = GetViewModelValue(Model.Item.GetRawValueString("DisplayFont"));
		displayFontCustom = GetCustomFont("DisplayFontCustom");
		if (GetFontType("DisplayFontType") == "custom" && displayFontCustom is object)
        {
			displayFontFamily = displayFontCustom.GetString("FontFamilyName");
			displayFontWeight = displayFontCustom.GetRawValueString("FontWeight");
			displayFontStyle = displayFontCustom.GetRawValueString("FontStyle");
        }

		if (GetFontType("DisplayFontType") != "custom" && displayFont != null)
		{
			displayFontFamily = displayFont.Family;
			displayFontWeight = !string.IsNullOrEmpty(GetFontValue("([^0-9])", displayFont.Weight)) ? GetFontValue("([^0-9])", displayFont.Weight) : displayFontWeight;
			displayFontStyle = !string.IsNullOrEmpty(GetFontValue("([0-9])", displayFont.Weight)) ? GetFontValue("([0-9])", displayFont.Weight) : displayFontStyle;
			fontList.Add(System.Net.WebUtility.UrlEncode(displayFontFamily) + ":ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900");
		}

		displayCasing = Model.Item.GetRawValueString("DisplayCasing");
		displayLineHeight = Model.Item.GetDouble("DisplayLineHeight").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
		displayLetterSpacing = Model.Item.GetDouble("DisplayLetterSpacing").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));

		@* BODY font*@
		bodyFont = Model.Item.GetGoogleFont("BodyFont");
		bodyFont = GetViewModelValue(Model.Item.GetRawValueString("BodyFont"));
		bodyFontCustom = GetCustomFont("BodyFontCustom");
		if (GetFontType("BodyFontType") == "custom" && bodyFontCustom is object)
        {
			bodyFontFamily = bodyFontCustom.GetString("FontFamilyName");
			bodyFontWeight = bodyFontCustom.GetRawValueString("FontWeight");
			bodyFontStyle = bodyFontCustom.GetRawValueString("FontStyle");
        }

		if (GetFontType("BodyFontType") != "custom" && bodyFont != null)
		{
			bodyFontFamily = bodyFont.Family;
			bodyFontWeight = !string.IsNullOrEmpty(GetFontValue("([^0-9])", bodyFont.Weight)) ? GetFontValue("([^0-9])", bodyFont.Weight) : bodyFontWeight;
			bodyFontStyle = !string.IsNullOrEmpty(GetFontValue("([0-9])", bodyFont.Weight)) ? GetFontValue("([0-9])", bodyFont.Weight) : bodyFontStyle;
			fontList.Add(System.Net.WebUtility.UrlEncode(bodyFontFamily) + ":ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900");
		}
		bodyLineHeight = Model.Item.GetDouble("BodyLineHeight").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
		bodyLetterSpacing = Model.Item.GetDouble("BodyLetterSpacing").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));

		@* Primary button *@
		primaryButtonFontWeight = Model.Item.GetRawValueString("PrimaryButtonFontWeight", "normal");
		primaryButtonCasing = Model.Item.GetRawValueString("PrimaryButtonCasing", "initial");

		primaryButtonShape = Model.Item.GetRawValueString("PrimaryButtonShape", "0");
		primaryButtonShape = primaryButtonShape == "rounded" ? ".25rem" : primaryButtonShape;
		primaryButtonShape = primaryButtonShape == "pill" ? "12.5rem" : primaryButtonShape;
		
		if (Model.Item.GetDouble("ButtonPrimaryXPadding") != 0.0)
        {
			primaryButtonXpadding = Model.Item.GetDouble("ButtonPrimaryXPadding").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
        }
		if (Model.Item.GetDouble("ButtonPrimaryYPadding") != 0.0)
        {
			primaryButtonYpadding = Model.Item.GetDouble("ButtonPrimaryYPadding").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
		}

		@* Secondary button *@
		secondaryButtonFontWeight = Model.Item.GetRawValueString("SecondaryButtonFontWeight", "normal");
		secondaryButtonCasing = Model.Item.GetRawValueString("SecondaryButtonCasing", "initial");

		secondaryButtonShape = Model.Item.GetRawValueString("SecondaryButtonShape", "0");
		secondaryButtonShape = secondaryButtonShape == "rounded" ? ".25rem" : secondaryButtonShape;
		secondaryButtonShape = secondaryButtonShape == "pill" ? "12.5rem" : secondaryButtonShape;


		if (Model.Item.GetDouble("ButtonSecondaryXPadding") != 0.0)
        {
			secondaryButtonXpadding = Model.Item.GetDouble("ButtonSecondaryXPadding").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
		}

		if (Model.Item.GetDouble("ButtonSecondaryYPadding") != 0.0)
        {
			secondaryButtonYpadding = Model.Item.GetDouble("ButtonSecondaryYPadding").ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
		}
		
		@* Link *@
		linkButtonFontWeight = Model.Item.GetRawValueString("LinkFontWeight", "normal");
		linkButtonCasing = Model.Item.GetRawValueString("LinkCasing", "initial");
	}

	var fontsToLink = string.Join("&", fontList.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("family={0}", x)));
	var fontLink = $"https://fonts.googleapis.com/css2?{fontsToLink}&display=swap";
	var sb = new System.Text.StringBuilder();

	async System.Threading.Tasks.Task<string> GetGoogleCss(string fonturl)
	{
		var client = new System.Net.Http.HttpClient();
		client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("*/*"));
		client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("font/woff2"));
		client.DefaultRequestHeaders.Add("User-Agent", Dynamicweb.Context.Current.Request.UserAgent);

		System.Net.Http.HttpResponseMessage response = await client.GetAsync(fonturl);
		response.EnsureSuccessStatusCode();
		if (response.StatusCode == System.Net.HttpStatusCode.OK)
		{
			return await response.Content.ReadAsStringAsync();
		}
		return string.Empty;
	}

	async System.Threading.Tasks.Task DownloadAndSavefont(string fontUrl, string localPath)
	{
		var fullPath = Dynamicweb.Core.SystemInformation.MapPath(localPath);
		var fileinfo = new System.IO.FileInfo(fullPath);
		var client = new System.Net.Http.HttpClient();
		System.Net.Http.HttpResponseMessage dataResponse = await client.GetAsync(fontUrl);
		dataResponse.EnsureSuccessStatusCode();
		if (dataResponse.StatusCode == System.Net.HttpStatusCode.OK)
		{
			var data = await dataResponse.Content.ReadAsByteArrayAsync();
			System.IO.Directory.CreateDirectory(fileinfo.DirectoryName);
			System.IO.File.WriteAllBytes(fullPath, data);
		}
	}

	string googleCss = string.Empty;
	
	try
	{
		googleCss = GetGoogleCss(fontLink).GetAwaiter().GetResult();

		Dictionary<string, string> googleFontUrls = new Dictionary<string, string>();
		Regex cssUrlGoogleFontsRegEx = new Regex(@"url\((?<googleFontUrl>.+?)\)", RegexOptions.Compiled | RegexOptions.CultureInvariant);
		string firstPartOfCss = googleCss.Substring(googleCss.LastIndexOf("{"), googleCss.LastIndexOf("}") - googleCss.LastIndexOf("{"));

		MatchCollection matches = cssUrlGoogleFontsRegEx.Matches(googleCss);//We will only take the first URL as that is what is primarily used. If the remaining woff fonts needs loading, the browser will take care of that.

		for (var i = 0; i < matches.Count; i++)
		{
			Match match = matches[i];
			string url = match.Groups["googleFontUrl"].Value;
			if (!googleFontUrls.ContainsKey(url))
			{
				googleFontUrls.Add(url, url);
			}
		}

		if (googleFontUrls.Count > 0)
		{
			var fontSb = new System.Text.StringBuilder();
			foreach (string url in googleFontUrls.Values)
			{
				var fontPathAndFilename = url.Replace("https://fonts.gstatic.com/s/", "");
				var localUrl = $"/Files/Templates/Designs/Swift/Assets/fonts/{fontPathAndFilename}";

				DownloadAndSavefont(url, localUrl).GetAwaiter().GetResult();

				googleCss = googleCss.Replace(url, localUrl);

				fontSb.AppendLine($"<link rel=\"preload\" href=\"{localUrl}\" as=\"font\" type=\"font/woff2\" crossorigin>");
			}
			string htmlPathFontPreload = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_GoogleFontUrls_{Model.Area.ID}.html");
			Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(fontSb.ToString(), htmlPathFontPreload, false);
		}

		sb.AppendLine(googleCss);
	}
	catch (Exception ex)
	{
		@*@ex.ToString()*@
	}

	sb.AppendLine("");

	sb.AppendLine(".brand {");

	sb.AppendLine($"--swift-header-font: '{headerFontFamily}';");
	sb.AppendLine($"--swift-header-font-weight: {headerFontWeight};");
	sb.AppendLine($"--swift-header-font-style: {headerFontStyle};");
	sb.AppendLine($"--swift-header-casing: {headerCasing};");
	sb.AppendLine($"--swift-header-line-height: {headerLineHeight};");
	sb.AppendLine($"--swift-header-letter-spacing: {headerLetterSpacing}em;");
	sb.AppendLine($"--swift-display-font: '{displayFontFamily}';");
	sb.AppendLine($"--swift-display-font-weight: {displayFontWeight};");
	sb.AppendLine($"--swift-display-font-style: {displayFontStyle};");
	sb.AppendLine($"--swift-display-casing: {displayCasing};");
	sb.AppendLine($"--swift-display-line-height: {displayLineHeight};");
	sb.AppendLine($"--swift-display-letter-spacing: {displayLetterSpacing}em;");
	sb.AppendLine($"--swift-body-font: '{bodyFontFamily}';");
	sb.AppendLine($"--swift-body-font-weight: {bodyFontWeight};");
	sb.AppendLine($"--swift-body-font-style: {bodyFontStyle};");
	sb.AppendLine($"--swift-body-line-height: {bodyLineHeight};");
	sb.AppendLine($"--swift-body-letter-spacing: {bodyLetterSpacing}em;");

	sb.AppendLine($"--swift-button-primary-font-weight: {primaryButtonFontWeight};");
	sb.AppendLine($"--swift-button-primary-casing: {primaryButtonCasing};");
	sb.AppendLine($"--swift-button-primary-shape: {primaryButtonShape};");
	sb.AppendLine($"--swift-button-primary-padding-x: {primaryButtonXpadding}rem;");
	sb.AppendLine($"--swift-button-primary-padding-y: {primaryButtonYpadding}rem;");

	sb.AppendLine($"--swift-button-secondary-font-weight: {secondaryButtonFontWeight};");
	sb.AppendLine($"--swift-button-secondary-casing: {secondaryButtonCasing};");
	sb.AppendLine($"--swift-button-secondary-shape: {secondaryButtonShape};");
	sb.AppendLine($"--swift-button-secondary-padding-x: {secondaryButtonXpadding}rem;");
	sb.AppendLine($"--swift-button-secondary-padding-y: {secondaryButtonYpadding}rem;");

	sb.AppendLine($"--swift-button-link-font-weight: {linkButtonFontWeight};");
	sb.AppendLine($"--swift-button-link-casing: {linkButtonCasing};");

	sb.AppendLine($"--swift-debug-css-written: '{DateTime.Now.ToString()}';");
	sb.AppendLine($"--swift-debug-page-changed: '{Model.UpdatedDate.ToString()}';");

	sb.AppendLine("}");

	string cssPathEcommerceBadges = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_ecommerce_badge_styles_{Model.Area.ID}.css");
	string cssPathTheme = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_theme_styles_{Model.Area.ID}.css");
	string cssPathFont = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_font_styles_{Model.Area.ID}.css");
	string cssPathBranding = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_branding_styles_{Model.Area.ID}.css");
	string cssPathCss = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_css_styles_{Model.Area.ID}.css");
	string cssPathCombined = Dynamicweb.Context.Current.Server.MapPath($"/Files/Templates/Designs/Swift/_parsed/Swift_css/Swift_styles_{Model.Area.ID}.min.css");

	Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(sb.ToString(), cssPathBranding, false);

	string combinedCss = Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathBranding);
	combinedCss += Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathTheme);
	combinedCss += Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathFont);
	combinedCss += Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathEcommerceBadges);
	combinedCss += Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(cssPathCss);
	combinedCss = System.Text.RegularExpressions.Regex.Replace(combinedCss, @"\{([\s\S]*?)\}", match =>
	{
		string content = match.Groups[1].Value;
		content = System.Text.RegularExpressions.Regex.Replace(content, @"\s+", " "); // Collapse multiple spaces to a single space
		return "{" + content.Trim() + "}";
	});
	combinedCss = System.Text.RegularExpressions.Regex.Replace(combinedCss, @"\t|\n|\r", "");
	combinedCss = combinedCss.Replace("\00a0", " "); //Re-insert spaces for content text
	Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(combinedCss, cssPathCombined, false);
}

<div class="container my-5 theme light">
	<div class="grid gap-3 mb-5 pb-3 text-center border-bottom">
		<div class="g-col-12">
			<h1 class="h1">@Translate("Branding") </h1>
			<div class="lead">@Translate("Define how you appear")</div>
		</div>
	</div>

	<div class="grid g-4">
		<div class="g-col-12">
			<div class="lead text-muted text-uppercase mb-3 pb-2 border-bottom">@Translate("Header font")</div>
		</div>
		<div class="g-col-12 g-col-lg-7">
			<div class="fs-7 text-muted">H1</div>
			<h1 class="h1 mb-3">@Translate("The quick, brown fox jumps over the lazy dog")</h1>
			<div class="fs-7 text-muted">H2</div>
			<h2 class="h2 mb-3">@Translate("The quick, brown fox jumps over the lazy dog")</h2>
			<div class="fs-7 text-muted">H3</div>
			<h3 class="h3 mb-3">@Translate("The quick, brown fox jumps over the lazy dog")</h3>
			<div class="fs-7 text-muted">H4</div>
			<h4 class="h4 mb-3">@Translate("The quick, brown fox jumps over the lazy dog")</h4>
			<div class="fs-7 text-muted">H5</div>
			<h5 class="h5 mb-3">@Translate("The quick, brown fox jumps over the lazy dog")</h5>
			<div class="fs-7 text-muted">H6</div>
			<h6 class="h6 mb-3">@Translate("The quick, brown fox jumps over the lazy dog")</h6>
		</div>
		<div class="g-col-12 g-col-lg-5">
			<div class="grid fs-7">
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font family")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerFontFamily');">@headerFontFamily</a></td>
						</tr>
						<tr>
							<td>@Translate("Font weight")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerFontWeight');">@headerFontWeight</a></td>
						</tr>		
						<tr>
							<td>@Translate("Font style")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerFontStyle');">@headerFontStyle</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerCasing');">@headerCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Line height")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerLineHeight');">@headerLineHeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Letter spacing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@headerLetterSpacing');">@headerLetterSpacing</a></td>
						</tr>
					</table>
				</div>
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								<div class="mb-2">@Translate("Simply use these css classes"):</div>
								<div>.h1, .h2, .h3, .h4, .h5, .h6</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="g-col-12">
			<div class="lead text-muted text-uppercase my-3 pb-2 border-bottom">@Translate("Display font")</div>
		</div>
		<div class="g-col-12 g-col-lg-7">
			<div class="fs-7 text-muted">Display 1</div>
			<h1 class="display-1 mb-4">@Translate("The quick, brown fox jumps over the lazy dog")</h1>
			<div class="fs-7 text-muted">Display 2</div>
			<h2 class="display-2 mb-4">@Translate("The quick, brown fox jumps over the lazy dog")</h2>
			<div class="fs-7 text-muted">Display 3</div>
			<h3 class="display-3 mb-4">@Translate("The quick, brown fox jumps over the lazy dog")</h3>
			<div class="fs-7 text-muted">Display 4</div>
			<h4 class="display-4 mb-4">@Translate("The quick, brown fox jumps over the lazy dog")</h4>
			<div class="fs-7 text-muted">Display 5</div>
			<h5 class="display-5 mb-4">@Translate("The quick, brown fox jumps over the lazy dog")</h5>
			<div class="fs-7 text-muted">Display 6</div>
			<h6 class="display-6 mb-4">@Translate("The quick, brown fox jumps over the lazy dog")</h6>
		</div>
		<div class="g-col-12 g-col-lg-5">
			<div class="grid fs-7">
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font family")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayFontFamily');">@displayFontFamily</a></td>
						</tr>
						<tr>
							<td>@Translate("Font weight")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayFontWeight');">@displayFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Font style")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayFontStyle');">@displayFontStyle</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayCasing');">@displayCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Line height")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayLineHeight');">@displayLineHeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Letter spacing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@displayLetterSpacing');">@displayLetterSpacing</a></td>
						</tr>
					</table>
				</div>
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								<div class="mb-2">@Translate("Simply use these css classes"):</div>
								<div>.display-1, .display-2, .display-3, .display-4, .display-5, .display-6</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="g-col-12">
			<div class="lead text-muted text-uppercase mt-3 pb-2 border-bottom">@Translate("Body font")</div>
		</div>
		<div class="g-col-12 g-col-lg-7">
			<p class="mb-3">@Translate("The quick, brown fox jumps over the lazy dog")</p>
		</div>
		<div class="g-col-12 g-col-lg-5">
			<div class="grid fs-7">
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font family")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyFontFamily');">@bodyFontFamily</a></td>
						</tr>
						<tr>
							<td>@Translate("Font weight")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyFontWeight');">@bodyFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Font style")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyFontStyle');">@bodyFontStyle</a></td>
						</tr>
						<tr>
							<td>@Translate("Line height")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyLineHeight');">@bodyLineHeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Letter spacing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@bodyLetterSpacing');">@bodyLetterSpacing</a></td>
						</tr>
					</table>
				</div>
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								@Translate("Works on all text that is not styled with a heading or display class")
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="g-col-12">
			<div class="lead text-muted text-uppercase mt-3 pb-2 border-bottom">@Translate("Primary button")</div>
		</div>
		<div class="g-col-12 g-col-lg-7">
			<button class="btn btn-primary btn-sm">@Translate("Small")</button>
			<button class="btn btn-primary">@Translate("Normal")</button>
			<button class="btn btn-primary btn-lg">@Translate("Large")</button>
		</div>
		<div class="g-col-12 g-col-lg-5">
			<div class="grid fs-7">
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font weight")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonFontWeight');">@primaryButtonFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonCasing');">@primaryButtonCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Shape")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonShape');">@primaryButtonShape</a></td>
						</tr>
						<tr>
							<td>@Translate("Padding X")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonXpadding');">@(primaryButtonXpadding)rem</a></td>
						</tr>
						<tr>
							<td>@Translate("Padding Y")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@primaryButtonYpadding');">@(primaryButtonYpadding)rem</a></td>
						</tr>
					</table>
				</div>
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								@{
									string implementationPrimary = "<button class=\"btn btn-primary\">" + Translate("Add to cart") + "</button>";
								}
								<div class="text-muted">
									<a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('btn btn-primary');">
										@Dynamicweb.Core.Encoders.HtmlEncoder.HtmlEncode(implementationPrimary)
									</a>
								</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="g-col-12">
			<div class="lead text-muted text-uppercase mt-3 pb-2 border-bottom">@Translate("Secondary button")</div>
		</div>
		<div class="g-col-12 g-col-lg-7">
			<button class="btn btn-secondary btn-sm">@Translate("Small")</button>
			<button class="btn btn-secondary">@Translate("Normal")</button>
			<button class="btn btn-secondary btn-lg">@Translate("Large")</button>
		</div>
		<div class="g-col-12 g-col-lg-5">
			<div class="grid fs-7">
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font weight")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonFontWeight');">@secondaryButtonFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonCasing');">@secondaryButtonCasing</a></td>
						</tr>
						<tr>
							<td>@Translate("Shape")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonShape');">@secondaryButtonShape</a></td>
						</tr>
						<tr>
							<td>@Translate("Padding X")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonXpadding');">@(secondaryButtonXpadding)rem</a></td>
						</tr>
						<tr>
							<td>@Translate("Padding Y")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@secondaryButtonYpadding');">@(secondaryButtonYpadding)rem</a></td>
						</tr>
					</table>
				</div>
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								@{
									string implementationSecondary = "<button class=\"btn btn-secondary\">" + Translate("Read more") + "</button>";
								}
								<div class="text-muted">
									<a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('btn btn-secondary');">
										@Dynamicweb.Core.Encoders.HtmlEncoder.HtmlEncode(implementationSecondary)
									</a>
								</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
		<div class="g-col-12">
			<div class="lead text-muted text-uppercase mt-3 pb-2 border-bottom">@Translate("Link button")</div>
		</div>
		<div class="g-col-12 g-col-lg-7">
			<button class="btn btn-link btn-sm">@Translate("Small")</button>
			<button class="btn btn-link">@Translate("Normal")</button>
			<button class="btn btn-link btn-lg">@Translate("Large")</button>
		</div>
		<div class="g-col-12 g-col-lg-5">
			<div class="grid fs-7">
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td colspan="2" class="fw-bold">@Translate("Parameters")</td>
						</tr>
						<tr>
							<td>@Translate("Font weight")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@linkButtonFontWeight');">@linkButtonFontWeight</a></td>
						</tr>
						<tr>
							<td>@Translate("Casing")</td>
							<td><a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('@linkButtonCasing');">@linkButtonCasing</a></td>
						</tr>
					</table>
				</div>
				<div class="g-col-12 g-col-lg-6">
					<table class="table table-borderless table-sm w-100">
						<tr>
							<td class="fw-bold">@Translate("Implementation")</td>
						</tr>
						<tr>
							<td>
								@{
									string implementationLink = "<button class=\"btn btn-link\">" + Translate("Read more") + "</button>";
								}
								<div class="text-muted">
									<a role="button" title="@Translate("Click to copy")" onclick="copyTextToClipboard('btn btn-link');">
										@Dynamicweb.Core.Encoders.HtmlEncoder.HtmlEncode(implementationLink)
									</a>
								</div>
							</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	function fallbackCopyTextToClipboard(text) {
		var textArea = document.createElement("textarea");
		textArea.value = text;

		// Avoid scrolling to bottom
		textArea.style.top = "0";
		textArea.style.left = "0";
		textArea.style.position = "fixed";

		document.body.appendChild(textArea);
		textArea.focus();
		textArea.select();

		try {
			var successful = document.execCommand('copy');
			var msg = successful ? 'successful' : 'unsuccessful';
			console.log('Fallback: Copying text command was ' + msg);
		} catch (err) {
			console.error('Fallback: Oops, unable to copy', err);
		}

		document.body.removeChild(textArea);
	}
	function copyTextToClipboard(text) {
		if (!navigator.clipboard) {
			fallbackCopyTextToClipboard(text);
			return;
		}
		navigator.clipboard.writeText(text).then(function () {
			console.log('Async: Copying to clipboard was successful!');
		}, function (err) {
			console.error('Async: Could not copy text: ', err);
		});
	}
</script>
