@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	//Set default product data for use in Visual Editor
	if (Pageview.IsVisualEditorMode)
	{
		ProductViewModelSettings productSetting = new ProductViewModelSettings
		{
			LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
			CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
			CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
			ShopId = Pageview.Area.EcomShopId
		};

		string selectedDummyProduct = "PROD1";
		var list = new ProductListViewModel();
		if (Model.Item.GetValue("DummyProduct") != null)
		{
			list = Model.Item.GetValue("DummyProduct") as ProductListViewModel;

			foreach (var product in list.Products)
			{
				selectedDummyProduct = product.Id;
			}

			ProductViewModel dummyProduct = ViewModelFactory.CreateView(productSetting, selectedDummyProduct);

			if (!Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
			{
				Dynamicweb.Context.Current.Items.Add("ProductDetails", dummyProduct);
			}
		}
		else
		{
			<div class="alert alert-danger" role="alert">
				<span>@Translate("Please select a Dummy product on this paragraph")</span>
			</div>
		}
	}
	else if (!Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		ProductViewModel dummyProduct = new ProductViewModel();
		Dynamicweb.Context.Current.Items.Add("ProductDetails", dummyProduct);
	}
}

@if (Pageview.IsVisualEditorMode)
{
	<div class="alert alert-info" role="alert">
		<span>@Translate("Product catalog App: Edit this column to configure. (Product catalog app must be attached this paragraph)")</span>
	</div>
}

<div class="item_@Model.Item.SystemName.ToLower()">
	@Model.GetModuleOutput()
</div>
