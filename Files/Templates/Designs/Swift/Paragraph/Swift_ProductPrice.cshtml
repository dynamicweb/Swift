@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	ProductViewModel product = null;
	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}
	else if (Pageview.Page.Item["DummyProduct"] != null && Pageview.IsVisualEditorMode)
	{
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel productList = pageViewModel.Item.GetValue("DummyProduct") != null ? pageViewModel.Item.GetValue("DummyProduct") as ProductListViewModel : new ProductListViewModel();

		if (productList?.Products is object)
		{
			product = productList.Products[0];
		}
	}

	string anonymousUsersLimitations = Pageview.AreaSettings.GetRawValueString("AnonymousUsers", "");
	bool anonymousUser = Pageview.User == null;
	bool isErpConnectionDown = !Dynamicweb.Core.Converter.ToBoolean(Dynamicweb.Context.Current.Items["IsWebServiceConnectionAvailable"]);
	bool hidePrice = anonymousUsersLimitations.Contains("price") && anonymousUser || Pageview.AreaSettings.GetBoolean("ErpDownHidePrices") && isErpConnectionDown;
	
	bool productIsDiscontinued = product is object  && product.Discontinued;
	bool doNotShowPriceIfProductIsDiscontinued = Model.Item.GetBoolean("DoNotShowPriceIfProductIsDiscontinued");
	var isDiscontinued = productIsDiscontinued && doNotShowPriceIfProductIsDiscontinued;
}

@if (product is object && !hidePrice && !isDiscontinued) {
	bool showInformativePrice = Model.Item.GetBoolean("ShowInformativePrice");
	string unitId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.Form.Get("UnitId")) ? Dynamicweb.Context.Current.Request.Form.Get("UnitId") : string.Empty;

	string priceFontSize = Model.Item.GetRawValueString("PriceSize", "fs-2");
	string horizontalAlign = Model.Item.GetRawValueString("HorizontalAlignment", "");
	string layout = Model.Item.GetRawValueString("Layout", "horizontal");
	string textAlign = horizontalAlign == "center" ? "text-center" : string.Empty;
	textAlign = horizontalAlign == "end" ? "text-end" : textAlign;

	horizontalAlign = horizontalAlign == "center" && layout == "horizontal" ? "justify-content-center" : horizontalAlign;
	horizontalAlign = horizontalAlign == "end" && layout == "horizontal" ? "justify-content-end" : horizontalAlign;
	horizontalAlign = horizontalAlign == "center" && layout == "vertical" ? "align-items-center" : horizontalAlign;
	horizontalAlign = horizontalAlign == "end" && layout == "vertical" ? "align-items-end" : horizontalAlign;

	string flexDirection = layout == "horizontal" ? string.Empty : "flex-column";
	string flexGap = layout == "horizontal" ? "gap-3" : string.Empty;
	string order = layout == "horizontal" ? string.Empty : "order-2";
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? "theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	theme = GetViewParameter("theme") != null ? GetViewParameterString("theme") : theme;

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-1 px-md-2 py-md-1" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-2 px-md-3 py-md-2" : contentPadding;

	string showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
	bool neverShowVat = string.IsNullOrEmpty(showPricesWithVat);

	string priceMin = "";
	string priceMax = "";

	string liveInfoClass = "";
	string productInfoFeed = "";
	bool isLazyLoadingForProductInfoEnabled = Dynamicweb.Core.Converter.ToBoolean(Dynamicweb.Context.Current.Items["IsLazyLoadingForProductInfoEnabled"]);
	if (isLazyLoadingForProductInfoEnabled)
	{
		if (Dynamicweb.Context.Current.Items.Contains("ProductInfoFeed"))
		{
			productInfoFeed = Dynamicweb.Context.Current.Items["ProductInfoFeed"]?.ToString();
			if (!string.IsNullOrEmpty(productInfoFeed))
			{
				productInfoFeed = $"data-product-info-feed=\"{productInfoFeed}\"";
			}
		}
		liveInfoClass = "js-live-info";
	}

	<div class="@textAlign @liveInfoClass item_@Model.Item.SystemName.ToLower()" data-product-id="@product.Id" data-variant-id="@product.VariantId" @productInfoFeed>
		@if (showInformativePrice && product.PriceInformative.Price != 0)
		{
			<div class="opacity-50">
				<span>@Translate("RRP") </span>
				<span class="text-decoration-line-through text-price">@product.PriceInformative.PriceFormatted</span>
			</div>
		}
		<div class="@priceFontSize m-0 d-flex flex-wrap @flexDirection @flexGap @horizontalAlign" style="row-gap: 0 !important" itemprop="offers" itemscope itemtype="https://schema.org/Offer">
			<span itemprop="priceCurrency" content="@product.Price.CurrencyCode" class="d-none"></span>


			@if (showPricesWithVat == "false" && !neverShowVat)
			{
				if (isLazyLoadingForProductInfoEnabled && !Pageview.IsVisualEditorMode)
				{
					<span itemprop="price" content="" class="d-none"></span>
					<span class="text-decoration-line-through js-text-decoration-line-through opacity-75 me-3 text-price js-text-price d-none" data-show-if="LiveProductInfo.product.Price.Price != LiveProductInfo.product.PriceBeforeDiscount.Price"></span>
				}
				else
				{
					string beforePrice = !string.IsNullOrEmpty(unitId) ? product.GetPrice(unitId).PriceBeforeDiscount.PriceWithoutVatFormatted : product.PriceBeforeDiscount.PriceWithoutVatFormatted;

					<span itemprop="price" content="@product.Price.PriceWithoutVat" class="d-none"></span>
					if (product.Price.Price != product.PriceBeforeDiscount.Price)
					{
						<span class="text-decoration-line-through opacity-75 @order">@beforePrice</span>
					}
				}
			}
			else
			{
				if (isLazyLoadingForProductInfoEnabled && !Pageview.IsVisualEditorMode)
				{
					<span itemprop="price" content="" class="d-none"></span>
					<span class="text-decoration-line-through js-text-decoration-line-through opacity-75 me-3 text-price js-text-price d-none" data-show-if="LiveProductInfo.product.Price.Price != LiveProductInfo.product.PriceBeforeDiscount.Price"></span>
				}
				else
				{
					string beforePrice = !string.IsNullOrEmpty(unitId) ? product.GetPrice(unitId).PriceBeforeDiscount.PriceFormatted : product.PriceBeforeDiscount.PriceFormatted;

					<span itemprop="price" content="@product.Price.Price" class="d-none"></span>

					if (product.Price.Price != product.PriceBeforeDiscount.Price)
					{
						<span class="text-decoration-line-through opacity-75 @order">
							<span class="text-price">@beforePrice</span>
						</span>
					}
				}
			}

			@if (showPricesWithVat == "false" && !neverShowVat)
			{
				if (isLazyLoadingForProductInfoEnabled && !Pageview.IsVisualEditorMode)
				{
					<span class="text-price js-text-price">
						<span class="spinner-border" role="status"></span>
					</span>
				}
				else
				{
					string price = !string.IsNullOrEmpty(unitId) ? product.GetPrice(unitId).Price.PriceWithoutVatFormatted : product.Price.PriceWithoutVatFormatted;

					if (product?.VariantInfo?.VariantInfo != null)
					{
						priceMin = product?.VariantInfo?.PriceMin?.PriceWithoutVatFormatted != null ? product.VariantInfo.PriceMin.PriceWithoutVatFormatted : "";
						priceMax = product?.VariantInfo?.PriceMax?.PriceWithoutVatFormatted != null ? product.VariantInfo.PriceMax.PriceWithoutVatFormatted : "";
					}
					if (priceMin != priceMax)
					{
						price = priceMin + " - " + priceMax;
					}
					<span class="@theme @contentPadding">
						<span class="text-price">@price</span>
					</span>
				}
			}
			else
			{
				if (isLazyLoadingForProductInfoEnabled && !Pageview.IsVisualEditorMode)
				{
					<span class="text-price js-text-price">
						<span class="spinner-border" role="status"></span>
					</span>
				}
				else
				{
					string price = !string.IsNullOrEmpty(unitId) ? product.GetPrice(unitId).Price.PriceFormatted : product.Price.PriceFormatted;

					if (product?.VariantInfo?.VariantInfo != null)
					{
						priceMin = product?.VariantInfo?.PriceMin?.PriceFormatted != null ? product.VariantInfo.PriceMin.PriceFormatted : "";
						priceMax = product?.VariantInfo?.PriceMax?.PriceFormatted != null ? product.VariantInfo.PriceMax.PriceFormatted : "";
					}
					if (priceMin != priceMax)
					{
						price = priceMin + " - " + priceMax;
					}
					<span class="@theme @contentPadding">
						<span class="text-price">@price</span>
					</span>
				}
			}

			@* Stock state for Schema.org, start *@
			@{
				Uri url = Dynamicweb.Context.Current.Request.Url;
			}

			<link itemprop="url" href="@url">

			@{
				bool IsNeverOutOfStock = product.NeverOutOfstock;
			}

			@if (IsNeverOutOfStock)
			{
				<span itemprop="availability" class="d-none">@Translate("Available in stock")</span>
			}
			else
			{
				if (product.StockLevel > 0)
				{
					<span itemprop="availability" class="d-none">InStock</span>
				}
				else
				{
					<span itemprop="availability" class="d-none">OutOfStock</span>
				}
			}
			@* Stock state for Schema.org, stop *@

		</div>

		@if (showPricesWithVat == "false" && !neverShowVat)
		{
			if (isLazyLoadingForProductInfoEnabled && !Pageview.IsVisualEditorMode)
			{
				<small class="opacity-85 fst-normal js-text-price-with-vat d-none" data-suffix="@Translate("Incl. VAT")"></small>
			}
			else
			{
				string price = !string.IsNullOrEmpty(unitId) ? product.GetPrice(unitId).Price.PriceWithVatFormatted : product.Price.PriceWithVatFormatted;

				if (product?.VariantInfo?.VariantInfo != null)
				{
					priceMin = product?.VariantInfo?.PriceMin?.PriceWithVatFormatted != null ? product.VariantInfo.PriceMin.PriceWithVatFormatted : "";
					priceMax = product?.VariantInfo?.PriceMax?.PriceWithVatFormatted != null ? product.VariantInfo.PriceMax.PriceWithVatFormatted : "";
				}
				if (priceMin != priceMax)
				{
					price = priceMin + " - " + priceMax;
				}
				<small class="opacity-85 fst-normal">@price @Translate("Incl. VAT")</small>
			}
		}
	</div>
}
else if (Pageview.IsVisualEditorMode)
{
	<div class="alert alert-dark m-0" role="alert">
		<span>@Translate("No products available")</span>
	</div>
}
