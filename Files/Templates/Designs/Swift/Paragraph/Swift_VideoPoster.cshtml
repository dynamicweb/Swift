@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using System.IO

@functions
{

	private string RenderCustomCSS(IEnumerable<string> decorations)
	{
		var cssClasses = new List<string>();

		foreach (var itemId in decorations)
		{
			var item = Dynamicweb.Content.Services.Items.GetItem("Swift_Css", itemId);
			item.TryGetValue("Class", out object classes);

			if (classes is null)
			{
				continue;
			}

			var cssString = (string)classes;

			if (cssString.StartsWith("["))
			{
				var cssArray = Dynamicweb.Core.Converter.Deserialize<string[]>(cssString);
				cssClasses.AddRange(cssArray);
			}
			else
			{
				cssClasses.Add(cssString.Replace(",", " "));
			}
		}

		return string.Join(" ", cssClasses).Trim();
	}

}

@{
	string layout = Model.Item.GetRawValueString("Layout", "align-middle-center-text-center");

	bool movePageBehind = false;
	bool isFirstPoster = false;
	string movePageBehindClass = "";
	if (Pageview.Page.PropertyItem != null)
	{
		string headerCssClass = Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"] != null ? Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
		movePageBehind = headerCssClass == "fixed-top" && !Pageview.IsVisualEditorMode ? true : false;
		if (movePageBehind)
		{
			movePageBehindClass = " poster-behind";
			if (!Dynamicweb.Context.Current.Items.Contains("firstPosterIsRendered"))
			{
				isFirstPoster = true;
				Dynamicweb.Context.Current.Items.Add("firstPosterIsRendered", true);
			}
		}
	}

	string posterHeight = Model.Item.GetRawValueString("PosterHeight", "h-100 min-vh-75 min-vh-md-100");
	posterHeight = posterHeight == "small" ? "min-vh-25 min-vh-md-50" : posterHeight;
	posterHeight = posterHeight == "medium" ? "min-vh-50 min-vh-md-75" : posterHeight;
	posterHeight = posterHeight == "large" ? "min-vh-75 min-vh-md-100" : posterHeight;

	string posterPadding = Model.Item.GetRawValueString("ContentPadding", "");
	posterPadding = posterPadding == "none" ? "p-3 px-xl-3 py-xl-4" : posterPadding;
	posterPadding = posterPadding == "small" ? "p-3 p-xl-4" : posterPadding;
	posterPadding = posterPadding == "large" ? "p-4 p-xl-5" : posterPadding;

	string posterWidth = "container-xl";

	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	var decorations = Model.Item?.GetList("CssDecorations")?.GetRawValue().OfType<string>() ?? Enumerable.Empty<string>();
	string css = RenderCustomCSS(decorations);
	string alignment = "";

	string maxWidth = Model.Item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? "mw-75ch d-inline-block" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;
}

<div class="position-relative h-100@(theme)@(movePageBehindClass) @(css) item_@Model.Item.SystemName.ToLower()">
	<div id="@Model.ID" class="user-select-none position-absolute top-0" style="scroll-margin-top:var(--header-height,150px)"></div>
	@*Render video*@
	@if (!string.IsNullOrEmpty(Model.Item.GetString("Video")))
	{
		string video = Model.Item.GetString("Video");
		string imageFilter = Model.Item.GetRawValueString("ImageFilter", "");
		imageFilter = imageFilter == "no-filter" ? "" : imageFilter;
		imageFilter = imageFilter == "filter" ? " image-filter" : imageFilter;
		string videoType = Path.GetExtension(video).ToLower();
		string videoPath = System.Uri.EscapeUriString(Model.Item.GetString("Video"));

		<div class="position-absolute top-0 bottom-0 end-0 start-0@(imageFilter)">
			<video preload="auto" loop autoplay muted playsinline class="h-100 w-100" style="object-fit: cover;">
				<source src="@videoPath"
						type="video/@videoType.Replace(".", "")">
			</video>
		</div>
	}

	@switch (layout)
	{
		case "align-top-left-text-left":
			alignment = "text-start justify-content-start align-items-start";
			break;
		case "align-top-center-text-center":
			alignment = "text-center justify-content-start align-items-start";
			break;
		case "align-top-right-text-right":
			alignment = "text-end justify-content-start align-items-start";
			break;
		case "align-middle-left-text-left":
			alignment = "text-start justify-content-center align-items-center";
			break;
		case "align-middle-center-text-center":
			alignment = "text-center justify-content-center align-items-center";
			break;
		case "align-middle-right-text-right":
			alignment = "text-end justify-content-center align-items-center";
			break;
		case "align-bottom-left-text-left":
			alignment = "text-start justify-content-end align-items-end";
			break;
		case "align-bottom-center-text-center":
			alignment = "text-center justify-content-end align-items-end";
			break;
		case "align-bottom-right-text-right":
			alignment = "text-end justify-content-end align-items-end";
			break;
	}
	<div class="position-relative h-100">
		<div class="h-100 grid grid-1 @(posterWidth) @posterPadding @(alignment) @(posterHeight)" id="Poster_@Pageview.CurrentParagraph.ID">
			<div class="grid grid-1 gap-3 gap-md-4">
				@{
					//Render title
					if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
					{
						string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-1");
						string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
						string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} m-0\">";
						string headingLevelStop = $"</{headingLevel}>";

						@headingLevelStart
						<span class="@maxWidth">@Model.Item.GetString("Title")</span>
						@headingLevelStop
					}

					//Render text
					if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
					{

						string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");
						<p class="@subtitleFontSize lead m-0">
							<span class="@maxWidth">
								@Model.Item.GetString("Text")
							</span>
						</p>
					}
					//Render button
					string linkType = Model.Item.GetRawValueString("LinkType", "page");
					Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();

					string StretchedLink = Model.Item.GetRawValueString("StretchedLink", "");
					StretchedLink = StretchedLink == "column-not-clickable" ? "" : StretchedLink;
					StretchedLink = StretchedLink == "column-clickable" ? " stretched-link" : StretchedLink;

					if (linkType == "page" && Model.Item.GetLink("ButtonLink") != null)
					{
						link = Model.Item.GetLink("ButtonLink");
					}

					if (linkType == "product-group")
					{
						IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
						IList<string> groupIds = new List<string> { };

						if (selectedGroups != null)
						{
							foreach (var fromGroup in selectedGroups)
							{
								groupIds.Add(fromGroup.Id);
							}
						}

						link = new Dynamicweb.Frontend.LinkViewModel()
						{
							Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
							IsExternal = false
						};
					}

					if (linkType == "product")
					{
						ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
						IList<string> productIds = new List<string> { };

						if (products != null && products.Products.Any())
						{
							foreach (var product in products.Products)
							{
								productIds.Add(product.Id);
							}

							string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
							string productLink = products.Products?.FirstOrDefault()?.GetProductLink(GetPageIdByNavigationTag("Shop"), false);
							productLink = productIds.Count != 1 ? "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&" + productParameter + "=" + string.Join(",", productIds).Trim() : productLink;

							link = new Dynamicweb.Frontend.LinkViewModel()
							{
								Url = productLink,
								IsExternal = false
							};
						}
					}

					if (link != null && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
					{
						string target = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "target=\"_blank\"" : "";
						string rel = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "rel=\"noopener\"" : "";

						string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "primary");
						buttonStyle = buttonStyle == "primary" ? "btn-primary" : buttonStyle;
						buttonStyle = buttonStyle == "secondary" ? "btn-secondary" : buttonStyle;
						buttonStyle = buttonStyle == "link" ? "btn-link" : buttonStyle;

						string ButtonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
						ButtonSize = ButtonSize == "small" ? " btn-sm" : ButtonSize;
						ButtonSize = ButtonSize == "regular" ? "" : ButtonSize;
						ButtonSize = ButtonSize == "large" ? " btn-lg" : ButtonSize;

						<div class="mt-0">
							<a href="@link.Url" @target @rel class="btn @buttonStyle@(ButtonSize)@(StretchedLink)">@Model.Item.GetString("ButtonLabel")</a>
						</div>
					}
					else if (link != null && !string.IsNullOrEmpty(link.Url))
					{
						string target = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "target=\"_blank\"" : "";
						string rel = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "rel=\"noopener\"" : "";

						<a href="@link.Url" @target @rel class="@StretchedLink">
							<span class="visually-hidden">@Model.Item.GetString("Title")</span>
						</a>
					}
				}
			</div>
		</div>
	</div>
</div>

@if (movePageBehind && isFirstPoster)
{
	<script>
		['resize', 'load'].forEach(function (e) {
			window.addEventListener(e, () => swift.Scroll.setContentPosition());
		});
	</script>
}
