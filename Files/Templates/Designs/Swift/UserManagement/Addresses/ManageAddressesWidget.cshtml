@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@GetString("UserManagement:User.ManageAddresses.AddAddress.Javascript")
@GetString("UserManagement:User.ManageAddresses.UpdateAddress.Javascript")
@GetString("UserManagement:User.ManageAddresses.DeleteAddress.Javascript")
@GetString("UserManagement:User.ManageAddresses.MakeDefault.Javascript")

@{
	var addressesLoop = GetLoop("UserManagement:User.UserAddresses");

	var themeRaw = Pageview.CurrentParagraph.Item["Theme"]?.ToString();
	string theme = !string.IsNullOrEmpty(themeRaw) ? " h-100 theme " + themeRaw.Replace(" ", "").Trim().ToLower() : string.Empty;

	int addessesPageSize = 2;
	int addessesCount = 0;

	string addressesPageLink = Pageview.CurrentParagraph.Item["AddressesPage"] != null ? Pageview.CurrentParagraph.Item["AddressesPage"].ToString() : string.Empty;

	bool userAddressesIsStandardSwiftTemplates = Pageview.AreaSettings.GetString("AddressFieldsBasedOn", "swift") == "swift";
}

@if (!string.IsNullOrEmpty(Pageview.User.Address) || addressesLoop.Count > 0)
{
	<div class="@(theme)">
		<header class="p-3 border-bottom">
			<div class="d-flex flex-row align-items-center gap-3">
				<h2 class="h6 m-0 flex-fill">@Translate("My addresses")</h2>

				@if (addressesPageLink != "")
				{
					<a href="@addressesPageLink" id="ViewAllAddresses">@Translate("View all")</a>
				}
			</div>
		</header>

		<div class="grid gap-3 p-3">
			@if (!string.IsNullOrEmpty(Pageview.User.Address) || !string.IsNullOrEmpty(Pageview.User.Country) || !string.IsNullOrEmpty(Pageview.User.Zip) || !string.IsNullOrEmpty(Pageview.User.State))
			{
				addessesCount++;

				<div class="g-col-12 g-col-lg-6">
					<h3 class="mb-2 h6 fw-bold">@Translate("Billing address")</h3>

					@if (userAddressesIsStandardSwiftTemplates)
					{
						if (!string.IsNullOrEmpty(Pageview.User.Address))
						{
							<div>@Pageview.User.Address</div>
						}
						if (!string.IsNullOrEmpty(Pageview.User.Zip) || !string.IsNullOrEmpty(Pageview.User.City))
						{
							<div>@Pageview.User.Zip<span>&nbsp;</span>@Pageview.User.City</div>
						}
						if (!string.IsNullOrEmpty(Pageview.User.State))
						{
							<div>@Pageview.User.State</div>
						}
						if (!string.IsNullOrEmpty(Pageview.User.Country))
						{
							<div>@Pageview.User.Country</div>
						}
					}
					else
					{
						<text>
						@RenderUserAddressBlock(Pageview.User)
						</text>
					}

					@if (!string.IsNullOrEmpty(Pageview.User.Email))
					{
						<div>@Pageview.User.Email</div>
					}

					@if (!string.IsNullOrEmpty(Pageview.User.Phone))
					{
						<div>@Pageview.User.Phone</div>
					}
				</div>
			}

			@foreach (LoopItem address in addressesLoop.OrderByDescending(address => address.GetString("UserManagement:User.UserAddress.Default")).ToList())
			{
				if (addessesCount < addessesPageSize)
				{
					string addressId = address.GetString("UserManagement:User.UserAddress.ID");
					addessesCount++;

					<div class="g-col-12 g-col-lg-6">
						@if (userAddressesIsStandardSwiftTemplates)
						{
							if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Description.Value")))
							{
								<h3 class="mb-2 h6 fw-bold">@Translate("Delivery address") - @address.GetString("UserManagement:User.UserAddress.Description.Value")</h3>
							}
							else
							{
								<h3 class="mb-2 h6 fw-bold">@Translate("Delivery address")</h3>
							}
							if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Address.Value")))
							{
								<div>@address.GetString("UserManagement:User.UserAddress.Address.Value")</div>
							}
							if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Zip.Value")) || !string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.City.Value")))
							{
								<div>@address.GetString("UserManagement:User.UserAddress.Zip.Value")<span>&nbsp;</span>@address.GetString("UserManagement:User.UserAddress.City.Value")</div>
							}
							if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.State.Value")))
							{
								var countryCode = address.GetString("UserManagement:User.UserAddress.CountryCode");
								string stateName = Dynamicweb.Ecommerce.Services.Countries.GetRegion(countryCode, address.GetString("UserManagement:User.UserAddress.State"))?.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) ?? string.Empty;

								<div>@stateName</div>
							}
							if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Country.Value")))
							{
								<div>@address.GetString("UserManagement:User.UserAddress.Country.Value")</div>
							}
						}
						else
						{
							<text>
							@RenderUserItemAddressBlock(address)
							</text>
						}

						@if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Email.Value")))
						{
							<div>@address.GetString("UserManagement:User.UserAddress.Email.Value")</div>
						}

						@if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Phone.Value")))
						{
							<div>@address.GetString("UserManagement:User.UserAddress.Phone.Value")</div>
						}
					</div>
				}
			}
		</div>
	</div>
}

@Include("../Helpers/UserAddressDisplayFormatted.cshtml")
