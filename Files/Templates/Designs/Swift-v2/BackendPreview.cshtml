@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Dynamicweb
@using Dynamicweb.Environment
@using Dynamicweb.Frontend
@using Dynamicweb.Content

@{
	var cssStyleFileInfo = new System.IO.FileInfo(Dynamicweb.Core.SystemInformation.MapPath("/Files/Templates/Designs/Swift-v2/Assets/css/styles.css"));
	Dynamicweb.Context.Current.Response.AddHeader("link", $"</Files/Templates/Designs/Swift-v2/Assets/css/swift.css?{cssStyleFileInfo.LastWriteTime.Ticks}>; rel=preload; as=style;");

	string pageId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("ID") : string.Empty;
	string paragraphId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ParagraphID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("ParagraphID") : string.Empty;
	string rowId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("RowID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("RowID") : string.Empty;
	var gridContent = Model.Grid("Grid", "Grid", "default:true;sort:1", "Page");
}

@* Swift stylesheet *@
<link href="/Files/Templates/Designs/Swift-v2/Assets/css/swift.css?@cssStyleFileInfo.LastWriteTime.Ticks" rel="stylesheet" media="all" type="text/css">

@* Color schemes stylesheet *@
@if (Model.GetColorSchemeStyle() != null) {
	<link href="@Model.GetColorSchemeStyle()" rel="stylesheet" media="all" type="text/css">
}
@* Button stylesheet *@
@if (Model.GetButtonStyle() != null) {
	<link href="@Model.GetButtonStyle()" rel="stylesheet" media="all" type="text/css">
}
@* Typography stylesheet *@
@if (Model.GetTypographyStyle() != null) {
	<link href="@Model.GetTypographyStyle()" rel="stylesheet" media="all" type="text/css" data-typography>
}

<style>
	.preview { 
		--swift-content-padding: 2rem;
		--swift-poster-padding: clamp(2rem, 5%, max(4rem,5%));
		background-color: white; 
	}
	.preview .poster {
		min-height: 22rem !important;
	}	

	@@media (min-width: 1200px) {
    	[data-swift-container] {
			--dw-container-width: 95%;
		}
	}
</style>

<div class="body preview" data-dw-colorscheme="@Model.Area.ColorScheme?.Id">
	<div data-dw-colorscheme="@Model.ColorScheme?.Id">
		@{
			if (!string.IsNullOrEmpty(paragraphId))
			{ 
				Paragraph paragraph = Dynamicweb.Content.Services.Paragraphs.GetParagraph(Convert.ToInt32(paragraphId));

				<div data-swift-gridcolumn class="p-3" data-dw-itemtype="@paragraph.Item.SystemName.ToLower()" id="@paragraph.ID" data-dw-colorscheme="@paragraph.ColorSchemeId">
					@RenderParagraphContent(Convert.ToInt32(paragraphId))
				</div>
			}
			else if (!string.IsNullOrEmpty(rowId)) 
			{
				@RenderGridRow(Convert.ToInt32(rowId))
			}
			else
			{
				@gridContent
			}
		}
	</div>
</div>




