@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Dynamicweb
@using Dynamicweb.Environment
@using Dynamicweb.Frontend
@using Dynamicweb.Rendering
@using Dynamicweb.Content

@{
	var cssStyleFileInfo = new System.IO.FileInfo(Dynamicweb.Core.SystemInformation.MapPath("/Files/Templates/Designs/Swift-v2/Assets/css/styles.css"));
	Dynamicweb.Context.Current?.Response.AddHeader("link", $"</Files/Templates/Designs/Swift-v2/Assets/css/swift.css?{cssStyleFileInfo.LastWriteTime.Ticks}>; rel=preload; as=style;");

	string? pageId = Dynamicweb.Context.Current?.Request.QueryString.Get("ID");
	string? paragraphId = Dynamicweb.Context.Current?.Request.QueryString.Get("ParagraphID");
	string? rowId = Dynamicweb.Context.Current?.Request.QueryString.Get("RowID");
	string? cacheId = Dynamicweb.Context.Current?.Request.QueryString.Get("cacheId");

	var gridContent = Model.Grid("Grid", "Grid", "default:true;sort:1", "Page");

	@* Get stylesheets *@
	@Model.GetStylesheetsMarkup()
}

@* Swift stylesheet *@
<link href="/Files/Templates/Designs/Swift-v2/Assets/css/swift.css?@cssStyleFileInfo.LastWriteTime.Ticks" rel="stylesheet" media="all" type="text/css">

@* Color schemes stylesheet *@
@if (Model.TryGetColorSchemeStyle(out string? colorSchemeStyle))
{
	<link href="@colorSchemeStyle" rel="stylesheet" media="all" type="text/css">
}
@* Button stylesheet *@
@if (Model.TryGetButtonStyle(out string? buttonStyle)) {
	<link href="@buttonStyle" rel="stylesheet" media="all" type="text/css">
}
@* Typography stylesheet *@
@if (Model.TryGetTypographyStyle(out string? typographyStyle)) {
	<link href="@typographyStyle" rel="stylesheet" media="all" type="text/css" data-typography>
}

<style>
	.preview { 
		background-color: white; 
		
		
		[data-swift-poster] {
			--swift-poster-height: 20rem;
			max-height: 30rem;
			width: 60rem;

		}

		h1, .h1, .dw-h1, h2, .h2, .dw-h2, h3, .h3, .dw-h3, h4, .h4, .dw-h4, h5, .h5, .dw-h5, h6, .h6, .dw-h6 {
			margin-block-end: 1rem;
		}

		p {
			line-height: 1.2;
		}

		.swiffy-slider .card {
			min-height: unset;
			max-height: 40rem;

			img {
				position: relative !important;
			}
		}
	

		.swiffy-slider .card {
			min-height: unset;
			max-height: 40rem;

			img {
				position: relative !important;
			}
		}
	}

	@@media (min-width: 1200px) {
    	[data-swift-container] {
			--dw-container-width: 95%;
		}
	}
</style>

<div class="body preview" data-dw-colorscheme="@Model.Area?.ColorScheme?.Id">
	<div data-dw-colorscheme="@Model.ColorScheme?.Id">
		@{
			if (paragraphId is not null)
			{ 
				Paragraph? paragraph = Dynamicweb.Content.Services.Paragraphs.GetParagraph(Convert.ToInt32(paragraphId));

				<div data-swift-gridcolumn class="p-3" data-dw-itemtype="@paragraph?.Item?.SystemName.ToLower()" id="@paragraph?.ID" data-dw-colorscheme="@paragraph?.ColorSchemeId">
					@RenderParagraphContent(Convert.ToInt32(paragraphId))
				</div>
			}
			else if (rowId is not null) 
			{
				@RenderGridRow(Convert.ToInt32(rowId))
			}
			else if (!string.IsNullOrEmpty(cacheId))
			{ 	
				string? itemTemplate = Dynamicweb.Context.Current?.Request.QueryString.Get("ItemTemplate");
				
				if (Dynamicweb.Caching.Cache.Current.Get(cacheId) is ParagraphViewModel paragraphViewModel && !string.IsNullOrEmpty(paragraphViewModel.ItemType)){	
					<div data-swift-gridcolumn data-dw-colorscheme="@paragraphViewModel.ColorScheme?.Id">				
						@RenderPartial($"/Paragraph/{paragraphViewModel.ItemType}/{itemTemplate}", paragraphViewModel)
					</div>
				}
			}
			else 
			{
				@gridContent
			}
		}
	</div>
</div>




