@inherits Dynamicweb.Rendering.ViewModelTemplate<PageViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.Products

<div aria-label="@Translate("Customer Center Navigation")" class="pe-0 pe-lg-4 offcanvas-lg offcanvas-start border-end-0" tabindex="-1" id="offcanvas_@(Model.ID)" aria-labelledby="offcanvas_@(Model.ID)_Label">
    <div class="d-lg-block px-4 py-0 p-lg-0 offcanvas-header">
        
        @if (Model.CurrentUser != null)
        {
            <div class="vstack align-items-center p-3 position-relative">
                <a href="@(SearchEngineFriendlyURLs.GetFriendlyUrl(GetPageIdByNavigationTag("CustomerCenter")))" class="stretched-link"></a>

                @if(Model.CurrentUser.TryGetImageFile(out ImageFileViewModel image))
                {
                    <div class="align-self-auto hstack justify-content-center p-0" style="height:4rem; aspect-ratio:1;">
                        <img src="@image.ToGetImage(new(){ Width = 60, Ratio = "1/1" })" alt="@Model.CurrentUser.Name" class="img-thumbnail rounded-circle" itemprop="image"/>
                    </div>
                }
                else 
                {
                    <div class="btn btn-primary align-self-auto hstack justify-content-center p-0" style="height:4rem; aspect-ratio:1;" data-dw-button="primary">
                        <div class="d-flex dw-h6 lh-1 m-0">
                            <span>@(Model.CurrentUser?.FirstName?.Trim().First() ?? Model.CurrentUser?.Name?.Trim().ElementAt(0))</span>
                            <span>@(Model.CurrentUser?.LastName?.Trim().First() ?? Model.CurrentUser?.Name?.Trim().ElementAt(1))</span>
                        </div>
                    </div>
                }

                <div class="text-center w-100 mt-2">
                    <h5 class="h6 mb-0">@(Model.CurrentUser?.FirstName ?? Model.CurrentUser?.Name) @(Model.CurrentUser?.LastName ?? null)</h5>
                </div>

            </div>
        }

        <button type="button" class="btn-close d-lg-none" data-bs-dismiss="offcanvas" data-bs-target="#offcanvas_@(Model.ID)" aria-label="@Translate("Close")"></button>
    </div>

    <div class="d-block py-0 offcanvas-body">
        @{
            var navigationSettings = new NavigationSettings();
            navigationSettings.ExpandMode = ExpandMode.All;
            navigationSettings.IncludeFoldersAndHidden = true;
            navigationSettings.StartLevel = 2;
            navigationSettings.StopLevel = 5;
            var sidebarNav = Navigation.GetNavigationViewModel(navigationSettings);

            <nav class="list-group gap-1 fs-7 border-top border-1 rounded-0 pt-1" style="--bs-border-width: 0; --bs-list-group-action-hover-bg: rgba(var(--dw-color-foreground-rgb), .05); --bs-list-group-action-active-bg: rgba(var(--dw-color-foreground-rgb), .1); --bs-list-group-active-bg: rgba(var(--dw-color-foreground-rgb), .08);" role="navigation">
                @foreach (var node in sidebarNav.Nodes)
                {
                    if (node.ShowInMenu){
                        await RenderNavItem(node);
                    }
                }
            </nav>
        }
    </div>
</div>

<button type="button" class="fixed-bottom m-3 d-lg-none btn btn-primary" data-dw-button="primary" data-bs-toggle="offcanvas" data-bs-target="#offcanvas_@(Model.ID)" aria-controls="offcanvas_@(Model.ID)">@Translate("Customer center menu")</button>

@{
    async Task RenderNavItem(NavigationTreeNodeViewModel node)
    {
        var pageIcon = string.Empty;
        var nodePage = Dynamicweb.Content.Services.Pages.GetPage(node.PageId);
        if (nodePage?.PropertyItem?.TryGetValue("Icon", out object? pageIconValue) ?? false)
        {
            pageIcon = Dynamicweb.Core.Converter.ToString(pageIconValue);
        }

        if (node.IsClickable)
        {
            <a class="list-group-item list-group-item-action rounded hstack gap-2 @(node.IsActive ? "active" : null)" aria-current="@(node.IsActive)" href="@(node.Link)">
                @if (pageIcon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
                {
                    <span class="icon-2">@ReadFile(pageIcon)</span>
                }
                <span>@node.Name</span>
                @if (node.Nodes.Any())
                {
                    <span class="icon-2 ms-auto">@ReadFile("/Files/Images/Icons/chevron-right.svg")</span>
                }
            </a>
            
            @if(node.InPath && node.Nodes.Any()) 
            {
                <div class="border-3 border-start ps-2">
                    @foreach (var subnode in node.Nodes)
                    {
                        await RenderNavItem(subnode);
                    }           
                </div>
            }
        }
        else
        {
            <h6 class="fs-8 mt-3 mb-2  text-body text-opacity-50 text-uppercase">@node.Name</h6>
            
            @foreach (var subnode in node.Nodes)
            {
                await RenderNavItem(subnode);
            }
        }
    }
}