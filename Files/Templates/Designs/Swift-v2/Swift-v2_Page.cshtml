@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using System
@using Dynamicweb.Frontend
@using Dynamicweb.Frontend.Devices
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.Products
@MasterPageFile("Swift-v2_Master.cshtml")

@functions {
    bool IsContentOnly()
    {
        return Dynamicweb.Core.Converter.ToBoolean(Dynamicweb.Context.Current?.Request.QueryString.Get("ContentOnly") ?? "false");
    }
}

@{ // Page headers
    LinkViewModel headerLink;
    if (!IsContentOnly() && ((Pageview.Device == DeviceType.Desktop && (Model.Area?.Item?.TryGetLink("HeaderDesktop", out headerLink) ?? false)) ||
    !IsContentOnly() && (Pageview.Device == DeviceType.Mobile || Pageview.Device == DeviceType.Tablet) && (Model.Area?.Item?.TryGetLink("HeaderMobile", out headerLink) ?? false)))
    {
        string? headerCss = null;
        var headerPage = ContentViewModelFactory.CreatePageInfoViewModel(Dynamicweb.Content.Services.Pages.GetPage(headerLink.PageId));
        if ((headerPage.Item?.TryGetString("HeaderPosition", out string headerPosition) ?? false) && !headerPosition.Equals("static", StringComparison.OrdinalIgnoreCase))
        {
            headerCss = headerPosition;
        }
        <header data-swift-page-header="@(headerLink.PageId)" class="@headerCss" data-dw-colorscheme="@headerPage.ColorScheme?.Id">
            @RenderGrid(headerLink.PageId)
        </header>
    }
}

<main id="content">
    
    @Model.Grid("Grid", "Grid", "default:true;sort:1", "Page")
    
</main>

@{ // Page footers
    LinkViewModel footerLink;
    if (!IsContentOnly() && ((Pageview.Device == DeviceType.Desktop) && (Model.Area?.Item?.TryGetLink("FooterDesktop", out footerLink) ?? false)) ||
    !IsContentOnly() && ((Pageview.Device == DeviceType.Mobile || Pageview.Device == DeviceType.Tablet) && (Model.Area?.Item?.TryGetLink("FooterMobile", out footerLink) ?? false)))
    {
        var footerPage = ContentViewModelFactory.CreatePageInfoViewModel(Dynamicweb.Content.Services.Pages.GetPage(footerLink.PageId));
        <footer data-swift-page-footer="@(footerLink.PageId)" data-dw-colorscheme="@footerPage.ColorScheme?.Id">
            @RenderGrid(footerLink.PageId)
        </footer>
    }
}

@if (!IsContentOnly())
{
    @* Language selector modal *@
    <div class="modal fade" id="PreferencesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-sm" id="PreferencesModalContent">
            @* The content here comes from an external request *@
        </div>
    </div>

    @* Favorite toast *@
    <div aria-live="polite" aria-atomic="true">
        <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
            <div id="favoriteNotificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">@Translate("Favorite list updated")</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body d-flex gap-3">
                    <div id="favoriteNotificationToast_Image"></div>
                    <div id="favoriteNotificationToast_Text"></div>
                </div>
            </div>
        </div>
    </div>

    @* Modal for dynamic content *@
    <div class="modal fade js-product" id="DynamicModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-md">
            <div class="modal-content" id="DynamicModalContent">
                @* The content here comes from an external request *@
            </div>
        </div>
    </div>

    @* Offcanvas for dynamic content *@
    <div class="offcanvas offcanvas-end" tabindex="-1" id="DynamicOffcanvas">
        @* The content here comes from an external request *@
    </div>

    @* MiniCart Offcanvas *@
    @{
        var cartSummaryPageId = Dynamicweb.Content.Services.Pages.GetPageByNavigationTag(Pageview.AreaID, "CartSummary")?.ID ?? 0;
        if ((Model.Area?.Item?.TryGetString("OffcanvasMinicartBehaviour", out string offcanvasMiniCartBehaviour) ?? false) && (!offcanvasMiniCartBehaviour.Equals("0")) && (cartSummaryPageId > 0))
        {
            @* Open MiniCart when the cart is updated *@
            <script type="module">

                document.addEventListener('updated.swift.cart', (event) => {
                    let orderContext = event?.detail?.formData?.get("OrderContext");
                    updateCartSummary(orderContext);

                    let offcanvasMiniCartBehaviourJs = "@offcanvasMiniCartBehaviour";
                    
                    if (event?.detail?.formData?.get("MiniCartBehaviour")) {
                        offcanvasMiniCartBehaviourJs = event?.detail?.formData?.get("MiniCartBehaviour");
                    }

                    if (offcanvasMiniCartBehaviourJs == "2" || offcanvasMiniCartBehaviourJs == "3") {
                        openMiniCartOffcanvas();
                    }
                });
            </script>

            if (offcanvasMiniCartBehaviour == "1" || offcanvasMiniCartBehaviour == "3")
            {
                @* Open MiniCart when toggle is clicked *@
                <script type="module">
                    let miniCartToggles = document.querySelectorAll('.mini-cart-quantity');
                    miniCartToggles?.forEach((toggle) => {
                        toggle.parentElement.addEventListener('click', (event) => {
                            event.preventDefault();
                            let orderContext = toggle.dataset?.orderContext;
                            updateCartSummary(orderContext);

                            openMiniCartOffcanvas();
                        });
                    });
                </script>
            }

            <script>
                const updateCartSummary = (orderContext) => {
                    const dynamicOffcanvas = document.getElementById('DynamicOffcanvas');
                    swift.PageUpdater.UpdateFromUrlInline(event, '/Default.aspx?ID=@(cartSummaryPageId)&CartType=minicart&RequestPageID=@(Pageview.Page.ID)&OrderContext=' + orderContext +'', 'Swift-v2_CartSummary.cshtml', dynamicOffcanvas);
                };
                const openMiniCartOffcanvas = () => {
                    const dynamicOffcanvas = document.getElementById('DynamicOffcanvas');
                    const miniCartOffcanvas = bootstrap.Offcanvas.getOrCreateInstance(dynamicOffcanvas);
                    dynamicOffcanvas.classList.add('overflow-y-auto');

                    if (!miniCartOffcanvas._isShown) {
                        miniCartOffcanvas.show();
                        hideActiveOffcanvases(miniCartOffcanvas);
                    }
                };
                const hideActiveOffcanvases = (miniCartOffcanvas) => {
                    let activeOffcanvases = document.querySelectorAll('.offcanvas.show');
                    activeOffcanvases?.forEach((offCanvas) => {
                        offCanvas = bootstrap.Offcanvas.getInstance(offCanvas);
                        if (offCanvas !== miniCartOffcanvas) {
                            offCanvas.hide();
                        }
                    });
                };
            </script>
        }
    }
}
