@inherits ViewModelTemplate<ProductViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.Products;
@using Dynamicweb.Core;

@{
	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		Dynamicweb.Context.Current.Items["ProductDetails"] = Model;
	}
	else
	{
		Dynamicweb.Context.Current.Items.Add("ProductDetails", Model);
	}
	
	ProductViewModel replacementProduct = Model.Discontinued && Model.ReplacementProduct != null && !string.IsNullOrEmpty(Model.ReplacementProduct.ProductId) ? Model.ReplacementProduct.GetProduct() : null;
	bool showReplacementProduct = Model.Discontinued && replacementProduct != null && replacementProduct.Active && (replacementProduct.StockLevel > 0 || replacementProduct.NeverOutOfstock);
}

@if (showReplacementProduct)
{
	string showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
	bool neverShowVat = string.IsNullOrEmpty(showPricesWithVat);

	string replacementProductLink = replacementProduct.GetProductLink(GetPageIdByNavigationTag("Shop"), false);
	string replacementProductStockState = replacementProduct.NeverOutOfstock ? Translate("In stock") : $"{replacementProduct.StockLevel} {Translate("In stock")}";
	string replacementProductPrice = showPricesWithVat == "false" && !neverShowVat ? replacementProduct.PriceBeforeDiscount.PriceWithoutVatFormatted : replacementProduct.PriceBeforeDiscount.PriceFormatted;
	
	string disableQuantityField = null;
	double? stepQty = replacementProduct.PurchaseQuantityStep > 0 ? replacementProduct.PurchaseQuantityStep : 1;
	double? minQty = replacementProduct.PurchaseMinimumQuantity > 0 ? replacementProduct.PurchaseMinimumQuantity : 1;
	double? maxQty = null;
	bool isStockType = replacementProduct.ProductType == Dynamicweb.Ecommerce.Products.ProductType.Stock;

	if (isStockType && !replacementProduct.NeverOutOfstock)
	{
		disableQuantityField = (replacementProduct.StockLevel <= 0) || replacementProduct.Discontinued ? "disabled" : disableQuantityField;
		maxQty = replacementProduct.StockLevel;
	}

	int productCounter = Converter.ToInt32(Dynamicweb.Context.Current.Request.QueryString.Get("productCounter"));
	double? quantity = Converter.ToDouble(Dynamicweb.Context.Current.Request.QueryString.Get("quantity"));

	if (productCounter == 0) { productCounter = 1; }
	if (quantity == 0) { quantity = minQty; }

	bool isErpConnectionDown = !Converter.ToBoolean(Dynamicweb.Context.Current.Items["IsWebServiceConnectionAvailable"]);
	bool hidePrice = Pageview.AreaSettings.GetBoolean("ErpDownHidePrices") && isErpConnectionDown;

	string link = Model.GetProductLink(GetPageIdByNavigationTag("Shop"), false);

	<table class="table" id="modalReplacementBody">
		<thead>
		<tr>
			<td></td>
			<td>@Translate("Number")</td>
			<td>@Translate("Product")</td>
			<td>@Translate("Variant")</td>
			<td>@Translate("Stock state")</td>
			<td class="text-end">@Translate("Price")</td>
		</tr>
		</thead>
		<tbody>
		<tr class="opacity-50">
			<td class="border-bottom-0 align-middle">
				<img class="img-fluid productImage" src="/Admin/public/getimage.ashx?image=@Dynamicweb.Context.Current.Server.UrlEncode(Model.DefaultImage.Value)&width=60&height=60&format=webp&Crop=5&fillcanvas=true" height="60" width="60" alt="@Model.Name">
			</td>
			<td class="border-bottom-0 align-middle" id="modalProductNumber">@Model.Number</td>
			<td class="border-bottom-0 align-middle" id="modalProductName">@Model.Name</td>
			<td class="border-bottom-0 align-middle" id="modalProductVariant">@Model.VariantName</td>
			<td class="border-bottom-0 align-middle text-danger">@Translate("Discontinued")</td>
			<td class="border-bottom-0 align-middle text-end" id="modalProductPrice">
				@if (showPricesWithVat == "false" && !neverShowVat)
				{
					<span class="text-decoration-line-through opacity-75">
						<span class="text-price">@Model.PriceBeforeDiscount.PriceWithoutVatFormatted</span>
					</span>
				}
				else
				{
					<span class="text-decoration-line-through opacity-75">
						<span class="text-price">@Model.PriceBeforeDiscount.PriceFormatted</span>
					</span>
				}
			</td>
		</tr>
		<tr>
			<td class="fw-bold text-center" colspan="6">@Translate("Replacement Product")</td>
		</tr>
		<tr>
			<td class="border-bottom-0 align-middle">
				<img class="img-fluid productImage" src="/Admin/public/getimage.ashx?image=@Dynamicweb.Context.Current.Server.UrlEncode(replacementProduct.DefaultImage.Value)&width=60&height=60&format=webp&Crop=5&fillcanvas=true" height="60" width="60" alt="@replacementProduct.Name">
			</td>
			<td class="border-bottom-0 align-middle" id="modalReplacementProductNumber">@replacementProduct.Number</td>
			<td class="border-bottom-0 align-middle" id="modalReplacementProductName">@replacementProduct.Name</td>
			<td class="border-bottom-0 align-middle" id="modalReplacementProductVariant">@replacementProduct.VariantName</td>
			<td class="border-bottom-0 align-middle text-success" id="modalReplacementProductStock">@replacementProductStockState</td>
			<td class="border-bottom-0 align-middle text-end" id="modalReplacementProductPrice">
				@if (showPricesWithVat == "false" && !neverShowVat)
				{
					<span itemprop="price" content="@replacementProduct.Price.PriceWithoutVat" class="d-none"></span>
				}
				else
				{
					<span itemprop="price" content="@replacementProduct.Price.Price" class="d-none"></span>
				}
				<span class="text-price">@replacementProductPrice</span>
			</td>
		</tr>
		</tbody>
	</table>
	
	<div class="d-none">
		<article class="grid grid-10 grid-lg-12 gap-2 g-col-12 align-items-center align-items-lg-center product js-replacement-product">
			
			<div class="d-none d-lg-block g-col-12 border-top"></div>

			<input type="hidden" name="ProductLoopCounter@(productCounter)" value="@(productCounter)">
			<input type="hidden" class="productId" name="ProductId@(productCounter)" value="@replacementProduct.Id">
			<input type="hidden" class="productVariantId" name="VariantId@(productCounter)" value="@replacementProduct.VariantId">

			<div class="g-col-1">
				<a class="productLink" href="@replacementProductLink" tabindex="-1">
					<img class="img-fluid productImage" src="/Admin/public/getimage.ashx?image=@Dynamicweb.Context.Current.Server.UrlEncode(replacementProduct.DefaultImage.Value)&width=60&height=60&format=webp&Crop=5&fillcanvas=true" height="60" width="60" alt="@replacementProduct.Name">
				</a>
			</div>

			<div class="g-col-7 g-col-lg-9 grid grid-9 gap-0 gap-lg-2 lh-1">

				<div class="g-col-5 g-col-lg-1 order-1">
					<span class="fs-8 fs-lg-6"><a href="@replacementProductLink" tabindex="-1" class="text-decoration-none text-decoration-underline-hover productNumber">@replacementProduct.Number</a></span>
				</div>

				<div class="g-col-5 g-col-lg-4 order-3 lh-1">
					<span class="fs-8 fs-lg-6"><a href="@replacementProductLink" tabindex="-1" class="text-decoration-none text-decoration-underline-hover productName">@replacementProduct.Name</a></span>
					<span class="fs-8 fs-lg-6 fst-italic fw-bold d-block">
						<a href="@link" class="text-decoration-none text-decoration-underline-hover js-product-replacements-message">@Translate("Replacing") @Model.Name</a>
					</span>
				</div>

				<div class="g-col-2 g-col-lg-1 order-4">
					<span class="fs-8 fs-lg-6"><a href="@replacementProductLink" tabindex="-1" class="text-decoration-none text-decoration-underline-hover productVariantName">@replacementProduct.VariantName</a></span>
				</div>

				<div class="g-col-2 g-col-lg-1 order-4">
					@if (replacementProduct.Discontinued)
					{
						<div class="fs-8 fs-lg-6 text-end text-lg-start text-danger productStockState">@Translate("Discontinued")</div>
					}
					else if (!isStockType || replacementProduct.NeverOutOfstock)
					{
						<div class="fs-8 fs-lg-6 text-end text-lg-start text-success">@Translate("In stock")</div>
					} else if (isStockType && replacementProduct.StockLevel > 0)
					{
						<div class="fs-8 fs-lg-6 text-end text-lg-start text-success">@replacementProduct.StockLevel @Translate("In stock")</div>
					}
					else
					{
						<div class="fs-8 fs-lg-6 text-end text-lg-start text-danger">@Translate("Out of Stock")</div>
					}
				</div>

				<div class="g-col-4 g-col-lg-2 text-end order-2 order-lg-last">
					@if (!hidePrice)
					{
						<span class="text-price fs-8 fs-lg-6 productPrice">@replacementProduct.Price.PriceFormatted</span>
					}
				</div>
			</div>

			<div class="g-col-2 g-col-lg-2">
				<label for="Quantity" class="visually-hidden">@Translate("Quantity")</label>
			<input type="number" step="@stepQty" min="@minQty" max="@maxQty" class="form-control text-center ms-auto swift_quantity-field" value="@quantity" name="Quantity@(productCounter)" @disableQuantityField style="max-width: 85px;">
			</div>

		</article>
	</div>
}
