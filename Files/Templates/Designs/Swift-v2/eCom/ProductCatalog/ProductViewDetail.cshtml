@inherits ViewModelTemplate<ProductViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Core

@{
	string metaDescription = string.IsNullOrEmpty(Model.MetaDescription) ? Model.Name : Model.MetaDescription;

	Pageview.Meta.AddTag($"<meta property=\"og:image\" content=\"{Dynamicweb.Context.Current.Request.Url.Scheme}://{Dynamicweb.Context.Current.Request.Url.Host}{Model.DefaultImage.Value}\">");
	Pageview.Meta.AddTag($"<meta property=\"og:image:alt\" content=\"{Model.Name}\">");
	Pageview.Meta.AddTag($"<meta property=\"og:description\" content=\"{metaDescription}\">");

	Pageview.Meta.AddTag("twitter:image", Model.DefaultImage.Value);
	Pageview.Meta.AddTag("twitter:image:alt", Model.Name);
	Pageview.Meta.AddTag("twitter:description", metaDescription);
}

@{
	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		Dynamicweb.Context.Current.Items["ProductDetails"] = Model;
	}
	else
	{
		Dynamicweb.Context.Current.Items.Add("ProductDetails", Model);
	}

	bool isLazyLoadingForProductInfoEnabled = Dynamicweb.Core.Converter.ToBoolean(Dynamicweb.Context.Current.Items["IsLazyLoadingForProductInfoEnabled"]);
	if (isLazyLoadingForProductInfoEnabled)
	{
		string showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
		bool neverShowVat = string.IsNullOrEmpty(showPricesWithVat);
		bool hasVariantId = !string.IsNullOrEmpty(Model.VariantId);
		string variantIdParam = hasVariantId ? $"/{Model.VariantId}" : "";
		string priceFilledProperties = $"Price,PriceFormatted{(showPricesWithVat == "false" && !neverShowVat ? ",PriceWithVat,PriceWithVatFormatted" : "")}";
		string productInfoFeed = $@"/dwapi/ecommerce/products/{Model.Id}{variantIdParam}
	?UserId={Converter.ToString(Pageview.User?.ID)}
	&LanguageId={Pageview.Area.EcomLanguageId}&CurrencyCode={Pageview.Area.EcomCurrencyId}&CountryCode={Pageview.Area.EcomCountryCode}&ShopId={Pageview.Area.EcomShopId}
	&FilledProperties=Id,Price,PriceBeforeDiscount,StockLevel,VariantInfo,NeverOutOfstock,Prices
	&PriceSettings.ShowPricesWithVat={Pageview.Area.EcomPricesWithVat}
	&PriceSettings.FilledProperties={priceFilledProperties}
	&getproductinfo=true";
		Dynamicweb.Context.Current.Items["ProductInfoFeed"] = productInfoFeed;

		<script type="module">
			swift.LiveProductInfo.init();
		</script>
	}
}

<script>
	gtag("event", "view_item", {
		currency: "@Model.Price.CurrencyCode",
		value: @PriceViewModelExtensions.ToStringInvariant(Model.Price),
		items: [
		{
			item_id: "@Model.Number",
			item_name: "@Dynamicweb.Core.Encoders.HtmlEncoder.JavaScriptStringEncode(Model.Name)",
			currency: "@Model.Price.CurrencyCode",
			price: @PriceViewModelExtensions.ToStringInvariant(Model.Price)
		}
		]
	});
</script>

<script>
	window.addEventListener('load', function (event) {
		swift.Video.init();
	});
</script>
