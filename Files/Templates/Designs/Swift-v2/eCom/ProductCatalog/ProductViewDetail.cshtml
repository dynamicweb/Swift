@inherits ViewModelTemplate<ProductViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Core

@{
	string metaDescription = string.IsNullOrEmpty(Model.MetaDescription) ? Model.Name : Model.MetaDescription;

	Pageview.Meta.AddTag($"<meta property=\"og:image\" content=\"{Dynamicweb.Context.Current.Request.Url.Scheme}://{Dynamicweb.Context.Current.Request.Url.Host}{Model.DefaultImage.Value}\">");
	Pageview.Meta.AddTag($"<meta property=\"og:image:alt\" content=\"{Model.Name}\">");
	Pageview.Meta.AddTag($"<meta property=\"og:description\" content=\"{metaDescription}\">");

	Pageview.Meta.AddTag("twitter:image", Model.DefaultImage.Value);
	Pageview.Meta.AddTag("twitter:image:alt", Model.Name);
	Pageview.Meta.AddTag("twitter:description", metaDescription);

	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		Dynamicweb.Context.Current.Items["ProductDetails"] = Model;
	}
	else
	{
		Dynamicweb.Context.Current.Items.Add("ProductDetails", Model);
	}
}

<script>
	gtag("event", "view_item", {
		currency: "@Model.Price.CurrencyCode",
		value: @Model.Price.ToStringInvariant(),
		items: [
		{
			item_id: "@Model.Number",
			item_name: "@Dynamicweb.Core.Encoders.HtmlEncoder.JavaScriptStringEncode(Model.Name)",
			currency: "@Model.Price.CurrencyCode",
			price: @Model.Price.ToStringInvariant(),
			discount: @Model.Discount.ToStringInvariant()
		}
		]
	});
</script>

<script>
	window.addEventListener('load', function (event) {
		swift.Video.init();
	});
</script>
