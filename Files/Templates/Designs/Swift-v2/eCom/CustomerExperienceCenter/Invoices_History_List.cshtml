@inherits ViewModelTemplate<OrderListViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.Frontend
@using Dynamicweb.Ecommerce.ProductCatalog

@{
    string baseUrl = SearchEngineFriendlyURLs.GetFriendlyUrl($"default.aspx?ID={Pageview.Page.ID}");
    
    @*Mock Data*@
    var mockInvoices = new[]
    {
        new { Id = "INV-0998", Client = "Acme Corp", Amount = 1250.75, IssueDate = new DateTime(2025, 10, 5), DueDate = new DateTime(2025, 11, 5), Status = "Paid" },
        new { Id = "INV-0997", Client = "BlueSky Logistics", Amount = 980.00, IssueDate = new DateTime(2025, 10, 1), DueDate = new DateTime(2025, 11, 1), Status = "Paid" },
        new { Id = "INV-0996", Client = "Northwind Traders", Amount = 2200.50, IssueDate = new DateTime(2025, 9, 28), DueDate = new DateTime(2025, 10, 28), Status = "Paid" },
        new { Id = "INV-0995", Client = "BrightTech Solutions", Amount = 450.00, IssueDate = new DateTime(2025, 9, 15), DueDate = new DateTime(2025, 10, 15), Status = "Canceled" },
        new { Id = "INV-0994", Client = "GlobalFoods Ltd", Amount = 1500.25, IssueDate = new DateTime(2025, 8, 20), DueDate = new DateTime(2025, 9, 20), Status = "Paid" },
        new { Id = "INV-0993", Client = "TechStart Inc", Amount = 3200.00, IssueDate = new DateTime(2025, 8, 1), DueDate = new DateTime(2025, 9, 1), Status = "Paid" },
        new { Id = "INV-0992", Client = "Metro Services", Amount = 750.50, IssueDate = new DateTime(2025, 7, 15), DueDate = new DateTime(2025, 8, 15), Status = "Canceled" },
        new { Id = "INV-0991", Client = "Acme Corp", Amount = 2100.00, IssueDate = new DateTime(2025, 6, 28), DueDate = new DateTime(2025, 7, 28), Status = "Paid" },
    };
    
    @*Sorting Mock Data*@
    string sortBy = Dynamicweb.Context.Current?.Request.QueryString.Get("SortBy") ?? "IssueDate";
    string sortOrder = Dynamicweb.Context.Current?.Request.QueryString.Get("SortOrder") ?? "desc";

    var invoices = mockInvoices.AsEnumerable();

    invoices = (sortBy, sortOrder) switch
    {
        ("Id", "asc") => invoices.OrderBy(i => i.Id),
        ("Id", "desc") => invoices.OrderByDescending(i => i.Id),
        ("Amount", "asc") => invoices.OrderBy(i => i.Amount),
        ("Amount", "desc") => invoices.OrderByDescending(i => i.Amount),
        ("IssueDate", "asc") => invoices.OrderBy(i => i.IssueDate),
        ("IssueDate", "desc") => invoices.OrderByDescending(i => i.IssueDate),
        ("DueDate", "asc") => invoices.OrderBy(i => i.DueDate),
        ("DueDate", "desc") => invoices.OrderByDescending(i => i.DueDate),
        _ => invoices.OrderByDescending(i => i.IssueDate)
    };
    
    @*Filtering Mock Data*@
    string searchText = Dynamicweb.Context.Current?.Request.QueryString.Get("FilterText") ?? "";
    string issueDateRange = Dynamicweb.Context.Current?.Request.QueryString.Get("IssueDateRange") ?? "";
    string minAmountStr = Dynamicweb.Context.Current?.Request.QueryString.Get("MinAmount") ?? "";
    string maxAmountStr = Dynamicweb.Context.Current?.Request.QueryString.Get("MaxAmount") ?? "";

    double? minAmount = double.TryParse(minAmountStr, out var min) ? min : null;
    double? maxAmount = double.TryParse(maxAmountStr, out var max) ? max : null;

    DateTime? issueDateFromDate = null;
    if (issueDateRange == "LastMonth")
    {
        issueDateFromDate = DateTime.Now.AddMonths(-1);
    }
    else if (issueDateRange == "Last3Months")
    {
        issueDateFromDate = DateTime.Now.AddMonths(-3);
    }

    invoices = invoices
        .Where(i => string.IsNullOrEmpty(searchText) || 
                    i.Id.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    i.Client.Contains(searchText, StringComparison.OrdinalIgnoreCase))
        .Where(i => !issueDateFromDate.HasValue || i.IssueDate >= issueDateFromDate)
        .Where(i => !minAmount.HasValue || i.Amount >= minAmount)
        .Where(i => !maxAmount.HasValue || i.Amount <= maxAmount);
}

<header class="hstack justify-content-between gap-2 mb-4">
    <div>
        <h1 class="h4 mb-0">@(Pageview.Page.GetDisplayName())</h1>
    </div>
</header>

<nav class="hstack gap-2 mb-3">
    <form class="flex-fill"
          hx-get="@(baseUrl)"
          hx-trigger="keyup delay:.5s, change" 
          hx-target="[data-swift-invoices-filter]"
          hx-swap="outerHTML"
          hx-select="[data-swift-invoices-filter]"
          hx-include="[name='MinAmount'],[name='MaxAmount'],[name='IssueDateRange'],[name='SortBy'],[name='SortOrder'],[name='PageNum']"
          hx-replace-url="false"
    >
        <div class="input-group">
            <span class="input-group-text border-end-0 bg-body">
                <span class="htmx-indicator spinner-border spinner-border-sm" aria-hidden="true"></span>
                <span class="icon-2" data-swift-indicator-origin>@ReadFile("/Files/Images/Icons/magnifying-glass.svg")</span>
            </span>
            <input type="text" class="form-control border-start-0 border-end-0" name="FilterText" placeholder="@Translate("Search invoices or PO numbers")...">
            <button type="reset" class="input-group-text border-start-0 bg-body" hx-on:click="this.closest('form').dispatchEvent(new Event('change', { bubbles: true }))">
                <span class="icon-2">@ReadFile("/Files/Images/Icons/xmark.svg")</span>
                <span class="visually-hidden">@Translate("Clear search")</span>
            </button>
        </div>
    </form>

    <form class="dropdown hstack"
          hx-get="@(baseUrl)"
          hx-trigger="change"
          hx-swap="outerHTML"
          hx-target="[data-swift-invoices-filter]"
          hx-select="[data-swift-invoices-filter]"
          hx-include="[name='FilterText'],[name='IssueDateRange'],[name='MinAmount'],[name='MaxAmount'],[name='SortBy'],[name='SortOrder'],[name='PageNum']"
          hx-replace-url="false">

        <button class="btn btn-sm btn-outline-secondary hstack gap-2 ms-auto py-2 px-3 text-body" data-dw-button="outline-secondary" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            <span class="htmx-indicator spinner-border spinner-border-sm" aria-hidden="true"></span>
            <span class="icon-2" data-swift-indicator-origin>
                @ReadFile("/Files/Images/Icons/filter.svg")
            </span>
            @Translate("Filter")
        </button>

        <div class="dropdown-menu p-3 fs-7 shadow" style="--bs-dropdown-min-width:18rem;">
            <div class="fw-bold mb-1">@Translate("Issue Date Range")</div>
            <div class="d-flex flex-wrap gap-2 mb-3" hx-swap-oob="true outerHTML:[data-swift-invoice-date-filter]" data-swift-invoice-date-filter>
                <input class="visually-hidden" type="radio" name="IssueDateRange" id="date_all" value="" checked="@(string.IsNullOrEmpty(issueDateRange))">
                <label for="date_all" class="fs-8 py-1 px-2 btn @(string.IsNullOrEmpty(issueDateRange) ? "btn-primary" : "btn-outline-secondary text-body") lh-1" role="button" data-dw-button>@Translate("All Time")</label>

                <input class="visually-hidden" type="radio" name="IssueDateRange" id="date_last_month" value="LastMonth" checked="@(issueDateRange == "LastMonth")">
                <label for="date_last_month" class="fs-8 py-1 px-2 btn @(issueDateRange == "LastMonth" ? "btn-primary" : "btn-outline-secondary text-body") lh-1" role="button" data-dw-button>@Translate("Last Month")</label>

                <input class="visually-hidden" type="radio" name="IssueDateRange" id="date_last_3_months" value="Last3Months" checked="@(issueDateRange == "Last3Months")">
                <label for="date_last_3_months" class="fs-8 py-1 px-2 btn @(issueDateRange == "Last3Months" ? "btn-primary" : "btn-outline-secondary text-body") lh-1" role="button" data-dw-button>@Translate("Last 3 Months")</label>
            </div>

            <div class="fw-bold mb-1">@Translate("Amount Range")</div>
            <div class="d-flex gap-2 mb-3">
                <input type="number" name="MinAmount" class="form-control" placeholder="@Translate("Min")" value="@minAmountStr">
                <input type="number" name="MaxAmount" class="form-control" placeholder="@Translate("Max")" value="@maxAmountStr">
            </div>

            <button type="reset"
                    class="btn btn-outline-secondary text-body w-100 fs-7"
                    data-dw-button="outline-secondary"
                    hx-on:click="
                        const form = this.closest('form');
                        form.reset();
                        setTimeout(() => form.dispatchEvent(new Event('change', { bubbles: true })), 10);
                    ">
                @Translate("Clear All")
            </button>
        </div>
    </form>
        
</nav>

<div class="card overflow-hidden">
    <div class="table-responsive" style="margin-bottom:-1px;"
         x-data="{
            sortBy: '@(Dynamicweb.Context.Current?.Request.QueryString.Get("SortBy") ?? "IssueDate")',
            sortOrder: '@(Dynamicweb.Context.Current?.Request.QueryString.Get("SortOrder") ?? "desc")',
            sort(val) {
                if(this.sortBy === val) {
                    this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';
                } else {
                    this.sortBy = val;
                }
                this.$refs.sortForm.SortBy.value = this.sortBy;
                this.$refs.sortForm.SortOrder.value = this.sortOrder;
                this.$refs.sortForm.dispatchEvent(new Event('change', { bubbles: true }));
            }
        }">
        
        <div data-swift-invoices-filter>
            <table class="table table-md table-hover mb-0 align-middle fs-7" style="--bs-table-color: var(--bs-body-color);">
                <thead style="--bs-table-bg: rgba(var(--bs-body-color-rgb), .0275); --bs-table-color: rgba(var(--bs-body-color-rgb), 0.5);">
                <tr>
                    <th>
                        <form x-ref="sortForm"
                              hx-get="@(baseUrl)"
                              hx-trigger="change"
                              hx-target="[data-swift-invoices-filter]"
                              hx-swap="outerHTML"
                              hx-select="[data-swift-invoices-filter]"
                              hx-include="[name='FilterText'],[name='MinAmount'],[name='MaxAmount'],[name='IssueDateRange'],[name='PageNum']">
                            <input type="hidden" name="SortBy" x-bind:value="sortBy"/>
                            <input type="hidden" name="SortOrder" x-bind:value="sortOrder"/>
                        </form>
                        <span role="button" class="hstack gap-1 text-nowrap" x-on:click="sort('Id')">
                            @Translate("Invoice ID")
                            <span x-show="sortBy === 'Id'">
                                <span x-text="sortOrder === 'asc' ? '↑' : '↓'"></span>
                            </span>
                        </span>
                    </th>
                    <th>
                        <span role="button" class="hstack gap-1" x-on:click="sort('IssueDate')">
                            @Translate("Issue Date")
                            <span x-show="sortBy === 'IssueDate'">
                                <span x-text="sortOrder === 'asc' ? '↑' : '↓'"></span>
                            </span>
                        </span>
                    </th>
                    <th>
                        <span role="button" class="hstack gap-1" x-on:click="sort('DueDate')">
                            @Translate("Due Date")
                            <span x-show="sortBy === 'DueDate'">
                                <span x-text="sortOrder === 'asc' ? '↑' : '↓'"></span>
                            </span>
                        </span>
                    </th>
                    <th>
                        <span role="button" class="hstack gap-1" x-on:click="sort('Amount')">
                            @Translate("Amount")
                            <span x-show="sortBy === 'Amount'">
                                <span x-text="sortOrder === 'asc' ? '↑' : '↓'"></span>
                            </span>
                        </span>
                    </th>
                    <th>@Translate("Actions")</th>
                </tr>
                </thead>
                <tbody>
                <tr class="position-relative htmx-indicator" style="--bs-table-bg: rgba(var(--bs-body-color-rgb), .02);">
                    <td colspan="5">
                        <div class="d-grid py-4">
                            <span class="m-auto align-items-center text-body text-opacity-25">
                                <div class="spinner spinner-border"></div>
                            </span>
                        </div>
                    </td>
                </tr>
                @{
                    foreach (var invoice in invoices)
                    {
                        <tr class="position-relative">
                            <td>
                                <div class="vstack position-relative">
                                    <a href="@(baseUrl)?OrderId=@(invoice.Id)" class="hstack gap-2 text-decoration-none text-decoration-underline-hover position-relative z-2">
                                        @(invoice.Id)
                                    </a>
                                </div>
                            </td>
                            <td>
                                <div>@(invoice.IssueDate.ToShortDateString())</div>
                            </td>
                            <td>
                                <div>@(invoice.DueDate.ToShortDateString())</div>
                            </td>
                            <td>
                                <div>@(Dynamicweb.Ecommerce.Services.Currencies.Format(Dynamicweb.Ecommerce.Common.Context.Currency, invoice.Amount))</div>
                            </td>
                            <td>
                                <div class="hstack gap-3">
                                    <button class="btn btn-outline-secondary text-body hstack border-0 p-2 position-relative z-2" data-dw-button="outline-secondary" type="button" data-bs-toggle="dropdown" aria-expanded="false" data-bs-popper-config='{"strategy":"fixed", "placement":"bottom-end"}'>
                                        <span class="icon-2">
                                            @ReadFile("/Files/Images/Icons/ellipsis.svg")
                                        </span>
                                    </button>
                                    <ul class="dropdown-menu shadow-sm fs-7 p-1">
                                        <li>
                                            <a class="dropdown-item hstack gap-2 ps-2 pe-3 rounded-1" href="@(baseUrl)?OrderId=@(invoice.Id)">
                                                <span class="icon-2">
                                                    @ReadFile("/Files/Images/Icons/eye.svg")
                                                </span>
                                                @Translate("View")
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                }

                </tbody>
            </table>
        </div>
    </div>
</div>


<div hx-swap-oob="true outerHTML:[data-swift-cart-list-pagination]" data-swift-cart-list-pagination>
    @if (Model.PageCount > 1)
    {
        <form class="mt-3">
            <ul class="pagination m-0">
                @for (int i = 1; i <= Model.PageCount; i++)
                {
                    var active = (i == Model.CurrentPage) ? "active" : string.Empty;
                    <li class="page-item @active">
                        <button type="submit"
                                class="page-link"
                                name="PageNum"
                                value="@i"
                                aria-label="@Translate("Go to page") @i"
                                @(active == "active" ? "aria-current=\"page\"" : "")>
                            @i
                        </button>
                    </li>
                }
            </ul>
        </form>
    }
</div>