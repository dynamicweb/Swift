@inherits ViewModelTemplate<OrderListViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.Frontend
@using Dynamicweb.Ecommerce.ProductCatalog

<header class="hstack gap-3 mb-4">
    <h1 class="h4 mb-0">@(Pageview.Page.GetDisplayName())</h1>
    
    <a href="@($"/Default.aspx?ID={Pageview.Page.ID}")" class="btn btn-primary hstack gap-3 ms-auto p-3" data-dw-button="primary">
        <span class="icon-2">
            @ReadFile("/Files/Images/Icons/plus.svg")
        </span>
        @Translate("New order")
    </a>
</header>

<nav class="hstack gap-2 mb-3">
    <form class="flex-fill">
        <div class="input-group">
            <span class="input-group-text border-end-0 bg-body">
                <span class="icon-2">@ReadFile("/Files/Images/Icons/magnifying-glass.svg")</span>
            </span>
            <input type="text" class="form-control border-start-0" id="floatingInputGroup1" placeholder="Search orders...">
        </div>
    </form>
    <button class="btn btn-outline-secondary hstack gap-2 ms-auto py-2 px-3 btn-sm" data-dw-button="outline-secondary">
        <span class="icon-2">
            @ReadFile("/Files/Images/Icons/filter.svg")
        </span>
        @Translate("Filter")
    </button>
</nav>

<div class="card overflow-hidden">
    <div class="table-responsive" style="margin-bottom:-1px;">
        <table class="table mb-0 align-middle fs-7" style="--bs-table-color: var(--bs-body-color);">
            <thead style="--bs-table-bg: rgba(var(--bs-body-color-rgb), .0275); --bs-table-color: rgba(var(--bs-body-color-rgb), 0.5);">
                <tr>
                    <th>
                        <input class="form-check-input" type="checkbox">
                    </th>
                    <th>Order number</th>
                    <th>Customer</th>
                    <th>Placed</th>
                    <th>Items</th>
                    <th>Total</th>
                    <th>Currency</th>
                    <th>Status</th>
                    <th>&nbsp;</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
            <tbody>
                @{
                    foreach ( var order in Model.Orders )
                    {                        
                        <tr class="position-relative">
                            <td>
                                <input class="form-check-input position-relative z-2" type="checkbox">
                            </td>
                            <td>
                                <a class="border-0 btn btn-outline-secondary btn-sm py-2 px-3 position-relative z-2" data-dw-button="outline-secondary" href="@(Pageview.SearchFriendlyUrl)?OrderId=@(order.Id)" hx-boost="true">@(order.Id)</a>
                            </td>
                            <td>@(order.CustomerName)</td>
                            <td>
                                <div class="vstack">
                                    @(order.CreatedAt.ToShortDateString())
                                    <span class="fs-8 text-body text-opacity-50">@(order.CreatedAt.ToShortTimeString())</span>
                                </div>
                            </td>
                            <td>@(order.OrderLines.Count())</td>
                            <td>
                                <div class="text-price">@(order.Price.PriceFormatted)</div>
                            </td>
                            <td>
                                @(order.Price.CurrencyCode)
                            </td>
                            <td>
                                <span class="badge lh-sm" style="background-color:@(Dynamicweb.Ecommerce.Services.OrderStates.GetStateById(order.StateId).Color);">
                                    @(order.StateName)
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-outline-secondary hstack border-0 p-2 position-relative z-2" data-dw-button="outline-secondary">
                                    <span class="icon-2">
                                        @ReadFile("/Files/Images/Icons/ellipsis.svg")
                                    </span>
                                </button>
                            </td>
                            <td>
                                <button type="button" class="btn btn-outline-secondary hstack border-0 p-2 stretched-link" data-dw-button="outline-secondary" data-bs-toggle="collapse"  data-bs-target="#order_@(order.Id)" aria-expanded="false" aria-controls="order_@(order.Id)">
                                    <span class="icon-2">
                                        @ReadFile("/Files/Images/Icons/chevron-down.svg")
                                    </span>
                                </button>
                            </td>
                        </tr>
                        <tr class="collapse" id="order_@(order.Id)">
                            <td colspan="10" class="text-body text-opacity-75 fs-8" style="background-color:rgba(var(--bs-body-color-rgb), .02);">
                                <div class="grid grid-3 gap-3">
                                    @* Customer *@
                                    <div class="vstack">
                                        <div class="mb-0">@Translate("Customer information")</div>
                                        <div>@(order.CustomerName)</div>
                                        <div>@(order.CustomerEmail)</div>
                                        <div>@(order.CustomerPhone)</div>
                                    </div>
                                    @* Shipping *@
                                    <div class="vstack">
                                        <div class="mb-0">@Translate("Shipping")</div>
                                        <div>@(order.DeliveryAddress)</div>
                                        <div>@(order.DeliveryAddress2)</div>
                                        <div>@(order.DeliveryCity) @(order.DeliveryZip)</div>
                                    </div>
                                    @* Summary *@
                                    <div class="vstack">
                                        <div class="mb-0">@Translate("Order summary")</div>
                                        <div class="hstack">
                                            <div>@Translate("Subtotal"):</div>
                                            <div class="text-price ms-auto">@(order.TotalPriceBeforeFeesAndTaxes.PriceFormatted)</div>
                                        </div>
                                        <div class="hstack">
                                            <div>@Translate("Shipping"):</div>
                                            <div class="text-price ms-auto">@(order.ShippingFee.PriceFormatted)</div>
                                        </div>
                                        <div class="hstack">
                                            <div>@Translate("Payment"):</div>
                                            <div class="text-price ms-auto">@(order.PaymentFee.PriceFormatted)</div>
                                        </div>
                                        <div class="hstack">
                                            <div>@Translate("Taxes"):</div>
                                            <div class="text-price ms-auto">@(order.TotalTaxes.PriceFormatted)</div>
                                        </div>
                                        <div class="hstack">
                                            <div>@Translate("Total"):</div>
                                            <div class="text-price ms-auto">@(order.Price.PriceFormatted)</div>
                                        </div>
                                    </div>
                                    @* Orderlines *@
                                    <div style="grid-column:1/-1;">
                                        <div class="mb-2">@Translate("Items") (@(order.OrderLines.Count()))</div>
                                        <div class="list-group gap-2" style="--bs-list-group-border-width: 0;--bs-list-group-item-padding-x:.5rem;">
                                            @foreach( var orderline in order.OrderLines.Take(7) )
                                            {
                                                <div class="list-group-item hstack gap-3">
                                                    <div>
                                                        @if(orderline.GetProduct().DefaultImage.TryGetImageFileViewModel(out var image))
                                                        {
                                                            <img class="img-thumbnail" src="@(image.ToGetImage(new(){Width = 30, Ratio = "1/1"}))" alt="@orderline.ProductName)">
                                                        }
                                                    </div>
                                                    <div class="vstack align-self-auto">
                                                        <div>@(orderline.ProductName)</div>
                                                        <div class="text-body text-opacity-75">@(orderline.ProductId)</div>
                                                    </div>
                                                    <div class="vstack align-self-auto text-end">
                                                        <div>@(orderline.Price.PriceFormatted)</div>
                                                        <div class="text-body text-opacity-75">@Translate("Qty"): @(orderline.Quantity)</div>
                                                    </div>
                                                </div>
                                            }
                                            @if( order.OrderLines.Count() > 7 )
                                            {
                                                <div class="list-group-item hstack">
                                                    <a class="mx-auto" href="@(Pageview.SearchFriendlyUrl)?OrderId=@(order.Id)" hx-boost="true">@Translate("View all orderlines") (@(order.OrderLines.Count()))</a>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }

            </tbody>

        </table>

    </div>
</div>

@if (Model.PageCount > 1)
{
    <form class="mt-3">
        <ul class="pagination m-0">
            @for (int i = 1; i <= Model.PageCount; i++)
            {
                var active = (i == Model.CurrentPage) ? "active" : string.Empty;
                <li class="page-item @active">
                    <button type="submit" class="page-link" name="PageNum" value="@i">@i</button>
                </li>
            }
        </ul>
    </form>
}

@* <div
    hx-get="@(Pageview.SearchFriendlyUrl)?LayoutTemplate=Swift-v2_PageClean.cshtml&ParagraphId=@(Pageview.CurrentParagraph.ID)"
    hx-trigger="show-order-in-offcanvas from:body"
    hx-target="#DynamicOffcanvas"
    hx-vals="js:{orderId:event.detail.orderId}"
>
</div> *@