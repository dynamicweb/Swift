@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using System
@using Dynamicweb
@using Dynamicweb.Environment
@using Dynamicweb.Frontend

@functions {
    string GetCookieOptInPermission(string category)
    {
        bool categoryOrAllGranted = false;

        if (CookieManager.IsCookieManagementActive)
        {
            var cookieOptInLevel = CookieManager.GetCookieOptInLevel();
            var cookieOptInCategories = CookieManager.GetCookieOptInCategories();
            categoryOrAllGranted = cookieOptInCategories.Contains(category) || cookieOptInLevel == CookieOptInLevel.All;
        }

        return categoryOrAllGranted ? "granted" : "denied";
    }

    bool AllowTracking()
    {
        bool allowTracking = true;
        if (CookieManager.IsCookieManagementActive)
        {
            var cookieOptInLevel = CookieManager.GetCookieOptInLevel();
            var cookieOptInCategories = CookieManager.GetCookieOptInCategories();

            bool consentEither = (cookieOptInCategories.Contains("Statistical") || cookieOptInCategories.Contains("Marketing"));
            bool consentFunctional = cookieOptInLevel == CookieOptInLevel.Functional;
            bool consentAtLeastOne = cookieOptInLevel == CookieOptInLevel.All || (consentFunctional && consentEither);

            allowTracking = consentAtLeastOne;
        }
        return allowTracking;
    }
}

@{
    // Swift version
    string swiftVersion = ReadFile("/Files/Templates/Designs/Swift-v2/swift_version.txt");


    // Offcanvas
	var cartSummaryPageId = Dynamicweb.Content.Services.Pages.GetPageByNavigationTag(Model.Area.ID, "CartSummary")?.ID;
	var enableMiniCart = Model.Area.Item?.GetBoolean("EnableOffcanvasMiniCart") ?? false;
	var offcanvasMiniCartBehaviour = Model.Area.Item?.GetRawValueString("OffcanvasMinicartBehaviour", "3") ?? "3";
	bool miniCartEnabled = cartSummaryPageId > 0 && enableMiniCart;


    // Schema.org details for PDP
    var isProductDetailsPage = Dynamicweb.Context.Current.Request.QueryString.AllKeys.Contains("ProductID");
    bool isArticlePage = Model.Item.SystemName == "Swift-v2_Article";
    string schemaOrgType = string.Empty;

    if (isProductDetailsPage)
    {
        schemaOrgType = "itemscope=\"\" itemtype=\"https://schema.org/Product\"";
    }

    if (isArticlePage)
    {
        schemaOrgType = "itemscope=\"\" itemtype=\"https://schema.org/Article\"";
    }

    string favicon = Model.Area.Item.GetRawValueString("Favicon", "/Files/Templates/Designs/Swift-v2/Assets/Images/favicon.png");
    string appleTouchIcon = Model.Area.Item.GetRawValueString("AppleTouchIcon", "/Files/Templates/Designs/Swift-v2/Assets/Images/apple-touch-icon.png");

    string headerCssClass = "sticky-top";
    bool movePageBehind = false;

    if (Model.PropertyItem != null)
    {
        headerCssClass = Model.PropertyItem.GetRawValueString("MoveThisPageBehindTheHeader", "sticky-top");
        movePageBehind = headerCssClass == "fixed-top" && !Pageview.IsVisualEditorMode ? true : false;
    }

    headerCssClass = headerCssClass == "" ? "sticky-top" : headerCssClass;
    headerCssClass = Pageview.IsVisualEditorMode ? "" : headerCssClass;

    string googleTagManagerID = Model.Area.Item.GetString("GoogleTagManagerID").Trim();
    bool allowTracking = AllowTracking();

    var cssStyleFileInfo = new System.IO.FileInfo(Dynamicweb.Core.SystemInformation.MapPath("/Files/Templates/Designs/Swift-v2/Assets/css/swift.css"));
    var jsFileInfo = new System.IO.FileInfo(Dynamicweb.Core.SystemInformation.MapPath("/Files/Templates/Designs/Swift-v2/Assets/js/swift.js"));
    
    Dynamicweb.Context.Current.Response.AddHeader("link", $"</Files/Templates/Designs/Swift-v2/Assets/css/swift.css?{cssStyleFileInfo.LastWriteTime.Ticks}>; rel=preload; as=style;");
    Dynamicweb.Context.Current.Response.AddHeader("link", $"</Files/Templates/Designs/Swift-v2/Assets/lib/bootstrap/dist/js/bootstrap.bundle.min.js>; rel=preload; as=script;");
    Dynamicweb.Context.Current.Response.AddHeader("link", $"</Files/Templates/Designs/Swift-v2/Assets/lib/htmx.org/dist/htmx.min.js>; rel=preload; as=script;");
    Dynamicweb.Context.Current.Response.AddHeader("link", $"</Files/Templates/Designs/Swift-v2/Assets/js/swift.js?{jsFileInfo.LastWriteTime.Ticks}>; rel=preload; as=script;");
    
    @* SetMetaTags(); *@
}

<!doctype html>
<html lang="@Pageview.Area.CultureInfo.TwoLetterISOLanguageName">
    <head>
        <!-- @swiftVersion -->
        
        @* Required meta tags *@
        <meta charset="utf-8">
        <meta name="viewport" content="height=device-height, width=device-width, initial-scale=1.0">
        <link rel="shortcut icon" href="@favicon">
        <link rel="apple-touch-icon" href="@appleTouchIcon">

        @Model.MetaTags
        
        @* Pageview Meta *@
        <title>@Model.Title</title>
       
        @* Swift stylesheet *@
        <link href="/Files/Templates/Designs/Swift-v2/Assets/css/swift.css?@cssStyleFileInfo.LastWriteTime.Ticks" rel="stylesheet" media="all" type="text/css">

        @* Media Query Limit *@
        @if(Model.Area.Item.TryGetString("MediaQueryLimit", out string mediaQueryLimit)) {
            <style>
                @@media screen and (min-width: @(mediaQueryLimit)px) {
                    [swift-container] {
                        --dw-container-limit: @(mediaQueryLimit)px;
                    }

                    [swift-container],
                    [data-dw-container-width="3"] {
                        --dw-container-width: calc(var(--dw-container-limit) * .8);
                    }

                    [data-dw-container-width="1"] {
                        --dw-container-width: var(--swift-text-width);
                    }
                    
                    [data-dw-container-width="2"] {
                        --dw-container-width: calc(var(--dw-container-limit) * .65);
                    }
                }
            </style>
        }

        @* Color schemes stylesheet *@
        @if (Model.GetColorSchemeStyle() != null) {
            <link href="@Model.GetColorSchemeStyle()" rel="stylesheet" media="all" type="text/css">
        }
        @* Button stylesheet *@
        @if (Model.GetButtonStyle() != null) {
            <link href="@Model.GetButtonStyle()" rel="stylesheet" media="all" type="text/css">
        }
        @* Typography stylesheet *@
        @if (Model.GetTypographyStyle() != null) {
            <link href="@Model.GetTypographyStyle()" rel="stylesheet" media="all" type="text/css">
        }
        
        <script src="/Files/Templates/Designs/Swift-v2/Assets/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
        <script src="/Files/Templates/Designs/Swift-v2/Assets/lib/htmx.org/dist/htmx.min.js"></script>
        <script src="/Files/Templates/Designs/Swift-v2/Assets/js/swift.js?@jsFileInfo.LastWriteTime.Ticks"></script>

        @* Google gtag method - always include even if it is not used for anything *@
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag() { dataLayer.push(arguments); }
        </script>
        @* Google tag manager *@
        @if (!string.IsNullOrWhiteSpace(googleTagManagerID))
        {
            <script>
                gtag('consent', 'default', {
                    'ad_storage': 'denied',
                    'ad_user_data': 'denied',
                    'ad_personalization': 'denied',
                    'analytics_storage': 'denied'
                });
            </script>
            <script>
                (function (w, d, s, l, i) {
                    w[l] = w[l] || []; w[l].push({
                        'gtm.start':
                            new Date().getTime(), event: 'gtm.js'
                    }); var f = d.getElementsByTagName(s)[0],
                        j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
                            'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
                })(window, document, 'script', 'dataLayer', '@(googleTagManagerID)');
            </script>
            if (allowTracking)
            {
                string adConsent = GetCookieOptInPermission("Marketing");
                string analyticsConsent = GetCookieOptInPermission("Statistical");
                <script>
                    gtag('consent', 'update', {
                        'ad_storage': '@adConsent',
                        'ad_user_data': '@adConsent',
                        'ad_personalization': '@adConsent',
                        'analytics_storage': '@analyticsConsent'
                    });
                </script>
            }
        }

        @if (Model.Area.Item.TryGetFile("CustomHeaderInclude", out FileViewModel customHeaderInclude))
        {
            @RenderPartial($"Components/Custom/{customHeaderInclude.Name}")
        }

        <!-- Pageview CSS and JS -->
        @Model.GetCss()
        @Model.GetJs()

    </head>
    <body id="page@(Model.ID)" data-dw-colorscheme="@Model.Area.ColorScheme?.Id">
    
        @{
            bool renderAsResponsive = Model.Area.Item.GetString("DeviceRendering", "responsive").Equals("responsive", StringComparison.OrdinalIgnoreCase);
            bool renderMobile = Pageview.Device == Dynamicweb.Frontend.Devices.DeviceType.Mobile || Pageview.Device == Dynamicweb.Frontend.Devices.DeviceType.Tablet;
            
            string responsiveClassDesktop = string.Empty;
            string responsiveClassMobile = string.Empty;
            
            if (renderAsResponsive)
            {
                responsiveClassDesktop = " d-none d-xl-block";
                responsiveClassMobile = " d-block d-xl-none";
            }
        }


        @* Google tag manager *@
        @if (!string.IsNullOrWhiteSpace(googleTagManagerID) && allowTracking)
        {
            <noscript>
                <iframe src="https://www.googletagmanager.com/ns.html?id=@(googleTagManagerID)" height="0" width="0" style="display:none;visibility:hidden"></iframe>
            </noscript>
        }

        @if (Model.Area.Item.TryGetLink("HeaderDesktop", out LinkViewModel headerDesktop))
        {
            if (renderAsResponsive || !renderMobile)
            {
                <header class="page-header @headerCssClass top-0@(responsiveClassDesktop)" id="page-header-desktop">
                    @RenderGrid(Dynamicweb.Content.Services.Pages.GetPageOrLanguage(headerDesktop.PageId, Model.Area.ID).ID)
                </header>
            }
        }

        @if (Model.Area.Item.TryGetLink("HeaderMobile", out LinkViewModel headerMobile))
        {
            if ((renderAsResponsive || renderMobile))
            {
                <header class="page-header @headerCssClass top-0@(responsiveClassMobile)" id="page-header-mobile">
                    @RenderGrid(Dynamicweb.Content.Services.Pages.GetPageOrLanguage(headerMobile.PageId, Model.Area.ID).ID)
                </header>
            }
        }

        <main id="content" @(schemaOrgType)>
            @ContentPlaceholder()
        </main>

        @if (Model.Area.Item.TryGetLink("FooterDesktop", out LinkViewModel footerDesktop))
        {
            if (renderAsResponsive || !renderMobile)
            {
                <footer class="page-footer @(responsiveClassDesktop)" id="page-footer-desktop">
                    @RenderGrid(footerDesktop.PageId)
                </footer>
            }
        }

        @if (Model.Area.Item.TryGetLink("FooterMobile", out LinkViewModel footerMobile))
        {
            if (renderAsResponsive || renderMobile)
            {
                <footer class="page-footer @(responsiveClassMobile)" id="page-footer-mobile">
                    @RenderGrid(footerMobile.PageId)
                </footer>
            }
        }

        @* Language selector modal *@
        <div class="modal fade" id="PreferencesModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-sm" id="PreferencesModalContent">
                @* The content here comes from an external request *@
            </div>
        </div>

        @* Favorite toast *@
        <div aria-live="polite" aria-atomic="true">
            <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
                <div id="favoriteNotificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <strong class="me-auto">@Translate("Favorite list updated")</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body d-flex gap-3">
                        <div id="favoriteNotificationToast_Image"></div>
                        <div id="favoriteNotificationToast_Text"></div>
                    </div>
                </div>
            </div>
        </div>

        @* Modal for dynamic content *@
        <div class="modal fade js-product" id="DynamicModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-md">
                <div class="modal-content" id="DynamicModalContent">
                    @* The content here comes from an external request *@
                </div>
            </div>
        </div>

        @* Offcanvas for dynamic content *@
		<div class="offcanvas offcanvas-end" tabindex="-1" id="DynamicOffcanvas">
            @* The content here comes from an external request *@
        </div>

		@if (miniCartEnabled)
		{
			@* Open MiniCart when the cart is updated *@
			<script type="module">

				document.addEventListener('updated.swift.cart', (event) => {
					let orderContext = event?.detail?.formData?.get("OrderContext");
					updateCartSummary(orderContext);

					let offcanvasMiniCartBehaviourJs = "@offcanvasMiniCartBehaviour";
                    
                    if (event?.detail?.formData?.get("MiniCartBehaviour")) {
						offcanvasMiniCartBehaviourJs = event?.detail?.formData?.get("MiniCartBehaviour");
                    }
 
					if (offcanvasMiniCartBehaviourJs == "2" || offcanvasMiniCartBehaviourJs == "3") {
                        openMiniCartOffcanvas();
                    }
				});
			</script>

			if (offcanvasMiniCartBehaviour == "1" || offcanvasMiniCartBehaviour == "3")
			{
				@* Open MiniCart when toggle is clicked *@
				<script type="module">
					let miniCartToggles = document.querySelectorAll('.mini-cart-quantity');
					miniCartToggles?.forEach((toggle) => {
						toggle.parentElement.addEventListener('click', (event) => {
							event.preventDefault();
							let orderContext = toggle.dataset?.orderContext;
							updateCartSummary(orderContext);

							openMiniCartOffcanvas();
						});
					});
				</script>
			}

			<script>

				const updateCartSummary = (orderContext) => {
					const dynamicOffcanvas = document.getElementById('DynamicOffcanvas');
					swift.PageUpdater.UpdateFromUrlInline(event, '/Default.aspx?ID=@(cartSummaryPageId)&CartType=minicart&RequestPageID=@(Pageview.Page.ID)&OrderContext=' + orderContext +'', 'Swift-v2_CartSummary.cshtml', dynamicOffcanvas);
				};

				const openMiniCartOffcanvas = () => {
					const dynamicOffcanvas = document.getElementById('DynamicOffcanvas');
					const miniCartOffcanvas = bootstrap.Offcanvas.getOrCreateInstance(dynamicOffcanvas);
					dynamicOffcanvas.classList.add('overflow-y-auto');

					if (!miniCartOffcanvas._isShown) {
						miniCartOffcanvas.show();
						hideActiveOffcanvases(miniCartOffcanvas);
					}
				};

				const hideActiveOffcanvases = (miniCartOffcanvas) => {
					let activeOffcanvases = document.querySelectorAll('.offcanvas.show');
					activeOffcanvases?.forEach((offCanvas) => {
						offCanvas = bootstrap.Offcanvas.getInstance(offCanvas);
						if (offCanvas !== miniCartOffcanvas) {
							offCanvas.hide();
						}
					});
				};

			</script>
		}

	</body>

</html>