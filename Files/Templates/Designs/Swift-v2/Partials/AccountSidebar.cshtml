@inherits Dynamicweb.Rendering.ViewModelTemplate<PageViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.Products

<div aria-label="@Translate("Account sidebar")" class="pe-0 pe-lg-4 offcanvas-lg offcanvas-start" tabindex="-1" id="offcanvas_@(Model.ID)" aria-labelledby="offcanvas_@(Model.ID)_Label">
    <div class="d-lg-block py-3 px-4 p-lg-0 offcanvas-header">
        <div class="hstack gap-3">
            <div class="h5 hstack justify-content-center text-danger bg-danger-subtle lh-1 rounded-circle m-0" style="height: 3rem; aspect-ratio: 1;">@(Model.CurrentUser?.Name?.First())</div>
            <div>
                <h5 class="h6 mb-0">@(Model.CurrentUser?.Name)</h5>
                <div class="flex-nowrap text-nowrap min-w-0 mt-1 nav">
                    <a role="button" class="hstack text-body p-0 nav-link" tabindex="0" href="#">
                        <svg class="text-warning flex-shrink-0 me-2" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"><path d="M1.333 9.667H7.5V16h-5c-.64 0-1.167-.527-1.167-1.167V9.667zm13.334 0v5.167c0 .64-.527 1.167-1.167 1.167h-5V9.667h6.167zM0 5.833V7.5c0 .64.527 1.167 1.167 1.167h.167H7.5v-1-3H1.167C.527 4.667 0 5.193 0 5.833zm14.833-1.166H8.5v3 1h6.167.167C15.473 8.667 16 8.14 16 7.5V5.833c0-.64-.527-1.167-1.167-1.167z"></path><path d="M8 5.363a.5.5 0 0 1-.495-.573C7.752 3.123 9.054-.03 12.219-.03c1.807.001 2.447.977 2.447 1.813 0 1.486-2.069 3.58-6.667 3.58zM12.219.971c-2.388 0-3.295 2.27-3.595 3.377 1.884-.088 3.072-.565 3.756-.971.949-.563 1.287-1.193 1.287-1.595 0-.599-.747-.811-1.447-.811z"></path><path d="M8.001 5.363c-4.598 0-6.667-2.094-6.667-3.58 0-.836.641-1.812 2.448-1.812 3.165 0 4.467 3.153 4.713 4.819a.5.5 0 0 1-.495.573zM3.782.971c-.7 0-1.448.213-1.448.812 0 .851 1.489 2.403 5.042 2.566C7.076 3.241 6.169.971 3.782.971z"></path></svg>
                        <span class="fs-7 text-body text-opacity-75">4075 point available</span>
                    </a>
                </div>
            </div>
        </div>
        <button type="button" class="btn-close d-lg-none" data-bs-dismiss="offcanvas" data-bs-target="#offcanvas_@(Model.ID)" aria-label="Close"></button>
    </div>

    <div class="d-block pt-2 pt-lg-4 pb-lg-0 offcanvas-body">
        @{
            var navigationSettings = new NavigationSettings();
            navigationSettings.ExpandMode = ExpandMode.All;
            navigationSettings.IncludeFoldersAndHidden = true;
            navigationSettings.StartLevel = 2;
            navigationSettings.StopLevel = 5;
            var sidebarNav = Navigation.GetNavigationViewModel(navigationSettings);

            <nav class="list-group gap-1 fs-7" style="--bs-border-width: 0; --bs-list-group-action-hover-bg: rgba(var(--dw-color-foreground-rgb), .05); --bs-list-group-action-active-bg: rgba(var(--dw-color-foreground-rgb), .1); --bs-list-group-active-bg: rgba(var(--dw-color-foreground-rgb), .08);" role="navigation">
                @foreach (var node in sidebarNav.Nodes)
                {
                    await RenderNavItem(node);
                }
            </nav>
        }
    </div>
</div>

<button type="button" class="fixed-bottom w-100 d-lg-none btn btn-primary" data-dw-button="primary" data-bs-toggle="offcanvas" data-bs-target="#offcanvas_@(Model.ID)" aria-controls="offcanvas_@(Model.ID)">@Translate("Account menu")</button>

@{
    async Task RenderNavItem(NavigationTreeNodeViewModel node)
    {
        var pageIcon = string.Empty;
        var nodePage = Dynamicweb.Content.Services.Pages.GetPage(node.PageId);
        if (nodePage?.PropertyItem?.TryGetValue("Icon", out object? pageIconValue) ?? false)
        {
            pageIcon = Dynamicweb.Core.Converter.ToString(pageIconValue);
        }

        if (node.IsClickable)
        {
            <a class="list-group-item list-group-item-action rounded hstack gap-2 @(node.IsActive ? "active" : null)" aria-current="@(node.IsActive)" href="@(node.Link)">
                @if (pageIcon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
                {
                    <span class="icon-2">@ReadFile(pageIcon)</span>
                }
                <span>@node.Name</span>
                @if (node.Nodes.Any())
                {
                    <span class="icon-2 ms-auto">@ReadFile("/Files/Images/Icons/chevron-right.svg")</span>
                }
            </a>
            
            @if(node.InPath) 
            {
                <div class="border-3 border-start ps-2">
                    @foreach (var subnode in node.Nodes)
                    {
                        await RenderNavItem(subnode);
                    }           
                </div>
            }
        }
        else
        {
            <h6 class="ps-3 pt-3">@node.Name</h6>
            
            @foreach (var subnode in node.Nodes)
            {
                await RenderNavItem(subnode);
            }
        }
    }
}