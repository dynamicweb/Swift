@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Dynamicweb
@using Dynamicweb.Environment
@using Dynamicweb.Frontend

@functions {
	string GetCookieOptInPermission(string category)
	{
		bool categoryOrAllGranted = false;

		if (CookieManager.IsCookieManagementActive)
		{
			var cookieOptInLevel = CookieManager.GetCookieOptInLevel();
			var cookieOptInCategories = CookieManager.GetCookieOptInCategories();
			categoryOrAllGranted = cookieOptInCategories.Contains(category) || cookieOptInLevel == CookieOptInLevel.All;
		}

		return categoryOrAllGranted ? "granted" : "denied";
	}

	bool AllowTracking()
	{
		bool allowTracking = true;
		if (CookieManager.IsCookieManagementActive)
		{
			var cookieOptInLevel = CookieManager.GetCookieOptInLevel();
			var cookieOptInCategories = CookieManager.GetCookieOptInCategories();

			bool consentEither = (cookieOptInCategories.Contains("Statistical") || cookieOptInCategories.Contains("Marketing"));
			bool consentFunctional = cookieOptInLevel == CookieOptInLevel.Functional;
			bool consentAtLeastOne = cookieOptInLevel == CookieOptInLevel.All || (consentFunctional && consentEither);

			allowTracking = consentAtLeastOne;
		}
		return allowTracking;
	}
}

@{
	string swiftVersion = ReadFile("/Files/Templates/Designs/Swift-v2/swift_version.txt");
	var disableWideBreakpoints = Model.Area?.Item?.GetRawValueString("DisableWideBreakpoints", "default");
	string customHeaderInclude = Model.Area?.Item?.GetFile("CustomHeaderInclude") != null ? Model.Area.Item.GetFile("CustomHeaderInclude").Name : string.Empty;
	string favicon = Model.Area.Item.GetRawValueString("Favicon", "/Files/Templates/Designs/Swift-v2/Assets/Images/favicon.png");
    string appleTouchIcon = Model.Area.Item.GetRawValueString("AppleTouchIcon", "/Files/Templates/Designs/Swift-v2/Assets/Images/apple-touch-icon.png");
	
	var cssStyleFileInfo = new System.IO.FileInfo(Dynamicweb.Core.SystemInformation.MapPath("/Files/Templates/Designs/Swift-v2/Assets/css/styles.css"));
	var jsFileInfo = new System.IO.FileInfo(Dynamicweb.Core.SystemInformation.MapPath("/Files/Templates/Designs/Swift-v2/Assets/js/scripts.js"));
	Dynamicweb.Context.Current.Response.AddHeader("link", $"</Files/Templates/Designs/Swift-v2/Assets/css/swift.css?{cssStyleFileInfo.LastWriteTime.Ticks}>; rel=preload; as=style;");
    Dynamicweb.Context.Current.Response.AddHeader("link", $"</Files/Templates/Designs/Swift-v2/Assets/lib/bootstrap/dist/js/bootstrap.bundle.min.js>; rel=preload; as=script;");
    Dynamicweb.Context.Current.Response.AddHeader("link", $"</Files/Templates/Designs/Swift-v2/Assets/js/swift.js?{jsFileInfo.LastWriteTime.Ticks}>; rel=preload; as=script;");

	string googleTagManagerID = Model.Area.Item.GetString("GoogleTagManagerID");
	bool allowTracking = AllowTracking();

	// Schema.org details for PDP
	string productId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ProductID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("ProductID") : string.Empty;
	bool isProductDetailsPage = !string.IsNullOrEmpty(productId);
	bool isArticlePage = Model.ItemType == "Swift-v2_Article";
	string schemaOrgType = string.Empty;

	if (isProductDetailsPage)
	{
		schemaOrgType = "itemscope=\"\" itemtype=\"https://schema.org/Product\"";
	}

	if (isArticlePage)
	{
		schemaOrgType = "itemscope=\"\" itemtype=\"https://schema.org/Article\"";
	}
}

<!doctype html>
<html lang="@Pageview.Area.CultureInfo.TwoLetterISOLanguageName">
<head>
	<!-- @swiftVersion -->
	@* Required meta tags *@
	<meta charset="utf-8">
	<meta name="viewport" content="height=device-height, width=device-width, initial-scale=1.0">
	<link rel="shortcut icon" href="@favicon">
	<link rel="apple-touch-icon" href="@appleTouchIcon">

	@Model.MetaTags
	
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<meta name="googlebot-news" content="nosnippet">

	<title>@Model.Title</title>
	@* Swift stylesheet *@
	<link href="/Files/Templates/Designs/Swift-v2/Assets/css/swift.css?@cssStyleFileInfo.LastWriteTime.Ticks" rel="stylesheet" media="all" type="text/css">

	@* Media Query Limit *@
	@if(Model.Area.Item.TryGetString("MediaQueryLimit", out string mediaQueryLimit)) {
		<style>
			@@media screen and (min-width: @(mediaQueryLimit)px) {
				[swift-container] {
					--dw-container-limit: @(mediaQueryLimit)px;
				}

				[swift-container],
				[data-dw-container-width="3"] {
					--dw-container-width: calc(var(--dw-container-limit) * .8);
				}

				[data-dw-container-width="1"] {
					--dw-container-width: var(--swift-text-width);
				}
				
				[data-dw-container-width="2"] {
					--dw-container-width: calc(var(--dw-container-limit) * .65);
				}
			}
		</style>
	}

	@* Color schemes stylesheet *@
	@if (Model.GetColorSchemeStyle() != null) {
		<link href="@Model.GetColorSchemeStyle()" rel="stylesheet" media="all" type="text/css">
	}
	@* Button stylesheet *@
	@if (Model.GetButtonStyle() != null) {
		<link href="@Model.GetButtonStyle()" rel="stylesheet" media="all" type="text/css">
	}
	@* Typography stylesheet *@
	@if (Model.GetTypographyStyle() != null) {
		<link href="@Model.GetTypographyStyle()" rel="stylesheet" media="all" type="text/css">
	}
        
	<script src="/Files/Templates/Designs/Swift-v2/Assets/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
	<script src="/Files/Templates/Designs/Swift-v2/Assets/js/swift.js?@jsFileInfo.LastWriteTime.Ticks"></script>
	
	<script type="module">
		swift.Scroll.hideHeadersOnScroll();
		swift.Scroll.handleAlternativeTheme();
	</script>

	@* Google gtag method - always include even if it is not used for anything *@
	<script>
		window.dataLayer = window.dataLayer || [];
		function gtag() { dataLayer.push(arguments); }
	</script>
	@* Google tag manager *@
	@if (!string.IsNullOrWhiteSpace(googleTagManagerID))
	{
		<script>
			gtag('consent', 'default', {
				'ad_storage': 'denied',
				'ad_user_data': 'denied',
				'ad_personalization': 'denied',
				'analytics_storage': 'denied'
			});
		</script>
		<script>
                (function (w, d, s, l, i) {
                    w[l] = w[l] || []; w[l].push({
                        'gtm.start':
                            new Date().getTime(), event: 'gtm.js'
                    }); var f = d.getElementsByTagName(s)[0],
                        j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
                            'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
                })(window, document, 'script', 'dataLayer', '@(googleTagManagerID)');
		</script>
		if (allowTracking)
		{
			string adConsent = GetCookieOptInPermission("Marketing");
			string analyticsConsent = GetCookieOptInPermission("Statistical");
			<script>
                    gtag('consent', 'update', {
                        'ad_storage': '@adConsent',
                        'ad_user_data': '@adConsent',
                        'ad_personalization': '@adConsent',
                        'analytics_storage': '@analyticsConsent'
                    });
			</script>
		}
	}

	@if (!string.IsNullOrWhiteSpace(customHeaderInclude))
	{
		@RenderPartial($"Components/Custom/{customHeaderInclude}")
	}
</head>

<body class="">

	@* Google tag manager *@
	@if (!string.IsNullOrWhiteSpace(googleTagManagerID) && allowTracking)
	{
		<noscript>
			<iframe src="https://www.googletagmanager.com/ns.html?id=@(googleTagManagerID)"
					height="0" width="0" style="display:none;visibility:hidden"></iframe>
		</noscript>
	}

	<div data-intersect></div>

	<main id="content" @(schemaOrgType)>
		@ContentPlaceholder()
	</main>

	@* Render any offcanvas menu here *@
	@RenderSnippet("offcanvas")
</body>

</html>
