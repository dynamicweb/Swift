@inherits ViewModelTemplate<ProductViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Content
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string sizeCssClass = GetViewParameter("size") != null ? GetViewParameter("size").ToString() : "";
	string newBadgeCssClassName = GetViewParameter("newBadgeCssClassName") != null ? GetViewParameterString("newBadgeCssClassName").Trim().ToLower() : "";
	bool newBadgeEnabled = newBadgeCssClassName != "" && newBadgeCssClassName != "none" ? true : false;

	var campaignBadgesValues = GetViewParameter("campaignBadgesValues") != null ? 
	GetViewParameter("campaignBadgesValues").GetType() == typeof(System.String) ? GetViewParameterString("campaignBadgesValues").Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList() : GetViewParameter("campaignBadgesValues") as List<string> : new List<string>();

}


@if (Model.Discount.Price != 0)
{
	string saleBadgeCssClassName = GetViewParameter("saleBadgeCssClassName") != null ? GetViewParameterString("saleBadgeCssClassName").Trim().ToLower() : "";
	bool saleBadgeEnabled = saleBadgeCssClassName != "" && saleBadgeCssClassName != "none" ? true : false;

	if (saleBadgeEnabled)
	{
		string saleBadgeType = GetViewParameter("saleBadgeType") != null ? GetViewParameterString("saleBadgeType") : "amount";
		string title = saleBadgeType == "amount" ? "-" + Model.Discount.PriceFormatted : "";
		title = saleBadgeType == "percentage" ? "-" + Math.Round((Model.Discount.Price / Model.PriceBeforeDiscount.Price) * 100) + "%" : title;

		string hideAutoLabel = "";
		if (saleBadgeType == "amount" || saleBadgeType == "percentage")
		{
			hideAutoLabel = "badge-no-label";
		}

		<span class="@sizeCssClass"><span class="badge @hideAutoLabel @(saleBadgeCssClassName) rounded-0">@title</span></span>
	}
}

@if (newBadgeEnabled)
{
	DateTime createdDate = Model.Created.Value;
	double newPublicationDays = GetViewParameter("newPublicationDays") != null ? GetViewParameterDouble("newPublicationDays") : 0;

	if ((newPublicationDays == 0) || (createdDate.AddDays(newPublicationDays) > DateTime.Now))
	{
		<span class="@sizeCssClass"><span class="badge @newBadgeCssClassName rounded-0"></span></span>
	}
}

@if (campaignBadgesValues.Any())
{
	Dictionary<string, ParagraphInfoViewModel> badgeConfigurations;

	if (Dynamicweb.Context.Current.Items.Contains("badgeConfigurations"))
	{
		badgeConfigurations = (Dictionary<string, ParagraphInfoViewModel>)Dynamicweb.Context.Current.Items["badgeConfigurations"];
	}
	else
	{
		var badgesPage = Pageview.AreaSettings.GetLink("EcommerceBadgesPage") != null ? Pageview.AreaSettings.GetLink("EcommerceBadgesPage").PageId : 0;
		var allBadges = badgesPage != 0 ? Dynamicweb.Content.Services.Paragraphs.GetParagraphsByPageId(badgesPage) : null;

		badgeConfigurations = new Dictionary<string, ParagraphInfoViewModel>();
		foreach (Paragraph badge in allBadges)
		{
			var paragraphviewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(badge);
			string cssClassName = paragraphviewModel.Item.GetString("CssClassName").Trim().ToLower();
			if (!badgeConfigurations.ContainsKey(cssClassName))
			{
				badgeConfigurations.Add(cssClassName, paragraphviewModel);
			}
		}
		Dynamicweb.Context.Current.Items.Add("badgeConfigurations", badgeConfigurations);
	}

	int badgesCount = 0;
	if (badgeConfigurations.Any())
	{
		foreach (string campaign in campaignBadgesValues)
		{
			if (!string.IsNullOrEmpty(campaign))
			{

				FieldValueViewModel availableCampaignsObject;
				Model.ProductFields.TryGetValue("Campaign", out availableCampaignsObject);

				if (availableCampaignsObject != null)
				{
					string campaignType = string.Empty;

					if (badgeConfigurations.ContainsKey(campaign))
					{
						ParagraphInfoViewModel paragraphviewModel;
						if (badgeConfigurations.TryGetValue(campaign, out paragraphviewModel))
						{
							campaignType = paragraphviewModel.Item.GetRawValueString("CampaignType");
						}
					}

					List<FieldOptionValueViewModel> availableCampaigns = (List<FieldOptionValueViewModel>)availableCampaignsObject.Value;

					foreach (FieldOptionValueViewModel availableOption in availableCampaigns)
					{
						if (campaignType == availableOption.Value)
						{
							<span class="@sizeCssClass"><span class="badge @campaign.Trim().ToLower() rounded-0"></span></span>
							badgesCount++;
							break;
						}
					}
				}
			}
		}
	}

	if (badgesCount == 0 && Pageview.IsVisualEditorMode)
	{
		<span class="@sizeCssClass"><span class="badge bg-success text-light rounded-0">@Translate("Badge example")</span></span>
	}
}
else if (Pageview.IsVisualEditorMode)
{
	<span class="@sizeCssClass"><span class="badge bg-success text-light rounded-0">@Translate("Badge example")</span></span>
}
