@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>

@{
	string productIdFromUrl = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ProductID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("ProductID") : string.Empty;
	bool isProductDetail = !string.IsNullOrEmpty(productIdFromUrl) && Pageview.Page.NavigationTag.ToLower() == "shop";
	string paragraphId = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("ParagraphID")) ? Dynamicweb.Context.Current.Request.QueryString.Get("ParagraphID") : string.Empty;
	var gridContent = Model.Grid("Grid", "Grid", "default:true;sort:1", "Page");
}

@MasterPageFile("Swift-v2_MasterClean.cshtml")

@* Render the grid, if any *@
@if (!isProductDetail)
{
	if (!string.IsNullOrEmpty(paragraphId))
	{ 
		@RenderParagraphContent(Convert.ToInt32(paragraphId))
	}
	else
	{
		@gridContent
	}
}
else
{
	var productObject = Dynamicweb.Ecommerce.Services.Products.GetProductById(productIdFromUrl, "", Pageview.Area.EcomLanguageId);
	var detailPage = Dynamicweb.Ecommerce.Services.ProductGroups.GetGroup(productObject.PrimaryGroupId)?.Meta.PrimaryPage ?? string.Empty;
	var detailPageId = detailPage != string.Empty ? Convert.ToInt16(detailPage.Substring(detailPage.LastIndexOf('=') + 1)) : GetPageIdByNavigationTag("ProductDetailPage");

	@RenderGrid(detailPageId)
}

@* Render classic content, if any *@
@Model.Placeholder("dwcontent", "content", "default:true;sort:1")
