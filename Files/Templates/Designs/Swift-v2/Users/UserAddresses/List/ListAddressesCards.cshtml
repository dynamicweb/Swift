@inherits ViewModelTemplate<AddressListViewModel>
@using Dynamicweb.Users.Frontend.UserAddresses
@using Dynamicweb.Rendering
@using Dynamicweb.Frontend
@using Dynamicweb.Ecommerce.Frontend
@using Dynamicweb.Security.UserManagement

@{
    string baseUrl = SearchEngineFriendlyURLs.GetFriendlyUrl($"default.aspx?ID={Pageview.Page.ID}");
}

<header class="hstack flex-wrap gap-3 mb-4">
    <h1 class="h4 mb-0 flex-fill">@(Pageview.Page.GetDisplayName())</h1>
    @if (Model.AllowEditAddress) 
    {
        <button class="btn btn-primary btn-sm hstack gap-2 align-self-start" name="Cmd" value="EditAddress" data-dw-button
            tabindex="0"
            aria-label="@Translate("Add address")"
            data-bs-toggle="offcanvas" 
            data-bs-target="[data-swift-address-add-offcanvas]" 
            hx-trigger="click" 
            hx-get
            hx-swap="innerHTML"
            hx-target="[data-swift-address-add-offcanvas] .offcanvas-body"
            hx-select="[data-swift-address-editform]"
        >
            <span class="icon-2">
                @ReadFile("/Files/Images/Icons/plus.svg")
            </span>
            <span>@Translate("Add address")</span>
        </button>

        <div class="offcanvas offcanvas-end" tabindex="-1" data-swift-address-add-offcanvas>
            <div class="offcanvas-header">
                <h5 class="offcanvas-title m-0">@Translate("Add address")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="@Translate("Close")"></button>
            </div>
            <div class="offcanvas-body"></div>
        </div>
    }
</header>

<div class="d-grid gap-3" style="grid-template-columns: repeat(auto-fill, minmax(300px, 1fr))" data-swift-addresses>
    @foreach (var address in Model.Addresses)
    {
        <address class="card m-0">
            <div class="card-body">
                <div class="d-flex align-items-center mb-2">
                    @if (!string.IsNullOrEmpty(address.Name))
                    {
                        <h6 class="card-title m-0 fw-bold flex-fill">
                            @address.Name
                        </h6>
                    }
                    @if (Model.AllowEditAddress) {
                        <button class="btn btn-outline-secondary text-body hstack border-0 p-2 position-relative z-2" data-dw-button type="button" data-bs-toggle="dropdown" aria-expanded="false" data-bs-popper-config='{"strategy":"fixed", "placement":"bottom-end"}'>
                            <span class="icon-2">
                                @ReadFile("/Files/Images/Icons/ellipsis.svg")
                            </span>
                        </button>
                        <ul class="dropdown-menu shadow-sm fs-7 p-1">
                            <li>
                                <button type="button" name="Cmd" value="EditAddress" class="dropdown-item hstack gap-2 ps-2 pe-3 rounded-1"  
                                    aria-label="@Translate("Edit address")" 
                                    data-bs-toggle="offcanvas"
                                    data-bs-target="[data-swift-address-edit-offcanvas]" 
                                    hx-trigger="click" 
                                    hx-get
                                    hx-swap="innerHTML"
                                    hx-target="[data-swift-address-edit-offcanvas] .offcanvas-body"
                                    hx-select="[data-swift-address-editform]"
                                    hx-vals='{"AddressId": "@address.Id"}'
                                >

                                    <span class="icon-2">
                                        @ReadFile("/Files/Images/Icons/pen-to-square.svg")
                                    </span>
                                    @Translate("Edit")
                                </button>
                            </li>
                            @if(address.AddressKind == UserAddressKind.Shipping) 
                            {
                                <li>
                                    <button type="button" name="Cmd" value="SaveAddress" class="dropdown-item hstack gap-2 ps-2 pe-3 rounded-1" @(address.IsDefault ? "disabled aria-disabled='true'" : null)
                                        hx-trigger="click"
                                        hx-post
                                        hx-swap="outerHTML"
                                        hx-vals='{"AddressId": "@address.Id", "IsDefault": "true"}'
                                        hx-target="[data-swift-addresses]"
                                        hx-select="[data-swift-addresses]"
                                    >
                                        <span class="icon-2">
                                            @ReadFile("/Files/Images/Icons/circle-check.svg")
                                        </span>
                                        @Translate("Set as default")
                                    </button>
                                </li>
                            }
                            <li class="mx-n1"><hr class="dropdown-divider my-1"></li>
                            <li>
                                <button type="button" name="AddressId" value="@(address.Id)" class="dropdown-item hstack gap-2 ps-2 pe-3 rounded-1 text-danger"
                                    hx-trigger="click"
                                    hx-get="@(baseUrl)" 
                                    hx-vals='{"AddressName": "@(address.Name)", "LayoutTemplate": "/Designs/Swift-v2/Users/UserAddresses/List/Addresses/DeleteAddressModal.cshtml"}'
                                    hx-target="main"
                                    hx-swap="beforeend"
                                >
                                    <span class="icon-2">
                                        @ReadFile("/Files/Images/Icons/trash-can.svg")
                                    </span>
                                    @Translate("Delete")
                                </button>
                            </li>
                        </ul>
                    }
                </div>

                <div class="card-text flex-fill">
                    @if (address.AddressKind != UserAddressKind.None) {
                        <div class="hstack gap-2 mb-3">
                            @if (address.AddressKind == UserAddressKind.Shipping)
                            {
                                <div class="badge text-bg-light">
                                    @Translate("Delivery")
                                </div>
                            }
                            else if (address.AddressKind == UserAddressKind.Billing)
                            {
                                <div class="badge text-bg-dark">
                                    @Translate("Billing")
                                </div>
                            }
                            @if (address.IsDefault && address.AddressKind == UserAddressKind.Shipping)
                            {
                                <div class="badge text-bg-secondary">
                                    @Translate("Default delivery")
                                </div>
                            }
                            @if (address.IsDefault && address.AddressKind == UserAddressKind.Billing)
                            {
                                <div class="badge text-bg-secondary">
                                    @Translate("Default billing")
                                </div>
                            }
                        </div>
                    }

                    <address class="fs-7 mb-0">
                        <div>@address.Company</div>
                        <div>@address.Address</div>
                        <div>@address.Address2</div>
                        @if (address.CountryCode == "US" || address.CountryCode == "CA")
                        {
                            <div>@address.City @address.GetStateName() @address.Zip</div>
                        }
                        else
                        {
                            <div>@address.Zip @address.City</div>
                        }
                        <div>@address.Country</div>
                        <div class="mt-2">
                            @if (!string.IsNullOrEmpty(address.Phone)) {
                                <div>@Translate("Phone"): @address.Phone</div>
                            }
                            @if (!string.IsNullOrEmpty(address.Email)) {
                                <div>@Translate("Email"): @address.Email</div>
                            }
                        </div>
                    </address>
                </div>
            </div>
        </address>
    }

    <div class="offcanvas offcanvas-end" tabindex="-1" data-swift-address-edit-offcanvas>
        <div class="offcanvas-header">
            <h5 class="offcanvas-title m-0">@Translate("Edit address")</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="@Translate("Close")"></button>
        </div>
        <div class="offcanvas-body"></div>
    </div>
</div>

@if (Model.PageCount > 1)
{
    <form class="p-3 mt-3">
        <ul class="pagination m-0">
            @for (int i = 1; i <= Model.PageCount; i++)
            {
                var active = (i == Model.CurrentPage) ? "active" : string.Empty;
                <li class="page-item @active">
                    <button type="submit" class="page-link" name="PageNum" value="@i">@i</button>
                </li>
            }
        </ul>
    </form>
}
