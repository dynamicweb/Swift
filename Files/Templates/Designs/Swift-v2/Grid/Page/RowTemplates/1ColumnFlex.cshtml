@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@{ 
	string containerClass = "container-xl";

	string width = Model.Item.GetRawValueString("Width", "");
	if (width == "stretch") {
		containerClass = "container-fluid";
	}
	if (width == "none") {
		containerClass = "container-fluid px-0";
	}

	string rowHeight = Model.Item.GetRawValueString("RowHeight", "0");
	rowHeight = "py-" + rowHeight;

	string hideOnScroll = Model.Item.GetRawValueString("HideOnScroll", string.Empty).ToLower();
	hideOnScroll = hideOnScroll == "hide" ? "js-hide-on-scroll" : "";

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string alternativeTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("AlternativeTheme")) ? " theme " + Model.Item.GetRawValueString("AlternativeTheme").Replace(" ", "").Trim().ToLower() : "";
	string mainTheme = theme;

	string headerCssClass = "sticky-top";
	if (Pageview.Page.PropertyItem is Dynamicweb.Content.Items.Item propertyItem ) {
		headerCssClass = propertyItem["MoveThisPageBehindTheHeader"] != null ? propertyItem["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
	}
	headerCssClass = headerCssClass == "" ? "sticky-top" : headerCssClass;
	headerCssClass = Pageview.IsVisualEditorMode ? "" : headerCssClass;

	string themeSwitchers = "";
	string themeAnimated = "";
	if (headerCssClass == "fixed-top") {
		theme = alternativeTheme;
		themeSwitchers = "data-main-theme=\"" + mainTheme + "\" data-alternative-theme=\"" + alternativeTheme + "\"";
		themeAnimated = "theme-animated ";
	}

	var decorations = Model.Item?.GetList("CssDecorations")?.GetRawValue().OfType<string>() ?? Enumerable.Empty<string>();
	var css = string.Empty;
	var cssClasses = new List<string> { };

	foreach (var itemId in decorations)
	{
		var item = Dynamicweb.Content.Services.Items.GetItem("Swift_Css", itemId);
		item.TryGetValue("Class", out object classes);
		if (classes is null)
		{
			continue;
		}

		var cssString = (string)classes;
		if (cssString.StartsWith("["))
		{
			var cssArray = Dynamicweb.Core.Converter.Deserialize<string[]>(cssString);
			cssClasses.AddRange(cssArray);
		}
		else
		{
			cssClasses.Add(cssString.Replace(",", " "));
		}
	}
	css = string.Join(" ", cssClasses).Trim();

	var columnContent = Model.Column(1).Output();

	if (Pageview.IsVisualEditorMode || !string.IsNullOrWhiteSpace(columnContent))
	{
	<div class="@rowHeight @themeAnimated @theme @hideOnScroll @(css) item_@Model.Item.SystemName.ToLower()" @themeSwitchers data-swift-gridrow>
		<div class="@containerClass">
			<div class="d-flex flex-row">
				<div class="col">
					@columnContent
				</div>
			</div>
		</div>
	</div>
	}
}
