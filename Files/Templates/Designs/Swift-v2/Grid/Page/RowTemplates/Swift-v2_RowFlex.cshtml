@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>

@functions {
	string? GetWidthSetting(int columnNumber) {
		string? columnWidth = Model?.Item?.GetRawValueString($"Column_{columnNumber}Width", string.Empty).ToLower();
		columnWidth = string.IsNullOrEmpty(columnWidth) ? columnWidth : columnWidth == "grow" ? "flex-grow-1" : "flex-grow-0";
		return columnWidth;
	}
}

@{
	string verticalAlignment = $"align-items-{Model.Item?.GetString("VerticalAlignment", "center")}";
}

<section swift-gridrow  
	data-dw-colorscheme="@Model.ColorScheme?.Id" 
	data-dw-itemtype="@Model?.Item?.SystemName.ToLower()" 
	data-dw-row-space-top="@(Model?.TopSpacing ?? 2)" 
	data-dw-row-space-bottom="@(Model?.BottomSpacing ?? 2)" 
	data-dw-row-gap-column="@(Model?.GapX ?? 3)"
	data-dw-row-gap-row="@(Model?.GapX ?? 3)">
	<div swift-container class="d-flex @verticalAlignment" data-dw-container-width="@(Model?.ContainerWidth ?? 3)">
		@foreach(var column in Model.Columns)
		{
			<div swift-gridcolumn class="col @GetWidthSetting(column.ColumnNumber)" data-dw-itemtype="@column.Paragraph?.Item?.SystemName.ToLower()" id="@column.Paragraph?.ID" data-dw-colorscheme="@column.Paragraph?.ColorScheme?.Id">
				@column.Output()
			</div>
		}
	</div>
</section>

