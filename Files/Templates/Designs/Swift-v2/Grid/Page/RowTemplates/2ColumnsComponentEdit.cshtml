@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>

@{
	string rowClass = "gap-3";
	string spaceBetweenColumns = Model.Item.GetRawValueString("SpaceBetweenColumns", "").ToLower();

	if (spaceBetweenColumns == "stick")
	{
		rowClass = "gap-0";
	}
	if (spaceBetweenColumns == "spacing-large")
	{
		rowClass = "gap-1 gap-md-4 gap-lg-5";
	}

	string pushDown = "";
	string columnPosition = Model.Item.GetRawValueString("ColumnPosition", "align-items-center").ToLower();
	if (columnPosition == "top")
	{
		columnPosition = "align-items-start";
	}
	if (columnPosition == "center")
	{
		columnPosition = "align-items-center";
	}
	if (columnPosition == "bottom")
	{
		columnPosition = "align-items-end";
		pushDown = " mt-auto";
	}

	string spaceBetweenRows = Model.Item.GetRawValueString("SpaceBetweenRows", "spacing");
	string sectionClass = string.Empty;

	//Row spacing dekstop
	switch (spaceBetweenRows) {
		case "none": //No spacing
			sectionClass += "py-0";
			break;
		case "spacing": //Small spacing top and bottom
			sectionClass += "py-2";
			break;
		case "spacing-small-top": //Small spacing top
			sectionClass += "pt-2";
			break;
		case "spacing-small-bottom": //Small spacing bottom
			sectionClass += "pb-2";
			break;
		case "spacing-medium": //Medium spacing top and bottom
			sectionClass += "py-3";
			break;
		case "spacing-medium-top": //Medium spacing top
			sectionClass += "pt-3";
			break;
		case "spacing-medium-bottom": //Medium spacing bottom
			sectionClass += "pb-3";
			break;
		case "spacing-large": //Large spacing top and bottom
			sectionClass += "py-4";
			break;
		case "spacing-top": //Large spacing top
			sectionClass += "pt-4";
			break;
		case "spacing-bottom": //Large spacing bottom
			sectionClass += "pb-4";
			break;
	}

	string column1width = Model.Item.GetRawValueString("Column_1Width", "").ToLower();
	column1width = column1width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string column2width = Model.Item.GetRawValueString("Column_2Width", "").ToLower();
	column2width = column2width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string columnOne = Model.Column(1).Output().Trim();
	string columnTwo = Model.Column(2).Output().Trim();

	if (Pageview.IsVisualEditorMode || !string.IsNullOrWhiteSpace(columnOne) || !string.IsNullOrWhiteSpace(columnTwo))
	{
		<div class="@(pushDown) item_@Model.Item.SystemName.ToLower()">
			<div class="d-flex flex-row @rowClass @columnPosition @sectionClass">
				@if (!string.IsNullOrEmpty(columnOne))
				{
					<div class="col @column1width" data-col-size="6">
						@columnOne
					</div>
				}
				@if (!string.IsNullOrEmpty(columnTwo))
				{
					<div class="col @column2width" data-col-size="6">
						@columnTwo
					</div>
				}
			</div>
		</div>
	}
}
