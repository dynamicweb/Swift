@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	ProductViewModel product = null;
	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}
	else if (Pageview.Page.Item["DummyProduct"] != null && Pageview.IsVisualEditorMode)
	{
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel productList = pageViewModel.Item.GetValue("DummyProduct") != null ? pageViewModel.Item.GetValue("DummyProduct") as ProductListViewModel : new ProductListViewModel();

		if (productList?.Products is object)
		{
			product = productList.Products[0];
		}
	}
}

@if (product is object)
{
	int itemSourcePageId = Convert.ToInt32(Model.Item.GetRawValueString("ListComponentSource", "0"));

	string gridColumnSize = Model.Item.GetRawValueString("GridLayoutDesktop", "3-columns");
	gridColumnSize = gridColumnSize == "2-columns" ? "g-col-lg-6" : gridColumnSize;
	gridColumnSize = gridColumnSize == "3-columns" ? "g-col-lg-4" : gridColumnSize;
	gridColumnSize = gridColumnSize == "4-columns" ? "g-col-lg-3" : gridColumnSize;
	gridColumnSize = gridColumnSize == "6-columns" ? "g-col-lg-2" : gridColumnSize;
	gridColumnSize = gridColumnSize == "list" ? "" : gridColumnSize;

	string gridColumnMobileSize = Model.Item.GetRawValueString("GridLayoutMobile", "2-columns");
	gridColumnMobileSize = gridColumnMobileSize == "list" ? "g-col-12" : gridColumnMobileSize;
	gridColumnMobileSize = gridColumnMobileSize == "2-columns" ? "g-col-6" : gridColumnMobileSize;

	var bomConfiguration = product.GetBomConfiguration();
	var products = bomConfiguration.Items;
	var productGroups = bomConfiguration.Groups;
	int productsCount = products.Count();
	int groupsCount = productGroups.Count(); 
	string productsCountLabel = productsCount == 1 ? "product" : "products";

	if (productsCount > 0) {
		<div data-dw-colorscheme="@Model.ColorScheme?.Id">
			<p class="pt-3 border-top">
				@Translate("The product package consists of:") @productsCount @productsCountLabel
			</p>

			<div class="grid pb-3">
				@foreach (var prod in products)
				{
					var bomProduct = prod.Product.GetProduct();

					if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
					{
						Dynamicweb.Context.Current.Items["ProductDetails"] = bomProduct;
					}
					else
					{
						Dynamicweb.Context.Current.Items.Add("ProductDetails", bomProduct);
					}

					if (Dynamicweb.Context.Current.Items.Contains("ProductQuantity"))
					{
						Dynamicweb.Context.Current.Items["ProductQuantity"] = prod.Quantity;
					}
					else
					{
						Dynamicweb.Context.Current.Items.Add("ProductQuantity", prod.Quantity);
					}

					if (Model.Item.GetString("ListComponentSource") != null)
					{
						<article class="@gridColumnMobileSize @gridColumnSize d-flex flex-column position-relative product js-product" data-product-id="@bomProduct.Id" data-variant-id="@bomProduct.VariantId" itemscope itemtype="https://schema.org/Product">
							@RenderGrid(itemSourcePageId)
						</article>
					}
				}
			</div>
		</div>
	}

	if (groupsCount > 0) {
		<div class="js-product-bom-configurator" data-dw-colorscheme="@Model.ColorScheme?.Id">
			@foreach (var group in productGroups)
			{
				<p class="pt-3 border-top">
					@Translate("Choose a") @group.Name.ToLower()
				</p>

				<div class="grid pb-3">
					@foreach (var prod in group.Products)
					{
						var bomProduct = prod.GetProduct();

						if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
						{
							Dynamicweb.Context.Current.Items["ProductDetails"] = bomProduct;
						}
						else
						{
							Dynamicweb.Context.Current.Items.Add("ProductDetails", bomProduct);
						}

						if (Dynamicweb.Context.Current.Items.Contains("ProductQuantity"))
						{
							Dynamicweb.Context.Current.Items["ProductQuantity"] = 1;
						}
						else
						{
							Dynamicweb.Context.Current.Items.Add("ProductQuantity", 1);
						}

						if (Model.Item.GetString("ListComponentSource") != null)
						{
							string radioChecked = group.DefaultProduct.ProductId == prod.ProductId ? "checked" : "";

							<article class="@gridColumnMobileSize @gridColumnSize d-flex position-relative gap-4 product js-product" data-product-id="@bomProduct.Id" data-variant-id="@bomProduct.VariantId" itemscope itemtype="https://schema.org/Product">
								<input type="radio" class="js-bom-variant" name="@group.Id" value="@prod.ProductId|@prod.VariantId" @radioChecked>
								@RenderGrid(itemSourcePageId)
							</article>
						}
					}
				</div>
			}
		</div>
	}
	
	if ((productsCount == 0 || groupsCount == 0) && Pageview.IsVisualEditorMode)
	{
		<div class="alert alert-dark m-0">@Translate("No BOM items available")</div>
	}

	// Set the product back to the original product
	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		Dynamicweb.Context.Current.Items["ProductDetails"] = product;
	}
	else
	{
		Dynamicweb.Context.Current.Items.Add("ProductDetails", product);
	}
}
else if (Pageview.IsVisualEditorMode)
{
	<div class="alert alert-dark m-0">@Translate("No products available")</div>
}
