@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb
@using System.IO

@{
	var navigationSettings = new NavigationSettings();
	navigationSettings.ExpandMode = ExpandMode.All;

	if (!string.IsNullOrEmpty(Model.Item.GetString("NavigationRoot"))) {
		string root = Model.Item.GetString("NavigationRoot");

		if (root.Contains("=")) {
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			navigationSettings.RootPageId = rootPageId;
		}
		navigationSettings.StartLevel = 2;
	} else {
		navigationSettings.StartLevel = 1;
	}

	int nodeCount = 0;

	string currentPageTitle = Translate("Navigation");

	if (Pageview.Page?.Item != null) {
		currentPageTitle = Pageview.Page.Item["Title"] != null ? Pageview.Page.Item["Title"].ToString() : currentPageTitle;
	}

	NavigationTreeViewModel navigationModel = Navigation.GetNavigationViewModel(navigationSettings);
}

<div class="h-100" data-dw-colorscheme="@Model.ColorScheme?.Id">
	@if (Model.Item.TryGetString("Title", out string title)) {
		@title
	}

	@* Desktop layout *@
	<div class="d-none d-lg-block">
		<ul class="navbar-nav flex-column flex-fill root">
			@foreach (var node in navigationModel.Nodes)
			{
				await RenderNavItem(node, nodeCount++);
			}
			@if (Model.Item.GetBoolean("ShowSignOutLink") && Pageview.User != null)
			{
				if (Dynamicweb.Security.UserManagement.User.GetCurrentSecondaryUser() != null)
				{
					<li class="nav-item border-top">
						<a href="Default.aspx?ID=@(Pageview.ID)&DwExtranetRemoveSecondaryUser=1" class="nav-link text-reset swift_sign-out-as-customer-link">@Translate("Sign out as a customer")</a>
					</li>
				}
				<li class="nav-item border-top">
					<a href="/Admin/Public/ExtranetLogoff.aspx?redirect=no" class="nav-link text-reset swift_sign-out-link">@Translate("Sign out")</a>
				</li>
			}
		</ul>
	</div>

	@* Mobile layout *@
	<div class="d-block d-lg-none">
		<div class="collapsed" data-bs-toggle="collapse" data-bs-target="#VerticalNavigation_@Model.ID" role="button" aria-expanded="true" aria-controls="Navigation">
			<div class="d-flex">
				<h6 class="fw-bold m-0 flex-fill">
					@if (string.IsNullOrEmpty(currentPageTitle))
					{
						@Translate("Navigation")
					}
					else
					{
						@currentPageTitle
					}
				</h6>
				<div class="my-auto collapse-chevron-icon"></div>
			</div>
		</div>
		<div class="collapse hide" id="VerticalNavigation_@Model.ID">
			<div class="navbar navbar-expand py-0">
				<ul class="navbar-nav flex-column flex-fill">
					@foreach (var node in navigationModel.Nodes)
					{
						await RenderNavItem(node, nodeCount);
						nodeCount++;
					}
					@if (Model.Item.GetBoolean("ShowSignOutLink") && Pageview.User != null)
					{
						if (Dynamicweb.Security.UserManagement.User.GetCurrentSecondaryUser() != null)
						{
							<li class="nav-item border-top">
								<a href="Default.aspx?ID=@(Pageview.ID)&DwExtranetRemoveSecondaryUser=1" class="nav-link text-reset swift_sign-out-as-customer-link">@Translate("Sign out as a customer")</a>
							</li>
						}
						<li class="nav-item border-top">
							<a href="/Admin/Public/ExtranetLogoff.aspx?redirect=no" class="nav-link text-reset swift_sign-out-link">@Translate("Sign out")</a>
						</li>
					}
				</ul>
			</div>
		</div>
	</div>
</div>

@{
	async Task RenderNavItem(Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel node, int nodeCount)
	{
		var hasChildren = node.Nodes.Count() > 0;
		string groupId = !string.IsNullOrEmpty(node.GroupId) ? node.GroupId : node.PageId.ToString();

		var page = Dynamicweb.Content.Services.Pages.GetPage(node.PageId);
		string icon = string.Empty;
		if (page.PropertyItem != null)
		{
			icon = page.PropertyItem["Icon"] != null ? page.PropertyItem["Icon"].ToString() : string.Empty;
		}

		<li class="nav-item border-top @(node.IsActive ? " active" : string.Empty)">
			<div class="d-flex align-items-center">
				<a class="nav-link flex-fill text-reset" @(node.IsActive ? "aria-current='page'" : string.Empty) href="@node.Link">
					@if (!Model.Item.GetBoolean("HideIcons"))
					{
						if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none"))
						{
							<span class="icon-3 me-1">
								@ReadFile(icon)
							</span>
						}
					}
					@if (!Model.Item.GetBoolean("HideTexts"))
					{
						<span class="@(node.IsActive ? "fw-bold" : string.Empty)">@node.Name</span>
					}
				</a>
				@if (hasChildren)
				{
					string collapseCSS = node.InPath ? string.Empty : "collapsed ";
					<div class="@(collapseCSS)m-0 collapse-icon" data-bs-toggle="collapse" data-bs-target="#NavigationGroup_@(groupId)_@(nodeCount)" role="button" aria-expanded="true" aria-controls="NavigationGroup_@(groupId)_@(nodeCount)"></div>
				}
			</div>
			@if (hasChildren)
			{
				string collapsed = node.InPath ? "show" : string.Empty;

				<div class="ms-3 collapse @collapsed" id="NavigationGroup_@(groupId)_@(nodeCount)">
					<ul class="navbar-nav flex-column flex-fill">
						@foreach (var subnode in node.Nodes)
						{
							await RenderNavItem(subnode, nodeCount);
						}
					</ul>
				</div>
			}
		</li>
	}
}
