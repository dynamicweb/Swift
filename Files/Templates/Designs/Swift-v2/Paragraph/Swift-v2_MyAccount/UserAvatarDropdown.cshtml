@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Content
@using Dynamicweb.Ecommerce.Common
@using Dynamicweb.Security.UserManagement
@{
	int myAccountPageId = GetPageIdByNavigationTag("CustomerCenter") != 0 ? GetPageIdByNavigationTag("CustomerCenter") : Pageview?.ID ?? 0;
	if (Model.Item?.TryGetLink("MyAccountPage", out var linkPage) ?? false)
	{
		myAccountPageId = linkPage.PageId;
	}
}

<div class="nav-wrapper" data-swift-menu="@Model.ID">
	<div class="nav-item dropdown position-static">
		
		@if(Pageview?.User is null)
		{
			<button type="button" class="hstack me-auto p-1 position-relative nav-link" role="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" id="SignInDropdown_@Model.ID">
        
				<div class="btn btn-primary rounded-circle hstack justify-content-center p-0 me-2" style="height:2rem; aspect-ratio:1;" data-dw-button="primary">
					@if ((Model.Item?.TryGetString("Icon", out var icon) ?? false) && icon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
					{
						<span class="icon-2 pe-none">@ReadFile(icon)</span>
					}
				</div>

				@if (Model.Item?.TryGetString("Title", out string? title) ?? false)
				{
					<div class="fw-bold fs-7">@(title)</div>
				}

				<span class="icon-1 pe-none ms-2">@ReadFile("/Files/Images/Icons/chevron-down.svg")</span>
				
			</button>
		}
		else 
		{
			<button class="btn p-0 border-0 hstack" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" id="SignInDropdown_@Model.ID">
				@RenderPartial("CustomerCenter/CustomerCenterUserAvatar.cshtml", ContentViewModelFactory.CreateUserViewModel(Pageview?.User))
				<span class="icon-1 pe-none">@ReadFile("/Files/Images/Icons/chevron-down.svg")</span>
			</button>
		}

		<ul class="dropdown-menu dropdown-menu-end dropdown-menu-shadow" style="min-inline-size: 12rem;" aria-labelledby="SignInDropdown_@Model.ID" data-dw-colorscheme="light">
			
			<li class="dropdown-header">
				@if (Pageview?.User is not null)
				{
					<span class="text-body text-opacity-50 fs-8">
						@if ( UserContext.Current.ImpersonatingUser is not null)
						{
							@Translate("Impersonated by") <span class="fw-bold">@(UserContext.Current.ImpersonatingUser?.Name)</span>
						}
						else 
						{
							@Translate("Signed in as")
						}
					</span>
					<span class="fw-bold d-block">@(Pageview?.User?.Name)</span>
				}
				else 
				{
					if (Model.Item?.TryGetString("Title", out string? title) ?? false)
					{
						<div>@(title)</div>
					}
				}
			</li>
			<li><hr class="dropdown-divider"></li>

			@{
				var nav = Navigation.GetNavigationViewModel(new NavigationSettings(){
					RootPageId = myAccountPageId,
					StartLevel = 1,
					StopLevel = 10,
					IncludeFoldersAndHidden = true,
					ExpandMode = ExpandMode.All,
				});
				
				if(nav?.Nodes.Any() ?? false) {
					foreach (var node in nav.Nodes)
					{
						if (node.ShowInMenu){
							await RenderNavItem(node);
						}
					}
					<li><hr class="dropdown-divider"></li>
				}
			}
			
			@if (UserContext.Current.ImpersonatingUser != null)
			{
				<li>
					<a href="Default.aspx?ID=@(Pageview?.ID ?? 0)&DwExtranetRemoveSecondaryUser=1" class="dropdown-item fs-7 hstack">	
						<span class="icon-2 me-2">@ReadFile("/Files/Images/Icons/arrows-repeat.svg")</span>
						@Translate("Switch back to") @(UserContext.Current.ImpersonatingUser.Name)
					</a>
				</li>
			}
			@if (Pageview?.User is not null)
			{
				<li>
					<a href="/Admin/Public/ExtranetLogoff.aspx?redirect=no" class="dropdown-item fs-7 hstack" data-swift-link-type="sign-out">
						<span class="icon-2 me-2">@ReadFile("/Files/Images/Icons/arrow-left-from-bracket.svg")</span>
						@Translate("Sign out")
					</a>
				</li>
			}
			else 
			{
				int signInPageId = GetPageIdByNavigationTag("SignInPage") != 0 ? GetPageIdByNavigationTag("SignInPage") : Pageview?.ID ?? 0;
				string signInUrl = signInPageId != 0 ? SearchEngineFriendlyURLs.GetFriendlyUrl(signInPageId) : string.Empty;

				<li>
					<a href="@signInUrl" class="dropdown-item fs-7 hstack" data-swift-link-type="sign-in">
						<span class="icon-2 me-2">@ReadFile("/Files/Images/Icons/arrow-right-to-bracket.svg")</span>
						@Translate("Sign in")
					</a>
				</li>
			}

		</ul>

	</div>
</div>

@{
	async Task RenderNavItem(NavigationTreeNodeViewModel node)
	{
		var pageIcon = string.Empty;
		var nodePage = Dynamicweb.Content.Services.Pages.GetPage(node.PageId);
		if (nodePage?.PropertyItem?.TryGetValue("Icon", out object? pageIconValue) ?? false)
		{
			pageIcon = Dynamicweb.Core.Converter.ToString(pageIconValue);
		}

		if (node.IsClickable)
		{
			<li>
				<a class="dropdown-item hstack fs-7 flex-fill text-decoration-none @(node.IsActive ? "active" : null)" @(node.IsActive ? "aria-current='page'" : null) href="@(node.Link)">
					@if (pageIcon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
					{
						<span class="icon-2 me-2">@ReadFile(pageIcon)</span>
					}
					<span>@node.Name</span>
				</a>
			</li>
		}
		else
		{
			<li><h6 class="fs-8 dropdown-header text-body text-opacity-50 m-0 text-uppercase">@node.Name</h6></li>
			
			@foreach (var subnode in node.Nodes.Where(node => node.ShowInMenu))
			{
				await RenderNavItem(subnode);
			}

			<li><hr class="dropdown-divider"></li>
		}
	}
}