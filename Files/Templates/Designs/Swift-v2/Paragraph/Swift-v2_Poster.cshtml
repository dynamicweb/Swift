@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@functions
{
	private string RenderCustomCSS(IEnumerable<string> decorations)
	{
		var cssClasses = new List<string>();

		foreach (var itemId in decorations)
		{
			var item = Dynamicweb.Content.Services.Items.GetItem("Swift_Css", itemId);
			item.TryGetValue("Class", out object classes);

			if (classes is null)
			{
				continue;
			}

			var cssString = (string)classes;

			if (cssString.StartsWith("["))
			{
				var cssArray = Dynamicweb.Core.Converter.Deserialize<string[]>(cssString);
				cssClasses.AddRange(cssArray);
			}
			else
			{
				cssClasses.Add(cssString.Replace(",", " "));
			}
		}

		return string.Join(" ", cssClasses).Trim();
	}
}

@{
	bool movePageBehind = false;
	bool isFirstPoster = false;
	string movePageBehindClass = string.Empty;

	if (Pageview.Page.PropertyItem != null)
	{
		string headerCssClass = Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"] != null ? Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
		movePageBehind = headerCssClass == "fixed-top" && !Pageview.IsVisualEditorMode ? true : false;
		if (movePageBehind)
		{
			movePageBehindClass = " poster-behind";
			if (!Dynamicweb.Context.Current.Items.Contains("firstPosterIsRendered"))
			{
				isFirstPoster = true;
				Dynamicweb.Context.Current.Items.Add("firstPosterIsRendered", true);
			}
		}
	}

	bool hideTitle = Model.Item?.GetBoolean("HideTitle") ?? false;
	string title = !hideTitle ? Model.Item.GetString("Title", string.Empty) : string.Empty;

	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-1");
	string titleColor = Model.Item.GetString("TitleColor", "text-inherit");
	string titleOpacity = Model.Item.GetString("TitleOpacity", "opacity-100");

	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");
	string subtitleColor = Model.Item.GetString("SubtitleColor", "text-inherit");
	string subtitleOpacity = Model.Item.GetString("SubtitleOpacity", "opacity-100");

	string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
	string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} {titleColor} {titleOpacity} mb-0\">";
	string headingLevelStop = $"</{headingLevel}>";

	//Link generation
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();
	Dynamicweb.Frontend.LinkViewModel link2 = new Dynamicweb.Frontend.LinkViewModel();

	string linkType = Model.Item.GetRawValueString("LinkType", "page");
	string linkType2 = Model.Item.GetRawValueString("LinkType2", "page2");

	if (linkType == "page" && Model.Item.GetLink("ButtonLink") != null)
	{
		link = Model.Item.GetLink("ButtonLink");
	}

	if (linkType2 == "page2" && Model.Item.GetLink("ButtonLink2") != null)
	{
		link2 = Model.Item.GetLink("ButtonLink2");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType2 == "product-group2")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink2");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null && products.Products.Any())
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
			string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
			string productLink = products.Products?.FirstOrDefault()?.GetProductLink(GetPageIdByNavigationTag("Shop"), false);
			productLink = productIds.Count != 1 ? "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&" + productParameter + "=" + string.Join(",", productIds).Trim() : productLink;

			link = new Dynamicweb.Frontend.LinkViewModel()
			{
				Url = productLink,
				IsExternal = false
			};
		}
	}

	if (linkType2 == "product2")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink2");
		IList<string> productIds = new List<string> { };

		if (products != null && products.Products.Any())
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}

			string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
			string productLink = products.Products?.FirstOrDefault()?.GetProductLink(GetPageIdByNavigationTag("Shop"), false);
			productLink = productIds.Count != 1 ? "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&" + productParameter + "=" + string.Join(",", productIds).Trim() : productLink;

			link2 = new Dynamicweb.Frontend.LinkViewModel()
			{
				Url = productLink,
				IsExternal = false
			};
		}
	}

	//Buttons setup
	string target = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "target=\"_blank\"" : string.Empty;
	string rel = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "rel=\"noopener\"" : string.Empty;

	string buttonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
	buttonSize = buttonSize == "small" ? " btn-sm" : buttonSize;
	buttonSize = buttonSize == "regular" ? string.Empty : buttonSize;
	buttonSize = buttonSize == "large" ? " btn-lg" : buttonSize;

	//Button 1
	string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "primary");
	buttonStyle = buttonStyle == "primary" ? " btn-primary" : buttonStyle;
	buttonStyle = buttonStyle == "secondary" ? " btn-secondary" : buttonStyle;
	buttonStyle = buttonStyle == "link" ? " btn-link" : buttonStyle;
	string buttonLabel = Model.Item.GetString("ButtonLabel", string.Empty);
	string stretchedLink = Model.Item.GetRawValueString("StretchedLink", "column-not-clickable");
	string stretchedLinkClass = stretchedLink == "column-clickable" && string.IsNullOrEmpty(link2.Url) && string.IsNullOrEmpty(buttonLabel) ? " stretched-link" : string.Empty;

	//Button 2
	string buttonStyle2 = Model.Item.GetRawValueString("ButtonStyle2", "secondary");
	buttonStyle2 = buttonStyle2 == "primary" ? " btn-primary" : buttonStyle2;
	buttonStyle2 = buttonStyle2 == "secondary" ? " btn-secondary" : buttonStyle2;
	buttonStyle2 = buttonStyle2 == "link" ? " btn-link" : buttonStyle2;
	string buttonLabel2 = Model.Item.GetString("ButtonLabel2", string.Empty);
	string stretchedLink2 = Model.Item.GetRawValueString("StretchedLink2", "column-not-clickable");
	string stretchedLinkClass2 = stretchedLink2 == "column-clickable" && string.IsNullOrEmpty(link.Url) && string.IsNullOrEmpty(buttonLabel2) ? " stretched-link" : string.Empty;

	//Image
	string image = Model.Item.GetString("Image", string.Empty);
	string imgAltText = Model.Item.GetString("PosterAltText", string.Empty);
	string imageFilter = Model.Item.GetRawValueString("ImageFilter", string.Empty) == "filter" ? "image-filter" : string.Empty;

	int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

	var parms = new Dictionary<string, object>();
	parms.Add("columns", Model.GridRowColumnCount);
	parms.Add("alt", imgAltText);
	parms.Add("quality", 90);

	//General layout and styling
	string maxWidth = Model.Item.GetRawValueString("TextReadability", string.Empty) == "max-width-on" ? "mw-75ch d-inline-block" : string.Empty;
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", string.Empty).Trim().ToLower() : string.Empty;
	var decorations = Model.Item?.GetList("CssDecorations")?.GetRawValue().OfType<string>() ?? Enumerable.Empty<string>();
	string css = RenderCustomCSS(decorations);

	string posterPaddingClass = string.Empty;
	string posterPadding = Model.Item.GetRawValueString("ContentPadding", string.Empty);
	posterPaddingClass = posterPadding == "none" ? " p-3 px-xl-3 py-xl-4" : posterPaddingClass;
	posterPaddingClass = posterPadding == "small" ? " p-3 p-xl-4" : posterPaddingClass;
	posterPaddingClass = posterPadding == "large" ? " p-4 p-xl-5" : posterPaddingClass;

	string posterHeightClass = string.Empty;
	string posterHeight = Model.Item.GetRawValueString("PosterHeight", "large");
	posterHeightClass = posterHeight == "small" ? " min-vh-25 min-vh-md-50" : posterHeightClass;
	posterHeightClass = posterHeight == "medium" ? " min-vh-50 min-vh-md-75" : posterHeightClass;
	posterHeightClass = posterHeight == "large" ? " min-vh-75 min-vh-md-100" : posterHeightClass;

	string posterSizeBase = posterHeight.Contains("%") || posterHeight.Contains("0") ? "aspect-ratio" : "height";

	string ratio = Model.Item.GetRawValueString("PosterHeight", string.Empty);
	ratio = ratio != "0" ? ratio : string.Empty;
	string ratioCssClass = ratio != string.Empty ? "ratio" : string.Empty;
	string ratioVariable = ratio != string.Empty ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : string.Empty;

	string layout = Model.Item.GetRawValueString("Layout", "align-middle-center-text-center");

	string alignment = string.Empty;
	switch (layout)
	{
		case "align-top-left-text-left":
			alignment = " text-start justify-content-start align-items-start";
			break;
		case "align-top-center-text-center":
			alignment = " text-center justify-content-start align-items-center";
			break;
		case "align-top-right-text-right":
			alignment = " text-end justify-content-start align-items-end";
			break;
		case "align-middle-left-text-left":
			alignment = " text-start justify-content-center align-items-start";
			break;
		case "align-middle-center-text-center":
			alignment = " text-center justify-content-center align-items-center";
			break;
		case "align-middle-right-text-right":
			alignment = " text-end justify-content-center align-items-end";
			break;
		case "align-bottom-left-text-left":
			alignment = " text-start justify-content-end align-items-start";
			break;
		case "align-bottom-center-text-center":
			alignment = " text-center justify-content-end align-items-center";
			break;
		case "align-bottom-right-text-right":
			alignment = " text-end justify-content-end align-items-end";
			break;
	}

	//Container classes for each size + if there is an image
	string noImageRatioCssClass = posterSizeBase == "aspect-ratio" && string.IsNullOrEmpty(Model.Item.GetString("Image")) ? ratioCssClass : "h-100";
	string noImageRatioVariable = posterSizeBase == "aspect-ratio" && string.IsNullOrEmpty(Model.Item.GetString("Image")) ? ratioVariable : string.Empty;

	string containerCssClasses = posterSizeBase == "height" ? "container-xl px-0" : string.Empty;
	containerCssClasses = posterSizeBase == "aspect-ratio" && string.IsNullOrEmpty(Model.Item.GetString("Image")) ? $"container-xl px-0 {noImageRatioCssClass}" : containerCssClasses;
	containerCssClasses = posterSizeBase == "aspect-ratio" && !string.IsNullOrEmpty(Model.Item.GetString("Image")) ? "position-absolute top-0 bottom-0 end-0 start-0" : containerCssClasses;

	string containerInnerCssClasses = posterSizeBase == "height" ? "position-relative" : string.Empty;
	containerInnerCssClasses = posterSizeBase == "aspect-ratio" && string.IsNullOrEmpty(Model.Item.GetString("Image")) ? "container-xl" : containerInnerCssClasses;
	containerInnerCssClasses = posterSizeBase == "aspect-ratio" && !string.IsNullOrEmpty(Model.Item.GetString("Image")) ? "container-xl" : containerInnerCssClasses;
}

<div class="position-relative@(theme)@(movePageBehindClass) @(css) item_@Model.Item.SystemName.ToLower()">
	<div id="@Model.ID" class="user-select-none position-absolute top-0" style="scroll-margin-top:var(--header-height,150px)"></div>

	@if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
	{
		if (!string.IsNullOrEmpty(image))
		{
			if (posterSizeBase == "height")
			{
				parms.Add("cssClass", "h-100 w-100");

				<div class="position-absolute top-0 bottom-0 end-0 start-0 @(imageFilter)">
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</div>
			}

			if (posterSizeBase == "aspect-ratio")
			{
				if (ratio == string.Empty)
				{
					parms.Add("cssClass", "w-100 mh-100 mw-100");
					parms.Add("fullwidth", true);
				}

				<figure class="m-0 @(imageFilter) @(ratioCssClass)" @ratioVariable>
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure>
			}
		}
	}

	@if (
		!string.IsNullOrEmpty(Model.Item.GetString("Title")) ||
		Model.Item?.GetBoolean("HideTitle") == false ||
		!string.IsNullOrEmpty(Model.Item.GetString("Text")) ||
		link != null && !string.IsNullOrEmpty(link.Url) ||
		link2 != null && !string.IsNullOrEmpty(link2.Url))
	{
		<div class="@containerCssClasses" @ratioVariable>
			<div class="h-100 d-flex flex-column gap-3 gap-md-4@(posterPaddingClass)@(alignment)@(posterHeightClass) @(containerInnerCssClasses)" id="Poster_@Pageview.CurrentParagraph.ID">
				@if (!string.IsNullOrEmpty(title))
				{
					@headingLevelStart
					<span class="@maxWidth">@title</span>
					@headingLevelStop
				}
				@if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
				{
					<p class="@subtitleFontSize @(subtitleColor) @(subtitleOpacity) lead mb-0">
						<span class="@maxWidth">@Model.Item.GetString("Text")</span>
					</p>
				}
				@if (link != null && !string.IsNullOrEmpty(link.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
				{
					if ((link != null && !string.IsNullOrEmpty(link.Url)) && (link2 != null && !string.IsNullOrEmpty(link2.Url))) { 
						@:<div class="d-flex flex-wrap gap-3@(alignment)">
					}

					if (link != null && !string.IsNullOrEmpty(link.Url))
					{
						if (!string.IsNullOrEmpty(buttonLabel))
						{
							<a href="@link.Url" @target @rel class="text-nowrap btn@(buttonStyle)@(buttonSize)@(stretchedLinkClass)">@buttonLabel</a>
						}
						else
						{
							<a href="@link.Url" @target @rel class="@(!string.IsNullOrEmpty(stretchedLinkClass) ? "position-absolute top-0 bottom-0 start-0 end-0" : stretchedLinkClass)">
								<span class="visually-hidden">@Model.Item.GetString("Title")</span>
							</a>
						}
					}

					if (link2 != null && !string.IsNullOrEmpty(link2.Url))
					{
						if (!string.IsNullOrEmpty(buttonLabel2))
						{
							<a href="@link2.Url" @target @rel class="text-nowrap btn@(buttonStyle2)@(buttonSize)@(stretchedLinkClass2)">@buttonLabel2</a>
						}
						else
						{
							<a href="@link2.Url" @target @rel class="@(!string.IsNullOrEmpty(stretchedLinkClass2) ? "position-absolute top-0 bottom-0 start-0 end-0" : stretchedLinkClass2)">
								<span class="visually-hidden">@Model.Item.GetString("Title")</span>
							</a>
						}
					}

					if ((link != null && !string.IsNullOrEmpty(link.Url)) && (link2 != null && !string.IsNullOrEmpty(link2.Url))) { 
						@:</div>
					}
				}
			</div>
		</div>
	}
</div>

@if (movePageBehind && isFirstPoster)
{
	<script>
		['resize', 'load'].forEach(function (e) {
			window.addEventListener(e, () => swift.Scroll.setContentPosition());
		});
	</script>
}
