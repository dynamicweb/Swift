@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend
@{
    bool isFirst = true;
}
@if (Model.Item.TryGetItems("Items", out IList<Dynamicweb.Frontend.ItemViewModel> items)) {
    <div id="Slider_@Model.ID" class="
        swiffy-slider 
        slider-nav-round
        slider-nav-sm
        slider-nav-page
        slider-indicators-sm
        slider-indicators-outside
        slider-indicators-round" 
        style="visibility:hidden;opacity:0;">

        <ul class="slider-container pb-4" style="--swiffy-slider-item-width: 100%;">
            @foreach (var item in items)
            {
                isFirst = false;
                <li>
                    <div class="card shadow h-100 border-0" style="--bs-body-color: white;--bs-heading-color: white;min-height:55vh;">
                        @if (item.TryGetImageFile("Image", out ImageFileViewModel image)) {
                            <img class="card-img object-fit-cover h-100 position-absolute" src="@image.Path" style="object-position: @image.GetFocalPointPercentage()" />                            
                        }
                        <div class="card-img-overlay d-flex" style="background-image: linear-gradient(to top, black, transparent);padding: var(--swift-content-padding);">
                            <div swift-container class="card-text mt-auto">
                                <div class="mb-0-last-child" swift-text>
                                    @if (item.TryGetString("Title", out string title)) {
                                        @title
                                    }
                                    @if (item.TryGetString("Subtitle", out string subtitle)) {
                                        @subtitle
                                    }
                                    @if (item.TryGetString("Text", out string text)) {
                                        @text
                                    }
                                </div>
                                @if (item.TryGetButton("Button", out ButtonViewModel button)) {
                                    <a href="@button.Link.Url" class="btn btn-@button.Style align-self-start mt-4" data-dw-button="@button.Style">@button.Label</a>
                                }
                            </div>
                        </div>
                    </div>
                </li>
            }
        </ul>

        <button type="button" title="@Translate("Previous slide")" class="slider-nav" style="z-index:1;">
            <span class="visually-hidden">@Translate("Previous slide")</span>
        </button>
        <button type="button" title="@Translate("Next slide")" class="slider-nav slider-nav-next" style="z-index:1;">
            <span class="visually-hidden">@Translate("Next slide")</span>
        </button>
        
        <div class="slider-indicators mb-2">
            @{
                string? isActive = "active";
                int slideCount = 1;
            }

            @foreach (var item in items)
            {
                <button class="@isActive" type="button" title='@Translate("Go to slide") @slideCount'>
                    <span class="visually-hidden">@Translate("Go to slide") @slideCount</span>
                </button>

                slideCount++;
                isActive = null;
            }
        </div>
    </div>

    <script type="module">
        import {swiffyslider} from '/Files/Templates/Designs/Swift-v2/Assets/lib/swiffy-slider/dist/js/swiffy-slider.esm.min.js';
        window.swiffyslider = swiffyslider;
        swift.AssetLoader.Load('/Files/Templates/Designs/Swift-v2/Assets/lib/swiffy-slider/dist/css/swiffy-slider.min.css', 'css');
        const slider = document.querySelector('#Slider_@Model.ID');
        window.swiffyslider.initSlider(slider);
        slider.style.opacity = 1;
        slider.style.visibility = "visible";
    </script>
}
