@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@if (Model.Item.TryGetGeolocation("DefaultMapCenter", out var defaultMapCenter)) {
	var defaultLat = defaultMapCenter.Latitude.ToString().Replace(",", ".");
	var defaultLng = defaultMapCenter.Longitude.ToString().Replace(",", ".");

	if (defaultLat != "0.000000" && defaultLng != "0.000000") {
		if (Pageview.AreaSettings.TryGetString("Google_APIKey", out string apiKey)) {
			var locationList = Model.Item.GetUsers("UserGroup");
			string jsonLocationList = System.Text.Json.JsonSerializer.Serialize(locationList);
			string iconPath = "/Files/Images/Icons/";

			int initialZoomLevel = 4;
			if (Model.Item.TryGetString("InitialZoomLevel", out string zoomlevel))
			{
				initialZoomLevel = Convert.ToInt32(zoomlevel);
			}

			string regionCode = "DK";
			if (Model.Item.TryGetString("RegionCode", out string region))
			{
				regionCode = region;
			}

			<div class="grid position-relative">
				<div class="g-col-12 g-col-lg-8 order-1" id="MapHeader">
					@if (Model.Item.TryGetString("Title", out string title))
					{
						@title
					}
				</div>

				<div class="g-col-12 g-col-lg-4 order-2 order-lg-2 position-relative js-map-search-column">
					<form class="d-flex align-items-center w-100" id="MapSearch">
						<span class="position-absolute top-0 icon-2 px-3 d-flex align-items-center h-100 search-icon">
							@ReadFile(iconPath + "magnifying-glass.svg")
						</span>

						<input type="text" class="form-control rounded-pill py-2 ps-5 pe-3" placeholder="@Translate("Enter city, state or zip")" aria-label="@Translate("Enter city, state or zip")">
						<button type="submit" class="d-none" id="MapSearchButton">@Translate("Search")</button>
					</form>
				</div>

				<div class="g-col-12 g-col-lg-8 order-1 order-lg-4 js-map-column">
					<div class="map" id="Map"></div>
				</div>

				@if (locationList.Count() > 1) {
					<div class="g-col-12 g-col-lg-4 order-2 order-lg-3 js-locations-list-column">
						<div class="locations-list">
							<div class="list-group" id="LocationsList" aria-labelledby="MapHeader"></div>
						</div>
					</div>
				} else if (Model.Item.TryGetString("Title", out string title2)) {
					<div class="g-col-12 order-5 order-lg-3">
						@title2
					</div>
				}
			</div>

			<script type="module">
				@if (!Model.Item.GetBoolean("UseDefaultGoogleMapsStyling")) {
					<text>
						var mapIcon = {
								url: "@(iconPath)location-pin-solid-full.svg"
						}

						var mapStyle = [
							{
								"featureType": "administrative.land_parcel",
								"elementType": "labels",
								"stylers": [
									{
										"visibility": "off"
									}
								]
							},
							{
								"featureType": "landscape.man_made",
								"elementType": "geometry.fill",
								"stylers": [
									{
										"color": "#b0afb6"
									}
								]
							},
							{
								"featureType": "landscape.natural",
								"elementType": "geometry.fill",
								"stylers": [
									{
										"color": "#d7d7da"
									}
								]
							},
							{
								"featureType": "landscape.natural.terrain",
								"elementType": "geometry.fill",
								"stylers": [
									{
										"color": "#7ba78b"
									}
								]
							},
							{
								"featureType": "poi",
								"elementType": "labels.text",
								"stylers": [
									{
										"visibility": "off"
									}
								]
								},
							{
								"featureType": "poi",
								"elementType": "geometry",
								"stylers": [
									{
										"color": "#659577"
									}
								]
							},
							{
								"featureType": "poi.business",
								"stylers": [
									{
										"visibility": "off"
									}
								]
							},
							{
								"featureType": "poi.park",
								"elementType": "geometry.fill",
								"stylers": [
									{
										"color": "#659577"
									}
								]
							},
							{
								"featureType": "road",
								"elementType": "labels.icon",
								"stylers": [
									{
										"visibility": "off"
									}
								]
							},
							{
								"featureType": "road.highway",
								"elementType": "geometry.fill",
								"stylers": [
									{
										"color": "#f5f5f5"
									}
								]
							},
							{
								"featureType": "road.highway",
								"elementType": "geometry.stroke",
								"stylers": [
									{
										"color": "#f0f0f0"
									}
								]
							},
							{
								"featureType": "road.local",
								"elementType": "labels",
								"stylers": [
									{
										"visibility": "off"
									}
								]
							},
							{
								"featureType": "transit",
								"stylers": [
									{
										"visibility": "off"
									}
								]
							},
							{
								"featureType": "water",
								"elementType": "geometry.fill",
								"stylers": [
									{
										"color": "#8ea5c2"
									}
								]
							}
						];
					</text>
				} else {
					<text>
						var mapIcon = {};

						var mapStyle = [{
							featureType: 'poi',
							elementType: 'labels.icon',
							stylers: [
								{
									visibility: 'off'
								}
							]
						}];
					</text>
				}

				var locations = @jsonLocationList;

				var mapSettings = {
					locations: locations,
					mapIcon: mapIcon,
					initialZoomLevel: @initialZoomLevel,
					defaultLat: @defaultLat,
					defaultLng: @defaultLng,
					regionCode: "@(regionCode)",
					listItemLabel: "@Translate("View location")",
					directionsLabel: "@Translate("Directions")",
					noLocationsFoundLabel: "@Translate("No options available in the selected area")"
				};

				function initMap() {
					swift.LocationsMap.init(mapSettings);
				}

				window.initMap = initMap;
			</script>

			<template id="location-item-template">
				<button type="button" data-swift-loc="button" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
					<div class="location-info">
						<h6 data-swift-loc="Name" class="mb-1"></h6>
						<div class="fs-7" data-swift-loc="Address"></div>
						<div class="fs-7">
							<span data-swift-loc="Zip"></span>
							<span data-swift-loc="City"></span>
						</div>
						<div class="fs-7" data-swift-loc="Country"></div>
					</div>
					<a href="#" target="_blank" rel="noopener noreferrer" data-swift-loc="DirectionsUrl" aria-label="@Translate("Get directions")" class="directions-icon" style="flex-shrink: 0; margin-left: 12px;">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-corner-up-right">
							<polyline points="15 14 20 9 15 4"></polyline>
							<path d="M4 20v-7a4 4 0 0 1 4-4h12"></path>
						</svg>
					</a>
				</button>
			</template>

			<template id="info-window-template">
				<div id="content">
					<div id="bodyContent">
						<h6 class="mb-0">@Translate("Address")</h6>
						<p data-swift-info="AddressFull"></p>
						<h6 class="mb-0">@Translate("Contact")</h6>
						<div>
							<span>@Translate("Phone"): </span><span data-swift-info="Phone"></span>
						</div>
						<div>
							<span>@Translate("Email"): </span><span data-swift-info="Email"></span>
						</div>
						<div class="mt-3">
							<a href="#" target="_blank" rel="noopener noreferrer" data-swift-info="DirectionsUrl" aria-label="@Translate("Get directions")">
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-corner-up-right"><polyline points="15 14 20 9 15 4"></polyline><path d="M4 20v-7a4 4 0 0 1 4-4h12"></path></svg>
							</a>
						</div>
					</div>
				</div>
			</template>

			<script async src="https://maps.googleapis.com/maps/api/js?key=@(apiKey)&loading=async&callback=initMap&libraries=marker"></script>
		} 
		else 
		{
			<div class="alert alert-info" role="alert">
				@Translate("Google maps API key is missing")
			</div>
		}
	} else {
		<div class="alert alert-info" role="alert">
			@Translate("The map is not properly configured")
		</div>
	}
} else {
	<div class="alert alert-info" role="alert">
		@Translate("The map is not properly configured")
	</div>
}
