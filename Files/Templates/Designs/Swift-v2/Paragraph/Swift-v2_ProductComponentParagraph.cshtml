@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{ 
	int itemSourcePageId = Convert.ToInt32(Model.Item.GetRawValueString("ComponentSource", "0"));

	var pageService = new Dynamicweb.Content.PageService();
	itemSourcePageId = itemSourcePageId > 0 && pageService.GetPageOrLanguage(itemSourcePageId, Pageview.AreaID) != null ? pageService.GetPageOrLanguage(itemSourcePageId, Pageview.AreaID).ID : itemSourcePageId;
}

@if (itemSourcePageId != 0) {
	var page = Dynamicweb.Content.Services.Pages.GetPage(itemSourcePageId);

	if (page != null) { 
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(page);
		string itemTheme = !string.IsNullOrWhiteSpace(pageViewModel.Item.GetRawValueString("Theme")) ? " theme " + pageViewModel.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;

		string contentPadding = pageViewModel.Item.GetRawValueString("ContentPadding", "");
		contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
		contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
		contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;
		
		string layout = Model.Item.GetRawValueString("Layout", "top");
		switch (layout)
		{
			case "top":
			case "alignLeftMiddle":
				layout = "";
				break;
			case "center":
			case "alignLeft":
				layout = "d-flex align-items-center text-start";
				break;
		}

		<div class="@contentPadding @itemTheme @(layout) h-100 item_@Model.Item.SystemName.ToLower()">
			<div class="w-100">
				@RenderGrid(itemSourcePageId)
			</div>
		</div>
	} else if (Pageview.IsVisualEditorMode) { 
		<div class="alert alert-dark m-0" role="alert">
			<span>@Translate("The selected component does not exist anymore")</span>
		</div>
	}
} else if (Pageview.IsVisualEditorMode) { 
	<div class="alert alert-dark m-0" role="alert">
		<span>@Translate("Product component: The component will be shown here, if any")</span>
	</div>
}
