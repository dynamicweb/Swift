@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	ProductViewModel product = null;
	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		product = (ProductViewModel)Dynamicweb.Context.Current.Items["ProductDetails"];
	}
	else if (Pageview.Page.Item["DummyProduct"] != null && Pageview.IsVisualEditorMode)
	{
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel productList = pageViewModel.Item.GetValue("DummyProduct") != null ? pageViewModel.Item.GetValue("DummyProduct") as ProductListViewModel : new ProductListViewModel();

		if (productList?.Products is object)
		{
			product = productList.Products[0];
		}
	}
}

@if (product is object)
{
	bool hideTitle = Model.Item.GetBoolean("HideTitle");
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-4");
	string maxWidth = Model.Item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? "mw-75ch d-inline-block" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	if (!string.IsNullOrEmpty(product.LongDescription))
	{
		<div class="h-100 item_@Model.Item.SystemName.ToLower()">
			@if (!hideTitle && !string.IsNullOrEmpty(Model.Item.GetString("Title")))
			{
				<div class="text-start pb-2 pb-lg-4">
					<h2 class="@titleFontSize @(maxWidth)">@Model.Item.GetString("Title")</h2>
				</div>
			}
			<div class="@(maxWidth)" itemprop="description">
				@product.LongDescription
			</div>
		</div>
	}
	else if (Pageview.IsVisualEditorMode)
	{
		<div class="alert alert-dark m-0">@Translate("Long description will be shown here, if any")</div>
	}
}
else if (Pageview.IsVisualEditorMode)
{
	<div class="alert alert-dark m-0">@Translate("Long description will be shown here, if any")</div>
}
