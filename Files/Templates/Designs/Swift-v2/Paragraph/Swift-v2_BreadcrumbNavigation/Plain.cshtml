@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation

@{
    var navigationSettings = new NavigationSettings();
    navigationSettings.IncludeFoldersAndHidden = true;
    navigationSettings.ExpandMode = ExpandMode.PathOnly;

    NavigationTreeViewModel navigationModel = Navigation.GetNavigationViewModel(navigationSettings);
}

@if (navigationModel.Nodes.Count() > 0)
{
	string menuId = "menu_breadcrumb";
	bool showProductInBreadcrumb = Model.Item.GetBoolean("ShowProductInBreadcrumb");
	var breadCrumbNavigationTree = new Stack<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel>(navigationModel.Nodes);

	<ol class="breadcrumb small mb-0 @menuId">
		@while (breadCrumbNavigationTree.Count > 0)
		{
			var currentNode = breadCrumbNavigationTree.Pop();
			if (currentNode.ShowInBreadcrumb)
			{
				if (!string.IsNullOrEmpty(currentNode.Link))
				{
					<li class="breadcrumb-item">
						<a href="@currentNode.Link">
							@currentNode.Name
						</a>
					</li>
				}
				else
				{
					<li class="breadcrumb-item">
						@currentNode.Name
					</li>
				}
			}
			foreach (var nextNode in currentNode.Nodes)
			{
				breadCrumbNavigationTree.Push(nextNode);
			}
		}

		@if (showProductInBreadcrumb && !string.IsNullOrEmpty(Dynamicweb.Context.Current?.Request.QueryString["ProductID"]))
		{
			string productid = Dynamicweb.Context.Current?.Request.QueryString["ProductID"] ?? string.Empty;
			string variantid = Dynamicweb.Context.Current?.Request.QueryString["VariantID"] ?? string.Empty;
			var product = Dynamicweb.Ecommerce.Services.Products.GetProductById(productid, variantid, Dynamicweb.Ecommerce.Common.Context.LanguageID);
			if (product != null)
			{
				<li class="breadcrumb-item">
					@product.Name
				</li>
			}
		}
	</ol>
}
else if (Pageview.IsVisualEditorMode)
{
	<div class="alert alert-dark m-0" role="alert">
		<span>@Translate("Breadcrumb navigation: The navigation will be shown here, if any")</span>
	</div>
}
