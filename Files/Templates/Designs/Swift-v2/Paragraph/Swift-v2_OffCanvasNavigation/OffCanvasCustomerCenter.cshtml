@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Frontend.Navigation
@using System.IO
@using Dynamicweb.Ecommerce.Common
@using Dynamicweb.Security.UserManagement

@{
	string offcanvasDirection = Model.Item.GetRawValueString("OffCanvasDirection", "start");
}

<div class="nav-wrapper d-flex">

	<button class="btn lh-1 p-2 text-reset" type="button" data-dw-button data-bs-toggle="offcanvas" data-bs-target="#offcanvas_@Model.ID" aria-controls="offcanvas_@Model.ID" aria-label="@Translate("Navigation open button")">
		<span class="d-flex gap-2 align-items-center">			
			@{
				if (Model.Item.TryGetString("Icon", out string icon))
				{
					if (icon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
					{
						<span class="icon-3 pe-none">
							@ReadFile(icon)
						</span>
					}
					else
					{
						<span class="mx-auto d-block pe-none" width="24" height="24">
							<img loading="lazy" decoding="async" src="/Admin/Public/GetImage.ashx?width=24&height=24&image=@(icon)&format=webp" alt="@Model.ID">
						</span>
					}
				}
				if (Model.Item.TryGetString("Title", out string title))
				{
					<span class="text-nowrap">@title</span>
				}
			}			
		</span>
	</button>

	<aside class="offcanvas offcanvas-@offcanvasDirection border-0" tabindex="-1" id="offcanvas_@Model.ID" data-dw-colorscheme="light">
		
		<div class="offcanvas-header position-relative" style="box-shadow: 0 10px 10px -12px var(--bs-gray-300);">
			
			@if (Pageview?.User is not null)
			{
				@RenderPartial("CustomerCenter/CustomerCenterUserOffcanvasHeader.cshtml", ContentViewModelFactory.CreateUserViewModel(Pageview?.User))
			}
			else
			{
				<div class="h5 m-0">@(Model.Item.GetString("Title", string.Empty))</div>
			}

			<button type="button" class="btn btn-close" data-dw-button data-bs-dismiss="offcanvas" aria-label="@Translate("Close navigation")"></button>

		</div>

		<div class="offcanvas-body position-relative pt-0 vstack">

			@* mainNavigation *@
			@{
				var mainNavigationSettings = new NavigationSettings();
				if (Model.Item.TryGetLink("MainNavigationRoot", out var mainNavigationRoot))
				{
					mainNavigationSettings.RootPageId = mainNavigationRoot.PageId;
					mainNavigationSettings.IncludeFoldersAndHidden = true;
				}
				mainNavigationSettings.StartLevel = 1;
				mainNavigationSettings.StopLevel = 5;
    			mainNavigationSettings.ExpandMode = ExpandMode.All;

				var mainNav = Navigation.GetNavigationViewModel(mainNavigationSettings);
				
				if(mainNav.Nodes.Any())
				{
					<nav class="list-group gap-1 fs-7 rounded-0 pt-1 mt-2" role="navigation" style="--bs-list-group-border-width: 0; --bs-list-group-action-hover-bg: rgba(var(--dw-color-foreground-rgb), .05); --bs-list-group-action-active-bg: rgba(var(--dw-color-foreground-rgb), .1); --bs-list-group-active-bg: rgba(var(--dw-color-foreground-rgb), .08);">
						@foreach (var node in mainNav.Nodes)
						{
							if (node.ShowInMenu){
								await RenderNavItem(node);
							}
						}
					</nav>
				}

			}
			@* secondaryNavigation *@
			@if (Model.Item.TryGetLink("SecondaryNavigationRoot", out var secondaryNavigationRoot)) {	
				var secondaryNavigationSettings = new NavigationSettings();
				secondaryNavigationSettings.RootPageId = secondaryNavigationRoot.PageId;
				secondaryNavigationSettings.StartLevel = 1;
				secondaryNavigationSettings.StopLevel = 10;
				secondaryNavigationSettings.IncludeFoldersAndHidden = true;
				secondaryNavigationSettings.ExpandMode = ExpandMode.All;
				var secondNav = Navigation.GetNavigationViewModel(secondaryNavigationSettings);

				if(secondNav.Nodes.Any())
				{
					<nav class="list-group gap-1 fs-7 pt-1 mt-3 p-3 border" role="navigation" style="--bs-list-group-border-width: 0; --bs-list-group-action-hover-bg: rgba(var(--dw-color-foreground-rgb), .05); --bs-list-group-action-active-bg: rgba(var(--dw-color-foreground-rgb), .1); --bs-list-group-active-bg: rgba(var(--dw-color-foreground-rgb), .08);">
						@foreach (var node in secondNav.Nodes)
						{
							if (node.ShowInMenu){
								await RenderNavItem(node);
							}
						}
					</nav>
				}
			}
			
			@if (Pageview.User != null)
			{			
				<nav class="hstack gap-2 mt-auto" role="navigation">

					@if (UserContext.Current.ImpersonatingUser != null)
					{
						<a href="Default.aspx?ID=@(Pageview.ID)&DwExtranetRemoveSecondaryUser=1" class="btn btn-outline-secondary hstack fs-8 py-2 px-3" data-dw-button="outline-secondary">
							<span class="icon-2 me-2">@ReadFile("/Files/Images/Icons/arrows-repeat.svg")</span>
							<span>
								@Translate("Switch back to") @(UserContext.Current.ImpersonatingUser.Name)
							</span>
						</a>
					}
					<a href="/Admin/Public/ExtranetLogoff.aspx?redirect=no" class="btn btn-secondary hstack fs-8 py-2 px-3" data-dw-button="secondary">
						<span class="icon-2 me-2">@ReadFile("/Files/Images/Icons/arrow-right-from-bracket.svg")</span>
						@Translate("Sign out")
					</a>
				</nav>
			}

		</div>
	</aside>
</div>

@{
	async Task RenderNavItem(NavigationTreeNodeViewModel node)
	{
		var pageIcon = string.Empty;
		var nodePage = Dynamicweb.Content.Services.Pages.GetPage(node.PageId);
		if (nodePage?.PropertyItem?.TryGetValue("Icon", out object pageIconValue) ?? false)
		{
			pageIcon = Dynamicweb.Core.Converter.ToString(pageIconValue);
		}
		bool hasNodes = node.Nodes.Any();

		if (node.IsClickable)
		{
			<div class="list-group-item list-group-item-action hstack rounded @(node.IsActive || node.InPath ? "active" : null)" style="@(node.IsActive || node.InPath ? "z-index:initial;" : null)" x-data="{ open: @(node.IsActive || node.InPath ? "true" : "false") }">

				<a class="hstack flex-fill text-decoration-none" aria-current="@(node.IsActive)" href="@(node.Link)">
					@if (pageIcon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
					{
						<span class="icon-2 me-2">@ReadFile(pageIcon)</span>
					}
					<span>@node.Name</span>
				</a>
				
				@if (hasNodes)
				{	
					<button class="btn btn-link hstack p-2 position-absolute end-0 top-50 translate-middle-y" data-dw-button type="button" @@click="open = ! open">
						<span class="icon-2">@ReadFile("/Files/Images/Icons/chevron-right.svg")</span>
					</button>

					<aside class="offcanvas offcanvas-@offcanvasDirection border-0" :style="open && {transform: 'none', visibility: 'visible'}" tabindex="-1" data-dw-colorscheme="light">
						<div class="offcanvas-header hstack justify-content-between">
							<button type="button" class="btn btn-link hstack p-2" data-dw-button @@click="open = ! open">
								<span class="icon-2">@ReadFile("/Files/Images/Icons/chevron-left.svg")</span>
							</button>
							<div class="fw-bold">@(node.Name)</div>	
							<button type="button" class="btn btn-close ms-0" data-bs-dismiss="offcanvas" data-bs-target="#offcanvas_@(Model.ID)" aria-label="@Translate("Navigation close button")"></button>
						</div>
						<div class="offcanvas-body pt-0">
							
							<nav class="list-group gap-1 fs-7 rounded-0 pt-1" role="navigation" style="--bs-list-group-border-width: 0; --bs-list-group-action-hover-bg: rgba(var(--dw-color-foreground-rgb), .05); --bs-list-group-action-active-bg: rgba(var(--dw-color-foreground-rgb), .1); --bs-list-group-active-bg: rgba(var(--dw-color-foreground-rgb), .08);">
								@foreach (var subnode in node.Nodes)
								{
									await RenderNavItem(subnode);
								}           
							</nav>
						</div>
					</aside>
				}
			</div>
		}
		else
		{
			<h6 class="fs-8 mt-3 mb-2  text-body text-opacity-50 text-uppercase">@node.Name</h6>
			
			@foreach (var subnode in node.Nodes)
			{
				await RenderNavItem(subnode);
			}
		}
	}
}