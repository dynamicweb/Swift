@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using Dynamicweb
@using Dynamicweb.Ecommerce.Orders
@using System.IO

<nav class="nav flex-nowrap offcanvas-utility-navigation pe-2" aria-label="@Translate("Utility navigation")">
	@foreach (var node in Model.Nodes)
	{
		var nodePage = Dynamicweb.Content.Services.Pages.GetPage(node.PageId);
		string pageType = nodePage.ItemType;
		string icon = string.Empty;
		if (nodePage.PropertyItem is object)
		{
			if(nodePage.PropertyItem.TryGetValue("Icon", out object pageIconValue))
			{
				icon = Dynamicweb.Core.Converter.ToString(pageIconValue);
			}
		}
		var inPathClass = node.InPath ? "in-path" : string.Empty;
		var activeClass = node.IsActive ? "active fw-bold" : string.Empty;

		<div class="nav-item@(node.IsActive ? " active" : string.Empty)">
			@if (pageType != "Swift-v2_Preferences")
			{
				if (node.IsClickable)
				{
					@:<a class="nav-link p-2 @(activeClass)" href="@node.Link">
				}
				else
				{
					@:<span class="nav-link p-2">
				}

				@if (icon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
				{
					<span class="icon-3 pe-none">@ReadFile(icon)</span>
				}

				if (node.IsClickable)
				{
					@:</a>
				}
				else
				{
					@:</span>
				}
			}
			else
			{
				List<string> preferences = new List<string>();
				bool countrySelector = nodePage.Item?["CountrySelector"] != null ? Convert.ToBoolean(nodePage.Item["CountrySelector"].ToString()) : false;
				bool languageSelector = nodePage.Item?["LanguageSelector"] != null ? Convert.ToBoolean(nodePage.Item["LanguageSelector"].ToString()) : false;
				bool currencySelector = nodePage.Item?["CurrencySelector"] != null ? Convert.ToBoolean(nodePage.Item["CurrencySelector"].ToString()) : false;
				string name = Translate("Preferences");

				if (countrySelector)
				{
					preferences.Add(Dynamicweb.Ecommerce.Common.Context.Country.Code2);
				}

				if (languageSelector)
				{
					bool hideIcon = nodePage.Item?["HideIcon"] != null ? Convert.ToBoolean(nodePage.Item["HideIcon"].ToString()) : false;

					if (!hideIcon)
					{
						icon = $"/Files/Images/Icons/Flags/{Pageview.Area.CultureInfo.Name.ToLower()}.svg";
					}
				}

				if (currencySelector)
				{
					string currencyName = Dynamicweb.Ecommerce.Common.Context.Currency.Code;
					preferences.Add(currencyName);
				}

				if (preferences.Count != 0)
				{
					name = (string.Join(" / ", preferences.Select(x => x.ToString()).ToArray()));
				}

				string groupId = Dynamicweb.Context.Current.Request["GroupID"] != null ? Dynamicweb.Context.Current.Request["GroupID"].ToString() : string.Empty;
				string productId = Dynamicweb.Context.Current.Request["ProductID"] != null ? Dynamicweb.Context.Current.Request["ProductID"].ToString() : string.Empty;
				string variantId = Dynamicweb.Context.Current.Request["VariantID"] != null ? Dynamicweb.Context.Current.Request["VariantID"].ToString() : string.Empty;

				<form action="/Default.aspx?ID=@node.PageId" data-response-target-element="PreferencesModalContent" data-layout-template="Swift-v2_Preferences.cshtml" data-preloader="inline">
					<input type="hidden" name="Layout" value="modal">
					<input type="hidden" name="CurrentPageID" value="@Pageview.ID">
					<input type="hidden" name="GroupID" value="@groupId">
					<input type="hidden" name="ProductID" value="@productId">
					<input type="hidden" name="VariantID" value="@variantId">
					<button type="button" onclick="swift.PageUpdater.Update(event)" class="nav-link position-relative d-flex flex-row gap-2 text-reset bg-transparent border-0 swift_open-preferences-modal @activeClass @inPathClass" @(node.IsActive ? "aria-current='page'" : string.Empty) data-bs-toggle="modal" data-bs-target="#PreferencesModal">
						@if (icon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
						{
							<span class="icon-2">
								@ReadFile(icon)
							</span>
						}
						<span>@name</span>
					</button>
				</form>
			}
		</div>
	}
</nav>
