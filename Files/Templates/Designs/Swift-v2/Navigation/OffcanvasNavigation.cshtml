@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using System.IO
@using System.Text.RegularExpressions
@using Dynamicweb
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string navType = Model?.Parameters["NavType"] != null ? Model.Parameters["NavType"].ToString() : "first-nav";
	string menuId = Model.Parameters.ContainsKey("menu-id") ? $"menu_{Model.Parameters["menu-id"].ToString().ToLower()}" : string.Empty;

	string productGroupImageShape = Model.Parameters.ContainsKey("ProductGroupImageShape") ? Model.Parameters["ProductGroupImageShape"].ToString() : string.Empty;
	bool showProductGroupImage = Model.Parameters.ContainsKey("ShowProductGroupImage") ? Convert.ToBoolean(Model.Parameters["ShowProductGroupImage"].ToString()) : false;
	string productGroupPromotionImageTheme = Model.Parameters.ContainsKey("ProductGroupPromotionImageTheme") ? Model.Parameters["ProductGroupPromotionImageTheme"].ToString().ToLower() : string.Empty;
	bool showProductGroupPromotionImage = Model.Parameters.ContainsKey("ShowProductGroupPromotionImage") ? Convert.ToBoolean(Model.Parameters["ShowProductGroupPromotionImage"].ToString()) : false;

	string ratio = Model.Parameters.ContainsKey("ImageAspectRatio") ? Model.Parameters["ImageAspectRatio"].ToString() : string.Empty;
	ratio = ratio != "0" ? ratio : string.Empty;

	var parameters = new Dictionary<string, object>();
	parameters.Add("ProductGroupImageShape", productGroupImageShape);
	parameters.Add("ShowProductGroupImage", showProductGroupImage);
	parameters.Add("ProductGroupPromotionImageTheme", productGroupPromotionImageTheme);
	parameters.Add("ShowProductGroupPromotionImage", showProductGroupPromotionImage);
	parameters.Add("Ratio", ratio);
}

<div class="nav @navType flex-column h-auto w-100 left-0 top-0 offcanvas-navigation @menuId">
	@foreach (var node in Model.Nodes)
	{
		@RenderPartial("Navigation/OffCanvasNavigation/NavItem.cshtml", node, parameters)
	}
</div>
