@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using System.IO
@using System.Text.RegularExpressions
@using Dynamicweb
@using Dynamicweb.Ecommerce.ProductCatalog

@functions {

	public string GetImagePathSanitized(string imagePath) {
		if (!imagePath.StartsWith("/Files", StringComparison.OrdinalIgnoreCase))
		{
			if (!imagePath.StartsWith("Files/", StringComparison.OrdinalIgnoreCase))
			{
				imagePath = $"/Files/Images/{imagePath}";
			}
		}
		return imagePath;
	}
}

<nav class="nav flex-column h-auto w-100 left-0 top-0 offcanvas-navigation" data-swift-nav="@(Model.Parameters["NavType"])">
	@foreach (var node in Model.Nodes)
	{
		await NavItemHelper(node);
	}
</nav>

@{ 
	async Task NavItemHelper(Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel currentNode)
	{
		bool showProductGroupImage = Model.Parameters.ContainsKey("ShowProductGroupImage") ? Convert.ToBoolean(Model.Parameters["ShowProductGroupImage"].ToString()) : false;
		bool showProductGroupPromotionImage = Model.Parameters.ContainsKey("ShowProductGroupPromotionImage") ? Convert.ToBoolean(Model.Parameters["ShowProductGroupPromotionImage"].ToString()) : false;
		string arrowLeftIconPath = "/Files/Images/Icons/chevron-left.svg";
		string arrowRightIconPath = "/Files/Images/Icons/chevron-right.svg";
		var page = Dynamicweb.Content.Services.Pages.GetPage(currentNode.PageId);
		var paragraphId = Pageview.CurrentParagraph.ID;
		string groupId = !string.IsNullOrEmpty(currentNode.GroupId) ? currentNode.GroupId : string.Empty;
		string? productId = Dynamicweb.Context.Current?.Request["ProductID"] != null ? Dynamicweb.Context.Current?.Request["ProductID"]?.ToString() : string.Empty;
		string? variantId = Dynamicweb.Context.Current?.Request["VariantID"] != null ? Dynamicweb.Context.Current?.Request["VariantID"]?.ToString() : string.Empty;
		string productGroupImageSize = "40";
		Regex reg = new Regex(@"\(([^\)]+)\)");
		var hasChildren = currentNode.Nodes.Count() > 0;
		var nodeId = !string.IsNullOrEmpty(currentNode.GroupId) ? currentNode.GroupId : currentNode.PageId.ToString();
		var inPathChecked = currentNode.InPath ? "checked" : string.Empty;
		var inPathClass = currentNode.InPath ? " in-path" : string.Empty;
		var activeClass = currentNode.IsActive ? " active fw-bold" : string.Empty;
		var hasProductGroup = !string.IsNullOrEmpty(currentNode.GetProductGroup().Id);
		
		if (currentNode.ShowInMenu)
		{
			<div class="nav-item d-flex align-items-center w-100 py-1">
				@if (page.ItemType != "Swift-v2_Preferences")
				{
					if (currentNode.IsClickable)
					{
						<a class="nav-link position-relative d-flex align-items-center gap-3 flex-grow-1@(activeClass)@(inPathClass)" @(currentNode.IsActive ? "aria-current='page'" : string.Empty) href="@currentNode.Link" id="@nodeId">						
							
							@if (hasProductGroup)
							{
								var group = currentNode.GetProductGroup();
								if (showProductGroupImage)
								{
									if (group.GroupFields.Count > 0)
									{
										foreach (var field in group.GroupFields)
										{
											if (field.SystemName == "ProductGroupNavigationImage")
											{											
												if (field.ToString().EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
												{
													<span class="icon-auto" style="height: @(productGroupImageSize)px; width: @(productGroupImageSize)px;">
														@ReadFile(field.ToString())
													</span>
												}
												else
												{	
													var imagePath = "/Admin/Public/GetImage.ashx?Image=" + GetImagePathSanitized(field.ToString()) + "&Width=" + productGroupImageSize + "&Height=" + productGroupImageSize + "&crop=0";
													<img loading="lazy" alt="@group.Name" width="@productGroupImageSize" height="@productGroupImageSize" src="@imagePath">
												}
											}
										}
									}
								}
							}
							<span class="flex-grow-1">
								@currentNode.Name
							</span>
						</a>

						if (hasChildren)
						{
							<label class="nav-link position-relative" aria-label="Unfold @currentNode.Name" for="nav_@(paragraphId)_@(nodeId)">
								<span class="btn btn-secondary p-1 icon-2" data-dw-button="secondary">@ReadFile(arrowRightIconPath)</span>
							</label>
						}
					}
					else
					{
						<label class="nav-link position-relative d-flex align-items-center gap-3 flex-grow-1@(activeClass)@(inPathClass)" @(currentNode.IsActive ? "aria-current='page'" : "") aria-label="Unfold @currentNode.Name" for="nav_@(paragraphId)_@(nodeId)">
							@if (hasProductGroup)
							{
								var group = currentNode.GetProductGroup();
								if (showProductGroupImage)
								{
									if (group.GroupFields.Count > 0)
									{
										foreach (var field in group.GroupFields)
										{
											if (field.SystemName == "ProductGroupNavigationImage")
											{
												if (field.ToString().EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
												{
													<span class="icon-auto" style="height: @(productGroupImageSize)px; width: @(productGroupImageSize)px;">
														@ReadFile(field.ToString())
													</span>
												}
												else
												{	
													var imagePath = "/Admin/Public/GetImage.ashx?Image=" + GetImagePathSanitized(field.ToString()) + "&Width=" + productGroupImageSize + "&Height=" + productGroupImageSize + "&crop=0";
													<img loading="lazy" alt="@group.Name" width="@productGroupImageSize" height="@productGroupImageSize" src="@imagePath">
												}
											}
										}
									}
								}
							}

							<span class="flex-grow-1">
								@currentNode.Name
							</span>

							@if (hasChildren)
							{
								<span class="btn btn-secondary p-1 icon-2" data-dw-button="secondary">@ReadFile(arrowRightIconPath)</span>
							}
						</label>
					}

					if (hasChildren)
					{
						<input type="checkbox" class="visually-hidden sub-nav-check" id="nav_@(paragraphId)_@(nodeId)" @inPathChecked>
						<div class="nav sub-nav position-absolute h-100 opacity-0 pe-none invisible w-100 left-0 top-0">
							<div class="h-100 w-100 overflow-y-auto overflow-x-hidden">
								<div class="nav-header border-bottom position-relative py-1">
									<label class="nav-link position-relative d-flex align-items-center gap-2 flex-grow-1" aria-label="Go back to @currentNode.Name" for="nav_@(paragraphId)_@(nodeId)">
										<span class="btn btn-secondary p-1 icon-2" data-dw-button="secondary">@ReadFile(arrowLeftIconPath)</span>										
										<span class="flex-grow-1 fs-7">@currentNode.Name</span>
									</label>
								</div>

								@foreach (var node in currentNode.Nodes)
								{
									await NavItemHelper(node);
								}

								@if (hasProductGroup)
								{
									var group = currentNode.GetProductGroup();

									if (showProductGroupImage)
									{
										var groupName = group.Name;
										string productGroupPromotionImage = string.Empty;
										string productGroupPromotionImagePath = string.Empty;
										string productGroupPromotionDescription = string.Empty;
										string productGroupPromotionLinkLabel = string.Empty;
										string productGroupPromotionLink = string.Empty;

										if (group.GroupFields.Count > 0)
										{
											foreach (var field in group.GroupFields)
											{
												if (field.SystemName == "ProductGroupPromotionImage")
												{
													productGroupPromotionImage = field.Value.ToString();
												}
												if (field.SystemName == "ProductGroupPromotionDescription")
												{
													productGroupPromotionDescription = field.Value.ToString();
												}
												if (field.SystemName == "ProductGroupPromotionLinkLabel")
												{
													productGroupPromotionLinkLabel = field.Value.ToString();
												}
												if (field.SystemName == "ProductGroupPromotionLink")
												{
													productGroupPromotionLink = field.Value.ToString();
												}
											}
											
											if (!string.IsNullOrEmpty(productGroupPromotionImage))
											{
												productGroupPromotionLink = !string.IsNullOrEmpty(productGroupPromotionLink) ? productGroupPromotionLink : currentNode.Link;
												
												productGroupPromotionImagePath = $"/Admin/Public/GetImage.ashx?Width=480&crop=0&image={GetImagePathSanitized(productGroupPromotionImage)}";
														
												<div class="mt-3 mx-3">

													<a href="@productGroupPromotionLink" title="@groupName">
														<figure class="ratio ratio-16x9">
															<img class="img-fluid" src="@productGroupPromotionImagePath" alt="@groupName" style="object-fit:cover">
														</figure>
													</a>
													
													@if (!string.IsNullOrEmpty(productGroupPromotionDescription) || !string.IsNullOrEmpty(productGroupPromotionLinkLabel))
													{
														if (!string.IsNullOrEmpty(productGroupPromotionDescription))
														{
															<h6>@productGroupPromotionDescription</h6>
														}
														if (!string.IsNullOrEmpty(productGroupPromotionLinkLabel))
														{
															productGroupPromotionLink = !string.IsNullOrEmpty(productGroupPromotionLink) ? productGroupPromotionLink : currentNode.Link;

															<a href="@productGroupPromotionLink" title="@productGroupPromotionLinkLabel" class="btn btn-primary" data-dw-button="primary">@productGroupPromotionLinkLabel</a>
														}
													}
												</div>
											}
										}

									}
								}
							</div>
						</div>
					}
				}
				else
				{
					bool countrySelector = page.Item?["CountrySelector"] != null ? Convert.ToBoolean(page.Item["CountrySelector"].ToString()) : false;
					bool languageSelector = page.Item?["LanguageSelector"] != null ? Convert.ToBoolean(page.Item["LanguageSelector"].ToString()) : false;
					bool currencySelector = page.Item?["CurrencySelector"] != null ? Convert.ToBoolean(page.Item["CurrencySelector"].ToString()) : false;
					string name = Translate("Preferences");
					string icon = string.Empty;

					if (languageSelector)
					{
						bool hideIcon = page.Item?["HideIcon"] != null ? Convert.ToBoolean(page.Item["HideIcon"].ToString()) : false;

						if (!hideIcon)
						{
							icon = $"/Files/FlagIcons/{Pageview.Area.CultureInfo.Name.ToLower()}.svg";
						}

						name = reg.Replace(Pageview.Area.CultureInfo.DisplayName, string.Empty);
					}

					<form action="/Default.aspx?ID=@currentNode.PageId" data-response-target-element="PreferencesModalContent" data-layout-template="Swift-v2_Preferences.cshtml" data-preloader="inline" class="w-100">
						<input type="hidden" name="Layout" value="modal">
						<input type="hidden" name="CurrentPageID" value="@Pageview.ID">
						<input type="hidden" name="GroupID" value="@groupId">
						<input type="hidden" name="ProductID" value="@productId">
						<input type="hidden" name="VariantID" value="@variantId">
						<a href="#" role="button" onclick="swift.PageUpdater.Update(event)" class="nav-link position-relative flex-fill swift_open-preferences-modal @activeClass @inPathClass" @(currentNode.IsActive ? "aria-current='page'" : "") data-bs-toggle="modal" data-bs-target="#PreferencesModal">
							@if (icon != "")
							{
								if (icon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase) && !icon.ToLower().Contains("none"))
								{
									string iconPath = Dynamicweb.Context.Current.Server.MapPath(icon);

									<span class="icon-2">@ReadFile(iconPath)</span>
								}
							}
							<span>@name</span>
						</a>
					</form>
				}
			</div>
		}
	}
}
