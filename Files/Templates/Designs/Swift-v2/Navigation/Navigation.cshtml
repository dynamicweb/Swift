@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using System.IO
@using System.Text.RegularExpressions
@using Dynamicweb
@using Dynamicweb.Ecommerce.Orders

@{
	string colorScheme = Pageview.CurrentParagraph.ColorSchemeId;
	int currentParagraphId = Pageview.CurrentParagraph.ID;
	bool showOnlyFirstNavLevel = Model.Parameters.Keys.Contains("ShowOnlyFirstNavLevel") ? Convert.ToBoolean(Model.Parameters["ShowOnlyFirstNavLevel"]) : false;
	string navItemVisuallyHidden = string.Empty;
}

@foreach (var node in Model.Nodes)
{
	var nodePage = Dynamicweb.Content.Services.Pages.GetPage(node.PageId);
	var pageType = nodePage.Item?.SystemName ?? "Swift-v2_Page";
	var pageIcon = string.Empty;
	if (nodePage.PropertyItem is object)
	{
		if(nodePage.PropertyItem.TryGetValue("Icon", out object pageIconValue))
		{
			pageIcon = Dynamicweb.Core.Converter.ToString(pageIconValue);
		}
	}

	var iconPath = pageIcon;
	var hasChildren = node.Nodes.Count() > 0;
	string nodeId = !string.IsNullOrEmpty(node.GroupId) ? $"Navigation_{node.GroupId}_{currentParagraphId}" : $"Navigation_Page_Desktop_{node.PageId.ToString()}_{currentParagraphId}";
	string dropdownAttributes = hasChildren && !showOnlyFirstNavLevel ? " role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" data-bs-toggle=\"dropdown\" data-bs-offset=\"0,0\"" : string.Empty;
	string dropdownClasses = string.Empty;
	string ariaCurrent = node.IsActive ? "aria-current='page'" : string.Empty;

	<li class="nav-item@(hasChildren ? " dropdown" : string.Empty)">
		@if (node.IsClickable)
		{
			@:<a href="@node.Link" class="p-2 nav-link d-inline-flex align-items-center gap-2 text-nowrap text-decoration-underline-hover @(node.IsActive ? "active" : string.Empty) @(hasChildren ? "dropdown-toggle" : string.Empty)" @(dropdownAttributes) @(ariaCurrent) id="@nodeId">
		}
		else
		{
			@:<span class="p-2 nav-link d-inline-flex align-items-center gap-2 text-nowrap @(hasChildren ? " dropdown-toggle " : string.Empty)" @dropdownAttributes id="@nodeId">
		}

			@if (pageIcon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
			{
				<span class="icon-3 pe-none">@ReadFile(iconPath)</span>
			}
			<span class="@(navItemVisuallyHidden)">@node.Name</span>

		@if (node.IsClickable)
		{
			@:</a>
		}
		else
		{
			@:</span>
		}

		@if (hasChildren && !showOnlyFirstNavLevel)
		{
			<ul class="dropdown-menu" aria-labelledby="@nodeId" data-dw-colorscheme="@colorScheme">
				@foreach (var subnode in node.Nodes) // Standard pages
				{
					nodeId = !string.IsNullOrEmpty(subnode.GroupId) ? "Navigation_" + subnode.GroupId + "_" + currentParagraphId : "Navigation_Page_" + subnode.PageId.ToString() + "_" + currentParagraphId;

					<li>
						@if (subnode.IsClickable)
						{
							<a href="@subnode.Link" class="dropdown-item py-2 text-decoration-underline-hover" @(subnode.IsActive ? " aria-current='page'" : string.Empty) id="@nodeId">@subnode.Name</a>
						}
						else
						{
							<span class="dropdown-item py-2" @(subnode.IsActive ? " aria-current='page'" : string.Empty) id="@nodeId">@subnode.Name</span>
						}
					</li>
				}
			</ul>
		}
	</li>
}
