@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Frontend

@functions {
	private string GetFontStack()
	{
		return "font-family:initial,Arial,Helvetica Neue,Helvetica,sans-serif;";
	}

	private string GetTableReset()
	{
		return "border:0;margin:0;outline:0;padding:0;";
	}
}

@{
	string backgroundColor = $"background-color:{Model.ColorScheme?.BackgroundColor?.Hex ?? string.Empty};";
	string foregroundColor = $"color:{Model.ColorScheme?.ForegroundColor?.Hex ?? string.Empty};";
	string borders = Model.Item.GetRawValueString("Borders", "none");
	string borderThicknes = Model.Item.GetRawValueString("BorderThicknes", "0") + "px";
	string borderClass = string.Empty;

	switch (borders)
	{
		case "top":
			borderClass = $"border-top:{borderThicknes} solid;";
			break;
		case "bottom":
			borderClass = $"border-bottom:{borderThicknes} solid;";
			break;
		case "top-bottom":
			borderClass = $"border-top:{borderThicknes} solid;border-bottom:{borderThicknes} solid;border-left:0;border-right:0;";
			break;
		case "all":
			borderClass = $"border:{borderThicknes} solid;";
			break;
	}

	string padding = Model.Item.GetRawValueString("Padding", "0");
	string align = Model.Item.GetRawValueString("Align", "left");
	string title = Model.Item.GetString("Title", string.Empty);
	var link = new Dynamicweb.Frontend.LinkViewModel();
	string linkType = Model.Item.GetRawValueString("LinkType", "page");

	if (linkType == "page" && Model.Item.TryGetLink("PageLink", out var pageLink))
	{
		link.Url = pageLink.Url;
	}

	if (linkType == "product-group" && Model.Item.TryGetValue<IList<ProductGroupViewModel>>("ProductGroupLink", out var selectedGroups))
	{
		IList<string> groupIds = new List<string> { };

		foreach (var fromGroup in selectedGroups)
		{
			groupIds.Add(fromGroup.Id);
		}

		link.Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds);
	}

	if (linkType == "product" && Model.Item.TryGetValue<ProductListViewModel>("ProductLink", out var products))
	{
		IList<string> productIds = new List<string> { };

		if (products.Products.Any())
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}

			string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
			string productLink = products.Products.FirstOrDefault().GetProductLink(GetPageIdByNavigationTag("Shop"), false);
			productLink = productIds.Count != 1 ? "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&" + productParameter + "=" + string.Join(",", productIds).Trim() : productLink;

			link.Url = productLink;
		}
	}

	if (linkType == "command" && Model.Item.TryGetString("SystemCommand", out var command))
	{
		link.Url = command;
	}
}

<table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;mso-line-height-rule:exactly;@GetTableReset()color:inherit;width:100%;@GetFontStack()">
	<tbody>
		<tr style="@GetTableReset()">
			<td style="mso-line-height-rule:exactly;mso-text-raise:0px;mso-table-lspace:0pt;mso-table-rspace:0pt;@GetFontStack()font-weight:400;text-align:@align;@(backgroundColor)@(foregroundColor)@GetTableReset()padding:@(padding)px;@(borderClass)" width="100%">
				@if (link is object)
				{
					var buttonBackgroundColor = Model?.ColorScheme?.PrimaryButtonColor?.Hex ?? string.Empty;
					var buttonForegroundColor = Model?.ColorScheme?.PrimaryButtonColor?.Contrast(100).ToString() ?? string.Empty;
					var buttonBorderColor = Model?.ColorScheme?.PrimaryButtonColor?.Hex ?? string.Empty;

					var parms = new Dictionary<string, object>();
					parms.Add("backgroundColor", buttonBackgroundColor);
					parms.Add("foregroundColor", buttonForegroundColor);
					parms.Add("borderColor", buttonBorderColor);
					parms.Add("align", align);
					parms.Add("title", title);

					@RenderPartial("Swift-v2_Email/Components/Button.cshtml", link ?? new Dynamicweb.Frontend.LinkViewModel(), parms)
				}
				<!--[if mso]><br/><![endif]-->
			</td>
		</tr>
	</tbody>
</table>
