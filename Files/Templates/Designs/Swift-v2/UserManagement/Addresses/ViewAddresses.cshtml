@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@GetString("UserManagement:User.ManageAddresses.MakeDefault.Javascript")

@{
	var themeRaw = Pageview.CurrentParagraph.Item["Theme"]?.ToString();
	string theme = !string.IsNullOrEmpty(themeRaw) ? " h-100 theme " + themeRaw.Replace(" ", "").Trim().ToLower() : string.Empty;

	var addressesLoop = GetLoop("UserManagement:User.UserAddresses");
	bool userAddressIsStandardSwiftTemplates = Pageview.AreaSettings.GetString("AddressFieldsBasedOn", "swift") == "swift";
}

<div class="@(theme)">
	<header class="d-flex flex-row align-items-center gap-3 p-3 border-bottom">
		<h1 class="h6 m-0 flex-fill">@Translate("My addresses")</h1>
	</header>

	@GetString("UserManagement:User.ManageAddresses.FormStart")

	@if (
		!string.IsNullOrEmpty(Pageview.User.Address) ||
		!string.IsNullOrEmpty(Pageview.User.Country) ||
		!string.IsNullOrEmpty(Pageview.User.Zip) ||
		!string.IsNullOrEmpty(Pageview.User.State))
	{

		string accountSettingsLink = Pageview.CurrentParagraph.Item["AccountSettingsPage"] != null ? Pageview.CurrentParagraph.Item["AccountSettingsPage"].ToString() + "&GoBackToPage=" + Pageview.Page.ID : "";

		<table class="table m-0">
			<tr class="card-body">
				<td>
					<h2 class="h6 mb-3">@Translate("Billing address")</h2>
					<address>
						@{
                        	if (userAddressIsStandardSwiftTemplates)
                        	{
		                        if (!string.IsNullOrEmpty(Pageview.User.Address))
		                        {
			                        @Pageview.User.Address<br>
		                        }
		                        if (!string.IsNullOrEmpty(Pageview.User.Address2))
		                        {
			                        @Pageview.User.Address2<br>
		                        }
		                        if (!string.IsNullOrEmpty(Pageview.User.Zip) || !string.IsNullOrEmpty(Pageview.User.City))
		                        {
			                        @Pageview.User.Zip<span>&nbsp;</span>@Pageview.User.City<br>
		                        }
		                        if (!string.IsNullOrEmpty(Pageview.User.State))
		                        {
			                        @Pageview.User.State<br>
		                        }
		                        if (!string.IsNullOrEmpty(Pageview.User.CountryCode))
		                        {
			                        @Pageview.User.CountryCode<br>
		                        }
                        	}
                        	else
                        	{
								<text>
								@RenderUserAddressInline(Pageview.User)
								</text>
                        	}

	                        if (!string.IsNullOrEmpty(Pageview.User.Email))
	                        {
		                        @Pageview.User.Email<br>
	                        }
	                        if (!string.IsNullOrEmpty(Pageview.User.Phone))
	                        {
		                        @Pageview.User.Phone<br>
	                        }
                        }
					</address>
				</td>
			</tr>

		</table>
	}

	@if (addressesLoop.Count > 0)
	{
		bool hasDefaultAddress = false;

		<table class="table m-0">
			@foreach (LoopItem address in addressesLoop.OrderByDescending(address => address.GetString("UserManagement:User.UserAddress.Default")).ToList())
			{
				string addressId = address.GetString("UserManagement:User.UserAddress.ID");

				<tbody>
					<tr>
						<td colspan="2" class="border-bottom-0">
							@if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Description.Value")))
							{
								<h2 class="h6 mb-3">@Translate("Delivery address") - @address.GetString("UserManagement:User.UserAddress.Description.Value")</h2>
							}
							else
							{
								<h2 class="h6 mb-3">@Translate("Delivery address")</h2>
							}
							<address class="m-0">
                                @if (userAddressIsStandardSwiftTemplates)
                                {
									if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Address.Value")))
									{
										@address.GetString("UserManagement:User.UserAddress.Address.Value")<br>
									}
		                            if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Address2.Value")))
		                            {
			                            @address.GetString("UserManagement:User.UserAddress.Address2.Value")<br>
		                            }
		                            if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Zip.Value")) || !string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.City.Value")))
		                            {
			                            @address.GetString("UserManagement:User.UserAddress.Zip.Value")<span>&nbsp;</span>@address.GetString("UserManagement:User.UserAddress.City.Value")<br>
		                            }
		                            if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.State.Value")))
		                            {
			                            var countryCode = address.GetString("UserManagement:User.UserAddress.CountryCode");
										string stateName = Dynamicweb.Ecommerce.Services.Countries.GetRegion(countryCode, address.GetString("UserManagement:User.UserAddress.State"))?.GetName(Dynamicweb.Ecommerce.Common.Context.LanguageID) ?? string.Empty;

			                            @stateName<br>
		                            }
		                            if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.CountryCode.Value")))
		                            {
			                            @address.GetString("UserManagement:User.UserAddress.Culture.CountryName")<br>
		                            }
                                }
                                else
                                {
									<text>
									@RenderUserItemAddressInline(address)
									</text>
                                }
									
	                            @if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Email.Value")))
	                            {
		                            @address.GetString("UserManagement:User.UserAddress.Email.Value")<br>
	                            }
	                            @if (!string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Phone.Value")))
	                            {
		                            @address.GetString("UserManagement:User.UserAddress.Phone.Value")<br>
	                            }
							</address>
						</td>
					</tr>

					@if (addressesLoop.Count > 0)
					{
						<tr>
							<td>
								@if (!address.GetBoolean("UserManagement:User.UserAddress.Default"))
								{
									<div class="form-check">
										<input class="form-check-input" type="radio" value="@addressId" id="SetDefaultAddress_@addressId" onclick="makeDefaultAddress('@addressId');">
										<label class="form-check-label" for="SetDefaultAddress_@addressId">
											@Translate("Set as default delivery address")
										</label>
									</div>
								}
								else
								{
									<div class="form-check">
										<input class="form-check-input" type="radio" name="defaultAddressRadio" id="defaultAddressRadio" disabled checked>
										<label class="form-check-label" for="defaultAddressRadio">
											@Translate("This is your default delivery address")
										</label>
									</div>

									hasDefaultAddress = true;
								}
							</td>
						</tr>
					}
				</tbody>
			}
		</table>

		if (!hasDefaultAddress)
		{
			<div class="p-3">
				<div class="alert alert-warning m-0">
					@Translate("You need to set one of the addresses as the default address")
				</div>
			</div>
		}
	}

	@GetString("UserManagement:User.ManageAddresses.FormEnd")
</div>

@Include("../Helpers/UserAddressDisplayFormatted.cshtml")
