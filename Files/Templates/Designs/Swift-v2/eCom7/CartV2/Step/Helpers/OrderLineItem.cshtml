@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using Dynamicweb.Frontend
@using Dynamicweb.Rendering
@using System.Globalization
@using System

@functions{
	string? DoubleToString(double? value)
	{
		if (value.HasValue)
		{
			return Math.Round(value.Value, 2).ToString(CultureInfo.InvariantCulture); 
		}
		return null;
	}
}

@{
	var orderlines = GetLoop("OrderLines");
}

@for (int i = orderlines.Count - 1; i >= 0; i--)
{
	var orderline = orderlines[i];
	bool neverOutOfStock = orderline.GetBoolean("Ecom:Product.NeverOutOfStock");
	string name = orderline.GetString("Ecom:Order:OrderLine.ProductName");
	string primaryImage = orderline.GetString("Ecom:Product.PrimaryImage");
    string image = $"/Admin/Public/GetImage.ashx?width=180&height=180&image={primaryImage}&format=webp";
	string removeFromBasketLink = orderline.GetString("Ecom:Order:OrderLine.DeleteLink");
	string priceTotalWithDiscounts = orderline.GetString("Ecom:Order:OrderLine.TotalPriceWithProductDiscounts.PriceFormatted");
	string priceTotalWithDiscountsClean = orderline.GetString("Ecom:Order:OrderLine.TotalPriceWithProductDiscounts.Price");
	string unitPrice = orderline.GetString("Ecom:Order:OrderLine.UnitPrice.PriceFormatted");
	string unitPriceClean = orderline.GetDouble("Ecom:Order:OrderLine.UnitPrice.Price").ToString("0.00", System.Globalization.CultureInfo.InvariantCulture);
	string unitPriceCurrency = orderline.GetString("Ecom:Order:OrderLine.Price.CurrencyCode");
	string discountPrice = orderline.GetString("Ecom:Order:OrderLine.UnitPriceWithProductDiscount.PriceFormatted");
	string discountTotal = orderline.GetString("Ecom:Order:OrderLine.TotalDiscount.PriceFormatted");
	string variantText = orderline.GetString("Ecom:Order:OrderLine.ProductVariantText");
	var orderlineId = orderline.GetValue("Ecom:Order:OrderLine.Id");
	double? stepQty = orderline.GetDouble("Ecom:Product.PurchaseQuantityStep") > 0 ? orderline.GetDouble("Ecom:Product.PurchaseQuantityStep") : 1;
	var quantity = orderline.GetDouble("Ecom:Order:OrderLine.Quantity");
	var unitName = orderline.GetString("Ecom:Order:OrderLine.UnitName");
	string primaryGroupId = orderline.GetString("Ecom:Order:OrderLine.PrimaryOrDefaultGroupId");
	string productId = orderline.GetString("Ecom:Order:OrderLine.ProductID");
	string variantId = orderline.GetString("Ecom:Order:OrderLine.ProductVariantID");
	string unitId = orderline.GetString("Ecom:Order:OrderLine.UnitID");
	string productType = orderline.GetString("Ecom.Product.Type");
	double? stockQuantity = orderline.GetDouble("Ecom:Product.Stock");
	double? minQty = orderline.GetDouble("Ecom:Product.PurchaseMinimumQuantity") > 0 ? orderline.GetDouble("Ecom:Product.PurchaseMinimumQuantity") : 1;
	bool isStockType = orderline.GetInteger("Ecom.Product.Type") == 0;
	bool setMaxQty = isStockType && !neverOutOfStock;
	double? maxQty = setMaxQty ? stockQuantity : null;

	string link = "Default.aspx?ID=" + GetPageIdByNavigationTag("Shop");
	link += $"&GroupID={primaryGroupId}";
	link += $"&ProductID={productId}";
	link += !string.IsNullOrEmpty(variantId) ? $"&VariantID={variantId}" : "";

	bool isProductIdOrNumber = !string.IsNullOrEmpty(orderline.GetString("Ecom:Order:OrderLine.ProductID")) || !string.IsNullOrEmpty(orderline.GetString("Ecom:Order:OrderLine.ProductNumber"));  //Live Cart orderlines may not return ProductId. Manually entered products may not have ProductNumber
	bool isProduct = orderline.GetBoolean("Ecom:Order:OrderLine.IsProduct") || (orderline.GetBoolean("Ecom:Order:OrderLine.IsDiscount") && isProductIdOrNumber);
	bool orderIsQuote = Dynamicweb.Ecommerce.Services.Orders.GetById(GetString("Ecom:Order.ID")).IsQuote;

	if (isProduct)
	{
		var bomItems = orderline.GetLoop("BOMItems");

		<article class="grid pt-3" style="row-gap: 0;--bs-gap:1rem;" data-product-id="@productId" data-variant-id="@variantId" data-unit-id="@unitId" data-orderline-total-price="@priceTotalWithDiscountsClean" data-orderline-unit-price="@unitPriceClean">

			<div class="g-col-3 g-col-lg-2">
				<a href="@link" class="ratio ratio-1x1 d-block" title="@name">
					<img class="cart-item-img" src="@image" style="object-fit: contain;" alt="@name">
				</a>
			</div>

			<div class="g-col-9 g-col-lg-10">

				<div class="grid" style="row-gap: 0.5rem;--bs-gap:0;">

					<div class="g-col-12 g-col-md-8 grid grid-7 grid-md-9" style="row-gap: 0.5rem;">
						<div class="g-col-7 g-col-md-6">
							@* Title *@
							<h3 class="h6 fs-7 fs-md-6 mb-0">
								<a href="@link" class="text-decoration-none" title="@name">@name</a>
							</h3>

							@* Variants *@
							@if (!string.IsNullOrEmpty(variantText))
							{
								<p class="mt-2 mb-0 fs-7 fs-md-6">@variantText</p>
							}

							@if (orderline.GetBoolean("Ecom:Order:OrderLine.IsDiscount"))
							{
								@* Free product notice *@
								<p class="mt-2 mb-0 fs-7 fs-md-6 opacity-75">@Translate("Free product")</p>
							}
							else
							{
								@* Unit price *@
								<p class="fs-7 fs-md-6 mt-2 mb-0">
									@if (!string.IsNullOrEmpty(unitName))
									{
										<span>@unitName: </span>
									}
									@if (discountPrice == unitPrice)
									{
										<span class="text-price">@unitPrice</span>
									}
									else
									{
										<span class="text-price">@discountPrice</span>
										<span class="text-decoration-line-through fs-7">
											<span class="text-price">@unitPrice</span>
										</span>
									}
								</p>
							}
						</div>

						<div class="g-col-7 g-col-md-3">
							@if (!orderline.GetBoolean("Ecom:Order:OrderLine.IsDiscount") && !orderIsQuote)
							{
								@* Quantity *@
								<div class="input-group js-input-group">

									@{
										var orderlineViewModel = new Dynamicweb.Ecommerce.Frontend.OrderLineViewModel(){
											Id = orderlineId.ToString(),
											ProductId = productId,
											ProductVariantId = variantId,
											UnitId = unitId,
											Quantity = quantity
										};
									}

									@RenderPartial("Components/QuantitySelectorOrderline.cshtml", orderlineViewModel)

								</div>
							}
							else
							{
								<span>@quantity</span>
							}
						</div>
					</div>

					<div class="g-col-12 g-col-md-4 text-end">
						@* Total *@
						<span class="h6 mb-0 d-block fs-7 fs-md-6">
							<span class="text-price">@priceTotalWithDiscounts</span>
						</span>
						@if (orderline.GetDouble("Ecom:Order:OrderLine.TotalDiscount.Price.Value") != 0)
						{
							<span class="m-0 d-block fs-8">
								<span class="text-price">@discountTotal</span>
							</span>
						}
					</div>

					@if (bomItems.Count > 0) {
						<div class="g-col-12">
							@* BOM items *@
							@foreach (var bomItem in bomItems) {
								string bomImage = bomItem.GetString("Ecom:Product.PrimaryImage");
								bomImage = !bomImage.StartsWith("/Files/", StringComparison.OrdinalIgnoreCase) ? bomImage : $"/Admin/Public/GetImage.ashx?width=60&height=60&image={bomImage}&format=webp";

								<div class="d-flex gap-3">
									@if (!string.IsNullOrEmpty(bomImage)) {
										<div style="width: 60px">
											<div class="ratio ratio-1x1 d-block" title="@name">
												<img class="cart-item-img" src="@bomImage" style="object-fit: contain;" alt="@name">
											</div>
										</div>
									}
									<div class="flex-fill">
										<div class="d-flex justify-content-between">
											<p class="fs-7 fs-md-6 mb-0 fw-bold">@bomItem.GetString("Ecom:Product.Name")</p>
											<p class="fs-7 fs-md-6 mb-0">@Translate("Qty"): @bomItem.GetDouble("Ecom:Order:OrderLine.Quantity")</p>
										</div>
										<p class="fs-7 fs-md-6 mb-0 opacity-50">@bomItem.GetString("Ecom:Product.Number")</p>
									</div>
								</div>
							}
						</div>
					}

					<div class="g-col-12">
						@if (!orderIsQuote)
						{
							string clickProductLink = "onclick=\"return removeProductLink('" + @productId + "', '" + @Dynamicweb.Core.Encoders.HtmlEncoder.JavaScriptStringEncode(name) + "', '" + @Dynamicweb.Core.Encoders.HtmlEncoder.JavaScriptStringEncode(variantText) + "', '" + @unitPriceCurrency + "', '" + @unitPriceClean + "', '" + @quantity.ToString().Replace(",", ".") + "')\"";

							<a href="@removeFromBasketLink" class="btn btn-link btn-sm p-0 m-0 fs-8" title="@Translate("Remove")" @clickProductLink>@Translate("Remove")</a>
						}

						<script>
							function removeProductLink(productId, productName, productVariant, productCurrency, productPrice, productQuantity) {
								if (typeof gtag !== "undefined") {
									gtag("event", "remove_from_cart", {
										currency: productCurrency,
										value: (parseFloat(productPrice) * parseFloat(productQuantity)),
										items: [
											{
												item_id: productId,
												item_name: productName,
												item_variant: productVariant,
												currency: productCurrency,
												price: productPrice,
												item_list_id: "cart",
												item_list_name: "Cart",
												quantity: productQuantity
											}
										]
									});
								}
							}
						</script>

					</div>
				</div>
			</div>

			@* Bottom border *@
			<span class="g-col-12 mt-3">
				<span class="d-none d-lg-block border-bottom"></span>
			</span>
		</article>
	}
}
