@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using System.Text.RegularExpressions
@using System.Text

@functions {
	public string RenderCustomerAddressEdit(bool enableAdditionalAddress = false, string disabled = "")
	{
		string currentCountry = Pageview.Area?.EcomCountryCode != null ? Pageview.Area.EcomCountryCode : "dk";
		foreach (var countryLoopItem in GetLoop("Countries"))
		{
			if (countryLoopItem.GetString("Ecom:Country.IsCustomerCountryOrDefault") == "true")
			{
				currentCountry = countryLoopItem.GetString("Ecom:Country.Code2");
			}
		}

		List<List<string>> addressFormat = Dynamicweb.Ecommerce.International.Country.GetEditAddress(currentCountry);

		var result = new StringBuilder();

		foreach (List<string> addressLine in addressFormat)
		{
			string columnSize = GetBootstrapColumnSizeForCustomerAddress(addressLine, enableAdditionalAddress);
			
			for (var i = 0; i < addressLine.Count; i++)
			{
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{name}", "EcomOrderCustomerName", GetString("Ecom:Order.Customer.Name"), Translate("Name"), columnSize, true, "text", disabled);
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{firstName}", "EcomOrderCustomerFirsName", GetString("Ecom:Order.Customer.FirstName"), Translate("First Name"), columnSize, true, "text", disabled);
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{lastName}", "EcomOrderCustomerSurname", GetString("Ecom:Order.Customer.Surname"), Translate("Last Name"), columnSize, true, "text", disabled);
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{company}", "EcomOrderCustomerCompany", GetString("Ecom:Order.Customer.Company"), Translate("Company"), columnSize, false, "text", disabled);
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{address}", "EcomOrderCustomerAddress", GetString("Ecom:Order.Customer.Address"), Translate("Street & Number"), columnSize, true, "text", disabled);
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{address1}", "EcomOrderCustomerAddress", GetString("Ecom:Order.Customer.Address"), Translate("Street & Number"), columnSize, true, "text", disabled);
				if (enableAdditionalAddress)
				{
					addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{address2}", "EcomOrderCustomerAddress2", GetString("Ecom:Order.Customer.Address2"), Translate("Additional address"), columnSize, false, "text", disabled);
				}
				else
				{
					addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{address2}", "");
				}
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{zip}", "EcomOrderCustomerZip", GetString("Ecom:Order.Customer.Zip"), Translate("Zip code"), columnSize, true, "text", disabled);
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{city}", "EcomOrderCustomerCity", GetString("Ecom:Order.Customer.City"), Translate("Town / City"), columnSize, true, "text", disabled);
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{regionCode}", RenderCustomerAddressRegionField(columnSize, disabled).ToString());
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{region}", RenderCustomerAddressRegionField(columnSize, disabled).ToString());
				addressLine[i] = ReplaceCustomerAddressPlaceholder(addressLine[i], "{country}", (string)RenderCustomerAddressCountryField(columnSize, disabled).ToString());
							
				// Remove any bad placeholders the user may have submitted
				addressLine[i] = Regex.Replace(addressLine[i], "{phone}", string.Empty, RegexOptions.IgnoreCase); 
				addressLine[i] = Regex.Replace(addressLine[i], "{email}", string.Empty, RegexOptions.IgnoreCase);
			}

			var completeLine = string.Join(string.Empty, addressLine.ToArray());
			if (!string.IsNullOrWhiteSpace(completeLine))
			{
				result.Append(completeLine);
			}
		}

		return result.ToString();
	}

	public string RenderCustomerAddressRegionField(string wrapperClass, string disabled = "")
	{
		var regions = GetLoop("CustomerRegions");
		string currentCountry = GetString("Ecom:Order.Customer.Country.Code");
		currentCountry = !string.IsNullOrEmpty(currentCountry) ? currentCountry : Pageview.Area?.EcomCountryCode != null ? Pageview.Area.EcomCountryCode : "dk";
		string regionLabel = currentCountry == "CA" ? Translate("Province") : currentCountry == "US" ? Translate("State") : Translate("Region");
		
		StringBuilder result = new StringBuilder();

		if (regions.Any())
		{
			result.Append($"<div class=\"{wrapperClass}\">");
			result.Append("<div class=\"form-floating\">");
			result.Append($"<select class=\"form-select\" {disabled} name=\"EcomOrderCustomerRegion\" id=\"EcomOrderCustomerRegion\" onchange=\"submitForm()\">");

			foreach (var region in regions)
			{
				string isCustomerRegion = region.GetString("Ecom:CustomerRegion.IsCustomerRegion");
				string selected = isCustomerRegion == "true" ? "selected" : "";
				result.Append($"<option value=\"{region.GetString("Ecom:CustomerRegion.RegionCode")}\" {selected}>{region.GetString("Ecom:CustomerRegion.Name")}</option>");
			}

			result.Append("</select>");
			result.Append($"<label for=\"EcomOrderCustomerRegion\">{regionLabel}</label>");
			result.Append("</div>");
			result.Append("</div>");
		}
		else
		{
			result.Append(RenderCustomerAddressField("EcomOrderCustomerRegion", GetString("Ecom:Order.Customer.Region"), regionLabel, wrapperClass, false, "text", disabled));
		}

		return result.ToString();
	}

	public string RenderCustomerAddressCountryField(string wrapperClass, string disabled = "")
	{
		StringBuilder result = new StringBuilder();

		result.Append($"<div class=\"{wrapperClass}\">");
		result.Append("<div class=\"form-floating\">");
		result.Append($"<select class=\"form-select\" {disabled} name=\"EcomOrderCustomerCountry\" id=\"EcomOrderCustomerCountry\" onchange=\"submitForm()\">");

		foreach (var country in GetLoop("Countries"))
		{
			string isCustomerCountry = country.GetString("Ecom:Country.IsCustomerCountryOrDefault");
			string selected = isCustomerCountry == "true" ? "selected" : "";
			result.Append($"<option value=\"{country.GetString("Ecom:Country.Code2")}\" {selected}>{country.GetString("Ecom:Country.Name")}</option>");
		}

		result.Append("</select>");
		result.Append($"<label for=\"EcomOrderCustomerCountry\">@Translate(\"Country\")</label>");
		result.Append("</div>");
		result.Append("</div>");

		return result.ToString();
	}

	public string GetBootstrapColumnSizeForCustomerAddress(List<string> addressLineArray, bool enableAdditionalAddress)
	{
		string combinedLine = string.Join(",", addressLineArray);
		string prefix = "g-col-12 g-col-lg-";

		int addressLinePlaceholderCount = combinedLine.Count(s => s.Equals('{'));
		if (!enableAdditionalAddress && combinedLine.IndexOf("address2", StringComparison.OrdinalIgnoreCase) >= 0) addressLinePlaceholderCount -= 1;
		if (!GetLoop("CustomerRegions").Any() && combinedLine.IndexOf("region", StringComparison.OrdinalIgnoreCase) >= 0) addressLinePlaceholderCount -= 1;
		if (addressLinePlaceholderCount <= 0) return prefix + "12";
		
		double columnSize = (double)12 / addressLinePlaceholderCount;
		return prefix + Math.Ceiling(columnSize);
	}
	
	public string ReplaceCustomerAddressPlaceholder(string addressLine, string pattern, string replacement)
	{
		return Regex.Replace(addressLine, pattern, replacement, RegexOptions.IgnoreCase);
	}
	
	public string ReplaceCustomerAddressPlaceholder(string addressLine, string placeholder, string fieldName, string fieldValue, string fieldLabel, string wrapperClass, bool required = true, string fieldType = "text", string disabled = "")
	{
		if (addressLine.IndexOf(placeholder, StringComparison.OrdinalIgnoreCase) < 0) return addressLine;
		
		string fieldHtml = RenderCustomerAddressField(fieldName, fieldValue, fieldLabel, wrapperClass, required, fieldType, disabled).ToString();
		return Regex.Replace(addressLine, placeholder, fieldHtml, RegexOptions.IgnoreCase);
	}
	
	public string RenderCustomerAddressField(string fieldName, string fieldValue, string fieldLabel, string wrapperClass, bool isRequired = true, string fieldType = "text", string disabled = "")
	{
		fieldType = string.IsNullOrEmpty(fieldType) ? "text" : fieldType;
		string required = isRequired ? "required=\"required\"" : string.Empty;

		StringBuilder markup = new StringBuilder();

		markup.Append($"<div class=\"{wrapperClass}\">");
		markup.Append("<div class=\"form-floating\">");
		markup.Append($"<input type=\"{fieldType}\" {disabled} class=\"form-control\" name=\"{fieldName}\" id=\"{fieldName}\" value=\"{fieldValue}\" placeholder=\"{fieldLabel}\" {required}>");
		markup.Append($"<label for=\"{fieldName}\">{fieldLabel}</label>");
		markup.Append("</div>");
		markup.Append("</div>");

		return markup.ToString();
	}
}
